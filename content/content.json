[
	{
		"title": "getting-started",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orge0bbb84\">Introduction</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orge0bbb84\">\n<h2 id=\"orge0bbb84\">Introduction</h2>\n<div class=\"outline-text-2\" id=\"text-orge0bbb84\">\n<p>\nThis blog contains many usefull notes.\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/getting-started",
		"heading_ids": [
			"orge0bbb84"
		]
	},
	{
		"title": "python-virtual-env",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org9a71195\">Reference</a></li>\n<li><a href=\"#org4bfa3ba\">Virtual Environment in Python</a>\n<ul>\n<li><a href=\"#org6178160\">Installation</a></li>\n<li><a href=\"#orga7ab233\">Creating Virtual Environment</a></li>\n<li><a href=\"#org7281632\">Activating Virtual Environment</a></li>\n<li><a href=\"#orgf7c10fd\">Leaving Virtual Environment</a></li>\n<li><a href=\"#org89ca9f3\">Sharing the Virtual Enviroment</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org9a71195\">\n<h2 id=\"org9a71195\">Reference</h2>\n<div class=\"outline-text-2\" id=\"text-org9a71195\">\n<ul class=\"org-ul\">\n<li><a href=\"https://youtu.be/Kg1Yvry_Ydk\">Corey Schafer Youtube</a></li>\n<li><a href=\"https://docs.python.org/3/library/venv.html#module-venv\">Official Documentation</a></li>\n<li><a href=\"https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/\">Official Documentation</a></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org4bfa3ba\">\n<h2 id=\"org4bfa3ba\">Virtual Environment in Python</h2>\n<div class=\"outline-text-2\" id=\"text-org4bfa3ba\">\n<p>\nPurpose of virtual env is isolation. So that you can install packages that are specific to a particular project.\n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org6178160\">\n<h3 id=\"org6178160\">Installation</h3>\n<div class=\"outline-text-3\" id=\"text-org6178160\">\n<p>\nFor newer python version &gt;= 3.3 <code>venv</code> is the <b>recommended</b> way to manage virtual enviroment.\nI also comes with python standard library. On Debian/Ubuntu systems, you need to install the <code>python3-venv</code>\npackage using the following command, based on python version.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">apt install python3.10-venv\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orga7ab233\">\n<h3 id=\"orga7ab233\">Creating Virtual Environment</h3>\n<div class=\"outline-text-3\" id=\"text-orga7ab233\">\n<p>\nCreation of virtual environments is done by executing the command <code>venv</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">python3 -m venv /path/to/new/virtual/environment\n</pre>\n</div>\n<p>\nOr alternatively go to your project’s directory and run venv. The second argument <code>env</code> is the location (subfolder inside project)\nto create virtual env.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">python3 -m venv env\n</pre>\n</div>\n<p>\n<b>Note: You should exclude your virtual environment directory from your version control system using .gitignore or similar.</b>\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org7281632\">\n<h3 id=\"org7281632\">Activating Virtual Environment</h3>\n<div class=\"outline-text-3\" id=\"text-org7281632\">\n<p>\nActivating a virtual environment will put the virtual environment-specific python and pip executables into your shell’s PATH.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffb86c;\">source</span> env/bin/activate\n</pre>\n</div>\n<p>\nYou can confirm you’re in the virtual environment by checking the location of your Python interpreter:\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">which python\n</pre>\n</div>\n<p>\nNow you can install any package (even with specific version) with <code>python3 -m pip install {package-name}</code> which will be isolated to this\nenvironment only. You can see those packages by <code>pip list</code>\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgf7c10fd\">\n<h3 id=\"orgf7c10fd\">Leaving Virtual Environment</h3>\n<div class=\"outline-text-3\" id=\"text-orgf7c10fd\">\n<p>\nSimple command <code>deactivate</code> will deactive the active virtual env if you're switching to different projects or leaving this environment.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">deactivate\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org89ca9f3\">\n<h3 id=\"org89ca9f3\">Sharing the Virtual Enviroment</h3>\n<div class=\"outline-text-3\" id=\"text-org89ca9f3\">\n<p>\nThe package version installed inside virtual enviroment is important to be shared across the team. You can create a <code>requirements.txt</code> file\nand share across teams, so that they can install the same version in their virtual env.\n</p>\n<ol class=\"org-ol\">\n<li><p>\nCreate requirements file\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">pip freeze &gt; requirements.txt\n</pre>\n</div></li>\n<li><p>\nInstall packages from <code>requirements.txt</code> while in virtual env.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">pip install -r requirements.txt\n</pre>\n</div></li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/python-virtual-env",
		"heading_ids": [
			"org9a71195",
			"org4bfa3ba",
			"org6178160",
			"orga7ab233",
			"org7281632",
			"orgf7c10fd",
			"org89ca9f3"
		]
	},
	{
		"title": "emacs-practice-elisp",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org34396fb\">Function Definition in emacs-lisp</a></li>\n<li><a href=\"#org4e79501\">This happens to be the best resolution for many of</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org34396fb\">\n<h2 id=\"org34396fb\">Function Definition in emacs-lisp</h2>\n<div class=\"outline-text-2\" id=\"text-org34396fb\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">say-hello</span><span style=\"color: #ff79c6;\">(</span>msg<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>message msg<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>say-hello <span style=\"color: #f1fa8c;\">\"Hello Mathura\"</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org4e79501\">\n<h2 id=\"org4e79501\">This happens to be the best resolution for many of</h2>\n</div>\n</div>\n</body>",
		"path": "/content/emacs-practice-elisp",
		"heading_ids": [
			"org34396fb",
			"org4e79501"
		]
	},
	{
		"title": "emacs-org-roam",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgd6bfe00\">Reference</a></li>\n<li><a href=\"#org4dc233e\">Installation</a></li>\n<li><a href=\"#orga4f435e\">Commonly used commands</a></li>\n<li><a href=\"#org247c95b\"><span class=\"todo TODO\">TODO</span> Org-roam-templates</a></li>\n<li><a href=\"#org30e71b3\">Org-roam Dailies</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgd6bfe00\">\n<h2 id=\"orgd6bfe00\">Reference</h2>\n<div class=\"outline-text-2\" id=\"text-orgd6bfe00\">\n<ul class=\"org-ul\">\n<li><a href=\"https://www.orgroam.com/manual.html\">org-roam-manual</a></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org4dc233e\">\n<h2 id=\"org4dc233e\">Installation</h2>\n<div class=\"outline-text-2\" id=\"text-org4dc233e\">\n<p>\nUse following code in <code>init.el</code> file to setup <b>org-roam</b>. Make sure the directory <code>~/coding/roam-notes</code> already exists.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">org-roam</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:init</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-roam-v2-ack t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>org-roam-directory <span style=\"color: #f1fa8c;\">\"~/coding/roam-notes\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span>org-roam-setup<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orga4f435e\">\n<h2 id=\"orga4f435e\">Commonly used commands</h2>\n<div class=\"outline-text-2\" id=\"text-orga4f435e\">\n<ul class=\"org-ul\">\n<li><code>org-roam-node-find</code> : creates a node if it does not exist, and visits the node.</li>\n<li><code>org-roam-capture</code> : creates a node if it does not exist, and restores the current window configuration upon completion.</li>\n<li><code>org-roam-insert</code> : creates a node if it does not exist, and inserts a link to the node at point.</li>\n<li><code>org-roam-alias-add</code> : place cursor over the node name and run this command to add aliases.</li>\n<li><code>org-roam-buffer-toggle</code> : Launch an org-roam buffer alongside that tracks the node currently at point. i.e viewing backlink by opening different roam notes</li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org247c95b\">\n<h2 id=\"org247c95b\"><span class=\"todo TODO\">TODO</span> Org-roam-templates</h2>\n<div class=\"outline-text-2\" id=\"text-org247c95b\">\n<p>\nWe can streamline the template capture by customising own templates. While creating a new org-roam node, we'll be prompted\nto select the template specific to our need, e.g book, programming language etc.\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org30e71b3\">\n<h2 id=\"org30e71b3\">Org-roam Dailies</h2>\n<div class=\"outline-text-2\" id=\"text-org30e71b3\">\n<p>\nWe can capture everyday activities with <code>org-roam-dailies</code>. While capturing daily-note for first time, we'll be prompted to\ncreate a folder <code>daily/</code> which is relative to above <code>org-roam-directory</code>. Following commands are helpful\n</p>\n<ul class=\"org-ul\">\n<li><code>org-roam-dailies-capture-today</code> : Create an entry in the daily-note for today</li>\n<li><code>org-roam-dailies-goto-today</code> : Find the daily-note for today, creating it if necessary</li>\n</ul>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/emacs-org-roam",
		"heading_ids": [
			"orgd6bfe00",
			"org4dc233e",
			"orga4f435e",
			"org247c95b",
			"org30e71b3"
		]
	},
	{
		"title": "python-tutorial-corey-schafer",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org444179e\">Hello World!</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org444179e\">\n<h2 id=\"org444179e\">Hello World!</h2>\n<div class=\"outline-text-2\" id=\"text-org444179e\">\n<div class=\"org-src-container\">\n<pre class=\"src src-python\"><span style=\"color: #ffb86c;\">print</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #f1fa8c;\">\"Hello World\"</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/python-tutorial-corey-schafer",
		"heading_ids": [
			"org444179e"
		]
	},
	{
		"title": "emacs-python-ide-setup",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org7384cec\">Introduction</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org7384cec\">\n<h2 id=\"org7384cec\">Introduction</h2>\n</div>\n</div>\n</body>",
		"path": "/content/emacs-python-ide-setup",
		"heading_ids": [
			"org7384cec"
		]
	},
	{
		"title": "emacs-use-package",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgefe4ade\">References</a></li>\n<li><a href=\"#org88119b2\"><code>use-package</code> in emacs</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgefe4ade\">\n<h2 id=\"orgefe4ade\">References</h2>\n<div class=\"outline-text-2\" id=\"text-orgefe4ade\">\n<ul class=\"org-ul\">\n<li><a href=\"https://github.com/jwiegley/use-package\">use-package github</a></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org88119b2\">\n<h2 id=\"org88119b2\"><code>use-package</code> in emacs</h2>\n<div class=\"outline-text-2\" id=\"text-org88119b2\">\n<p>\nUse package is a macro is a very commonly used package for writting one's own configuration in a more concise way.\nCheck how <code>use-package</code> is used extensively in this \n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/emacs-use-package",
		"heading_ids": [
			"orgefe4ade",
			"org88119b2"
		]
	},
	{
		"title": "emacs-custom-configuration",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org8b9f94a\">Modules in Emacs</a></li>\n<li><a href=\"#orgedb34bc\">Key bindings</a></li>\n<li><a href=\"#orgbf7417d\">Tips</a></li>\n<li><a href=\"#org2c8a3d6\">Customising Emacs Configuration</a></li>\n<li><a href=\"#org7d7b72f\">Customise Cursor</a></li>\n<li><a href=\"#orgec0e1a5\">Compile C++</a></li>\n<li><a href=\"#org1198c79\">ivy-mode</a></li>\n<li><a href=\"#org05d8b4b\">Completion with Vertico</a></li>\n<li><a href=\"#org4868d6f\">Consult</a></li>\n<li><a href=\"#orgafe014b\">Embark</a></li>\n<li><a href=\"#orgdd29755\">Embark Consult</a></li>\n<li><a href=\"#org7ee5602\">Perspective</a></li>\n<li><a href=\"#org2ebcf25\">Search &amp; Replace</a></li>\n<li><a href=\"#org6d67fa4\">Emoji</a></li>\n<li><a href=\"#org00ae1ef\">Doom modeline</a></li>\n<li><a href=\"#orgbddee34\">Custom Fonts</a></li>\n<li><a href=\"#orgf0e7512\">Custom Themes</a></li>\n<li><a href=\"#orgf41ee64\">Which Key</a></li>\n<li><a href=\"#org6fe45f4\">Counsel</a></li>\n<li><a href=\"#orgb90e72b\">Projectile</a></li>\n<li><a href=\"#org6d6c73f\">LSP Mode</a>\n<ul>\n<li><a href=\"#org25d9df4\">lsp mode</a></li>\n<li><a href=\"#orge4c607c\">Json Mode</a></li>\n<li><a href=\"#org4694b29\">Javascript</a></li>\n<li><a href=\"#org628413a\">Emmet-mode</a></li>\n<li><a href=\"#org176e3a1\">Flycheck</a></li>\n<li><a href=\"#orgbcb8e43\">Java</a></li>\n</ul>\n</li>\n<li><a href=\"#orgaadf97c\">Next-JS</a></li>\n<li><a href=\"#orge9744b7\">Markdown</a></li>\n<li><a href=\"#orgc7bfc4c\">Org-roam</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#org20de27b\">Multiple Org-Roam</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#org7a0bbb2\">Org-mode</a></li>\n<li><a href=\"#orge9ae560\">Org Present</a></li>\n<li><a href=\"#org8134689\">Leetcode</a></li>\n<li><a href=\"#org35410b8\">simple-httpd</a></li>\n<li><a href=\"#org2b2d9e3\">Dired</a></li>\n<li><a href=\"#org8a038d1\">Docker</a></li>\n<li><a href=\"#orga91c1c7\">Rest Configs</a></li>\n<li><a href=\"#org4e0c75c\">Term Mode</a></li>\n<li><a href=\"#orgb085d58\">Yasnippet</a></li>\n<li><a href=\"#orgdcd0b5f\">Dap Mode</a></li>\n<li><a href=\"#orga2e8d3b\">Eshell</a></li>\n<li><a href=\"#orgbd7af81\">Vterm</a></li>\n<li><a href=\"#org3c05fbf\">M-Tab Buffer Cycling</a></li>\n<li><a href=\"#org3e27e38\">Password Store</a></li>\n<li><a href=\"#org1471152\">Custom emacs file</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org8b9f94a\">\n<h2 id=\"org8b9f94a\">Modules in Emacs</h2>\n<div class=\"outline-text-2\" id=\"text-org8b9f94a\">\n<p>\nBefore starting to customise your emacs configurations, it's important to understand how the packages are loaded in emacs. Then we'll use some helper tools like <code>use-package</code> which helps in maintaining clean configurations.\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgedb34bc\">\n<h2 id=\"orgedb34bc\">Key bindings</h2>\n<div class=\"outline-text-2\" id=\"text-orgedb34bc\">\n<p>\n<code>M-RET</code> for inserting new line inside a table\n</p>\n<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">\n<colgroup>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-left\" scope=\"col\">key bind</th>\n<th class=\"org-left\" scope=\"col\">Command</th>\n<th class=\"org-left\" scope=\"col\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\"><code>M-y</code></td>\n<td class=\"org-left\"><code>counsel-yank-pop</code></td>\n<td class=\"org-left\">Yank from Kill ring</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\"><code>M-p</code></td>\n<td class=\"org-left\"> </td>\n<td class=\"org-left\">Cycle through the past used counsel commands</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\"><code>M-u</code></td>\n<td class=\"org-left\"><code>upcase-word</code></td>\n<td class=\"org-left\">upper case the word from point onward</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\"> </td>\n<td class=\"org-left\"><code>upcase-dwim</code></td>\n<td class=\"org-left\">upper case the selected region or the current</td>\n</tr>\n<tr>\n<td class=\"org-left\"> </td>\n<td class=\"org-left\"> </td>\n<td class=\"org-left\">word (if no region is selected)</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\"> </td>\n<td class=\"org-left\"> </td>\n<td class=\"org-left\"> </td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgbf7417d\">\n<h2 id=\"orgbf7417d\">Tips</h2>\n<div class=\"outline-text-2\" id=\"text-orgbf7417d\">\n<ul class=\"org-ul\">\n<li>To make two buffers unique, e.g when using two independent eshell, rename the existing buffer with <code>M-x rename-uniquely</code>, then open the new eshell in differnt splitted frame.</li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org2c8a3d6\">\n<h2 id=\"org2c8a3d6\">Customising Emacs Configuration</h2>\n<div class=\"outline-text-2\" id=\"text-org2c8a3d6\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\">\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">The default is 800 kilobytes.  Measured in bytes.</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> gc-cons-threshold <span style=\"color: #ff79c6;\">(</span>* 50 1000 1000<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Keep folders clean -------------------------------------------------------------------------------------------------------</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Save backup files file-name~</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> backup-directory-alist `<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\".\"</span> . ,<span style=\"color: #bd93f9;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/backups/\"</span> user-emacs-directory<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">auto-save-mode doesn't create the path automatically!</span>\n<span style=\"color: #61bfff;\">(</span>make-directory <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/auto-saves/\"</span> user-emacs-directory<span style=\"color: #ff79c6;\">)</span> t<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">auto saved files like #Emacs.org#</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> auto-save-list-file-prefix <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/auto-saves/sessions/\"</span> user-emacs-directory<span style=\"color: #ff79c6;\">)</span>\n      auto-save-file-name-transforms `<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\".*\"</span> ,<span style=\"color: #bd93f9;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/auto-saves/\"</span> user-emacs-directory<span style=\"color: #bd93f9;\">)</span> t<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">files created by packages projectile, lsp, dap</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> projectile-known-projects-file <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/projectile-bookmarks.eld\"</span> user-emacs-directory<span style=\"color: #ff79c6;\">)</span>\n      lsp-session-file <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/.lsp-session-v1\"</span> user-emacs-directory<span style=\"color: #ff79c6;\">)</span>\n      dap-breakpoints-file <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/.dap-breakpoints\"</span> user-emacs-directory<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> default-process-coding-system '<span style=\"color: #ff79c6;\">(</span>utf-8-unix . utf-8-unix<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>prefer-coding-system 'utf-8<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>show-paren-mode 1<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">paren</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span>set-face-attribute 'show-paren-match-expression nil <span style=\"color: #ffb86c;\">:background</span> <span style=\"color: #f1fa8c;\">\"#363e4a\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>show-paren-mode 1<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">first install by M-x package-install RET rainbow-delimiters RET</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'prog-mode-hook #'rainbow-delimiters-mode<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">must have configs-------------------------------------------------------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span>set-default 'truncate-lines t<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>recentf-mode 1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">remember commands</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> history-length 500<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>savehist-mode 1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">saves the cursor position</span>\n<span style=\"color: #61bfff;\">(</span>save-place-mode 1<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">Revert Buffers when file have changed in disk</span>\n<span style=\"color: #61bfff;\">(</span>global-auto-revert-mode 1<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span>set-frame-parameter <span style=\"color: #ff79c6;\">(</span>selected-frame<span style=\"color: #ff79c6;\">)</span> 'alpha '<span style=\"color: #ff79c6;\">(</span>93 . 90<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>add-to-list 'default-frame-alist '<span style=\"color: #ff79c6;\">(</span>alpha . <span style=\"color: #50fa7b;\">(</span>93 . 90<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-frame-parameter <span style=\"color: #ff79c6;\">(</span>selected-frame<span style=\"color: #ff79c6;\">)</span> 'fullscreen 'maximized<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>add-to-list 'default-frame-alist '<span style=\"color: #ff79c6;\">(</span>fullscreen . maximized<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">don't suspend emacs and frame</span>\n<span style=\"color: #61bfff;\">(</span>global-unset-key <span style=\"color: #ff79c6;\">(</span>kbd <span style=\"color: #f1fa8c;\">\"C-z\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>global-unset-key <span style=\"color: #ff79c6;\">(</span>kbd <span style=\"color: #f1fa8c;\">\"C-x C-z\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">prevent C-backspace to clip into clipboard</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">backward-delete-word</span> <span style=\"color: #ff79c6;\">(</span>arg<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #8995ba;\">\"Delete characters backward until encountering the beginning of a word.</span>\n<span style=\"color: #8995ba;\">       With argument ARG, do this that many times.\"</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span> <span style=\"color: #f1fa8c;\">\"p\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>delete-region <span style=\"color: #50fa7b;\">(</span>point<span style=\"color: #50fa7b;\">)</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">progn</span> <span style=\"color: #bd93f9;\">(</span>backward-word arg<span style=\"color: #bd93f9;\">)</span> <span style=\"color: #bd93f9;\">(</span>point<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>global-set-key <span style=\"color: #ff79c6;\">(</span>kbd <span style=\"color: #f1fa8c;\">\"C-&lt;backspace&gt;\"</span><span style=\"color: #ff79c6;\">)</span> 'backward-delete-word<span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Stop control-backspace to delete too much</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">my/backward-kill-word</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #8995ba;\">\"Remove all whitespace if the character behind the cursor is whitespace, otherwise remove a word.\"</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">if</span> <span style=\"color: #50fa7b;\">(</span>looking-back <span style=\"color: #f1fa8c;\">\"[ \\n]\"</span><span style=\"color: #50fa7b;\">)</span>\n      <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">delete horizontal space before us and then check to see if we</span>\n      <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">are looking at a newline</span>\n      <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">progn</span> <span style=\"color: #bd93f9;\">(</span>delete-horizontal-space 't<span style=\"color: #bd93f9;\">)</span>\n             <span style=\"color: #bd93f9;\">(</span><span style=\"color: #ff79c6;\">while</span> <span style=\"color: #0189cc;\">(</span>looking-back <span style=\"color: #f1fa8c;\">\"[ \\n]\"</span><span style=\"color: #0189cc;\">)</span>\n               <span style=\"color: #0189cc;\">(</span>backward-delete-char 1<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">otherwise, just do the normal kill word.</span>\n    <span style=\"color: #50fa7b;\">(</span>backward-kill-word 1<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">cursor type</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(setq-default cursor-type '(hbar . 4))</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(setq-default set-cursor-color '\"#FFFF00\") </span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(setq-default blink-cursor-interval '0.2)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Notes</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Describe Variable : C-h v</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Describe Function : C-h f</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">describe Symbol   : C-h o</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">quite mini-buffer : C-g</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">alternatively set ESC for above action</span>\n\n       <span style=\"color: #6272a4;\">;;; </span><span style=\"color: #6272a4;\">Prevent Extraneous Tabs</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq-default</span> indent-tabs-mode nil<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq-default</span> tab-width 2<span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">set keybindings</span>\n<span style=\"color: #61bfff;\">(</span>global-set-key <span style=\"color: #ff79c6;\">(</span>kbd <span style=\"color: #f1fa8c;\">\"&lt;escape&gt;\"</span><span style=\"color: #ff79c6;\">)</span> 'keyboard-escape-quit<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">select : C-space  then use arrow keys</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Cut    : C-w</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Copy   : M-w</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Paste  : C-y</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Undo   : C-_        equaivalent to C-S-+</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Redo   : C-g C-_    C-g is used to reverse the action</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">don't show the splash screen</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">C-M-x for evaluating the configuration -- &gt; WORKING</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> inhibit-startup-message t<span style=\"color: #61bfff;\">)</span> <span style=\"color: #6272a4;\">; </span><span style=\"color: #6272a4;\">Comment at end of line</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> visible-bell t<span style=\"color: #61bfff;\">)</span>            <span style=\"color: #6272a4;\">; </span><span style=\"color: #6272a4;\">Flash when the bell rings</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">enabling and  disabling feature</span>\n<span style=\"color: #61bfff;\">(</span>tool-bar-mode -1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>scroll-bar-mode -1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>menu-bar-mode -1<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span>column-number-mode<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>global-display-line-numbers-mode 1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Disable line numbers for some modes</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">dolist</span> <span style=\"color: #ff79c6;\">(</span>mode '<span style=\"color: #50fa7b;\">(</span>org-mode-hook\n                vterm-mode-hook\n                term-mode-hook\n                shell-mode-hook\n                org-present-mode-hook\n                eshell-mode-hook<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook mode <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #bd93f9;\">()</span> <span style=\"color: #bd93f9;\">(</span>display-line-numbers-mode 0<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> vc-follow-symlinks t<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">load theme</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">C-x-e to evaluating the configuration --&gt; WORKING </span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(load-theme 'tango-dark) --&gt; since doom-theme is loaded somewhere below</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">run a command e.g M-x list-package</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">M-x {command name}</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">initialise package source</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">package</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> package-archives '<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"melpa\"</span> . <span style=\"color: #f1fa8c;\">\"https://melpa.org/packages/\"</span><span style=\"color: #50fa7b;\">)</span>\n                         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"melpa-stable\"</span> . <span style=\"color: #f1fa8c;\">\"https://stable.melpa.org/packages/\"</span><span style=\"color: #50fa7b;\">)</span>\n                         <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(\"org\" . \"https://orgmode.org/elpa/\")</span>\n                         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"nongnu\"</span> . <span style=\"color: #f1fa8c;\">\"https://elpa.nongnu.org/nongnu/\"</span><span style=\"color: #50fa7b;\">)</span>\n                         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"elpa\"</span> . <span style=\"color: #f1fa8c;\">\"https://elpa.gnu.org/packages/\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span>package-initialize<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">unless</span> package-archive-contents\n  <span style=\"color: #ff79c6;\">(</span>package-refresh-contents<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">initialise use package on non-linux platforms</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">unless</span> <span style=\"color: #ff79c6;\">(</span>package-installed-p 'use-package<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>package-install 'use-package<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">use-package</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> use-package-always-ensure t<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">show the key pressing events</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">command-log-mode</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org7d7b72f\">\n<h2 id=\"org7d7b72f\">Customise Cursor</h2>\n<div class=\"outline-text-2\" id=\"text-org7d7b72f\">\n<p>\nCustomise the appearance of cursor. Following snippet is taken from <a href=\"https://stackoverflow.com/a/4932922\">Stack Overflow</a>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\">\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defvar</span> <span style=\"color: #ffc9e8;\">blink-cursor-colors</span> <span style=\"color: #ff79c6;\">(</span>list  <span style=\"color: #f1fa8c;\">\"#92c48f\"</span> <span style=\"color: #f1fa8c;\">\"#6785c5\"</span> <span style=\"color: #f1fa8c;\">\"#be369c\"</span> <span style=\"color: #f1fa8c;\">\"#d9ca65\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #8995ba;\">\"On each blink the cursor will cycle to the next color in this list.\"</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> blink-cursor-count 0<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">blink-cursor-timer-function</span> <span style=\"color: #ff79c6;\">()</span>\n\n  <span style=\"color: #8995ba;\">\"Zarza wrote this cyberpunk variant of timer `</span><span style=\"color: #8be9fd;\">blink-cursor-timer</span><span style=\"color: #8995ba;\">'. </span>\n<span style=\"color: #8995ba;\">Warning: overwrites original version in `</span><span style=\"color: #8be9fd;\">frame.el</span><span style=\"color: #8995ba;\">'.</span>\n\n<span style=\"color: #8995ba;\">This one changes the cursor color on each blink. Define colors in `</span><span style=\"color: #8be9fd;\">blink-cursor-colors</span><span style=\"color: #8995ba;\">'.\"</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">when</span> <span style=\"color: #50fa7b;\">(</span>not <span style=\"color: #bd93f9;\">(</span>internal-show-cursor-p<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">when</span> <span style=\"color: #bd93f9;\">(</span>&gt;= blink-cursor-count <span style=\"color: #0189cc;\">(</span>length blink-cursor-colors<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n      <span style=\"color: #bd93f9;\">(</span><span style=\"color: #ff79c6;\">setq</span> blink-cursor-count 0<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>set-cursor-color <span style=\"color: #bd93f9;\">(</span>nth blink-cursor-count blink-cursor-colors<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> blink-cursor-count <span style=\"color: #bd93f9;\">(</span>+ 1 blink-cursor-count<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>internal-show-cursor nil <span style=\"color: #bd93f9;\">(</span>not <span style=\"color: #0189cc;\">(</span>internal-show-cursor-p<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span>blink-cursor-timer-function<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Following has no effect</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> cursor-type '<span style=\"color: #ff79c6;\">(</span>bar . 2<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgec0e1a5\">\n<h2 id=\"orgec0e1a5\">Compile C++</h2>\n<div class=\"outline-text-2\" id=\"text-orgec0e1a5\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">compile C++ files with F4 -----------------------------------------------------------------------</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/code-compile</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>save-buffer<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>set <span style=\"color: #50fa7b;\">(</span>make-local-variable 'compile-command<span style=\"color: #50fa7b;\">)</span>\n       <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">let</span> <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">(</span>file <span style=\"color: #61bfff;\">(</span>file-name-nondirectory buffer-file-name<span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n         <span style=\"color: #bd93f9;\">(</span>format <span style=\"color: #f1fa8c;\">\"%s %s -std=c++20 -O2 -o sol -Wall -Wextra -DLOCAL\"</span>\n                 <span style=\"color: #0189cc;\">(</span><span style=\"color: #ff79c6;\">if</span> <span style=\"color: #61bfff;\">(</span>equal <span style=\"color: #ff79c6;\">(</span>file-name-extension file<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #f1fa8c;\">\"cpp\"</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #f1fa8c;\">\"g++\"</span> <span style=\"color: #f1fa8c;\">\"gcc\"</span> <span style=\"color: #0189cc;\">)</span>\n                 file\n                 <span style=\"color: #0189cc;\">(</span>file-name-sans-extension file<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>compile compile-command<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'c-mode-common-hook\n          <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span>\n            <span style=\"color: #50fa7b;\">(</span>local-set-key <span style=\"color: #bd93f9;\">[</span>f4<span style=\"color: #bd93f9;\">]</span> 'efs/code-compile<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org1198c79\">\n<h2 id=\"org1198c79\">ivy-mode</h2>\n<div class=\"outline-text-2\" id=\"text-org1198c79\">\n<p>\nShows the sugesstions while searching commands by <code>M-x</code>. Note the command <code>ivy-immediate-done</code> buond to key <code>C-l</code> is used when there is already a fuzzy matching but you want to go with what you typed. For example, while creating a file, if you type <code>notes.o</code>, it will match with <code>Notes.org</code> if later exists. If you want to create <code>notes.o</code> yes <code>C-l</code> command.\n</p>\n<ul class=\"org-ul\">\n<li><a href=\"https://elpa.gnu.org/devel/doc/ivy.html\">gnu-ivy-doc</a></li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">ivy</span>\n  <span style=\"color: #ffb86c;\">:diminish</span>\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-s\"</span> . swiper<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #ffb86c;\">:map</span> ivy-minibuffer-map\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"TAB\"</span> . ivy-alt-done<span style=\"color: #50fa7b;\">)</span> \n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-l\"</span> . ivy-immediate-done<span style=\"color: #50fa7b;\">)</span>  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">when there is already fuzzy match and you want to select what is typed</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-n\"</span> . ivy-next-line<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-p\"</span> . ivy-previous-line<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #ffb86c;\">:map</span> ivy-switch-buffer-map\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-p\"</span> . ivy-previous-line<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-l\"</span> . ivy-done<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-k\"</span> . ivy-switch-buffer-kill<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #ffb86c;\">:map</span> ivy-reverse-i-search-map\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-p\"</span> . ivy-previous-line<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-k\"</span> . ivy-reverse-i-search-kill<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span>ivy-mode 1<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">ivy rich-mode shows description of auto suggested</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">ivy-rich</span>\n  <span style=\"color: #ffb86c;\">:init</span>\n  <span style=\"color: #ff79c6;\">(</span>ivy-rich-mode 1<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n<p>\n<code>ivy-immediate-done</code> - When creating/finding a new file, if match is found new file can be created using this command which is bound to <code>C-M-j</code>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org05d8b4b\">\n<h2 id=\"org05d8b4b\">Completion with Vertico</h2>\n<div class=\"outline-text-2\" id=\"text-org05d8b4b\">\n<p>\nNote: <code>marginalia</code> was installed manually using <code>package-install</code> command.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/minibuffer-backward-kill</span> <span style=\"color: #ff79c6;\">(</span>arg<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #8995ba;\">\"When minibuffer is completing a file name delete up to parent</span>\n<span style=\"color: #8995ba;\">  folder, otherwise delete a word\"</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span> <span style=\"color: #f1fa8c;\">\"p\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">if</span> minibuffer-completing-file-name\n      <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608</span>\n      <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">if</span> <span style=\"color: #bd93f9;\">(</span>string-match-p <span style=\"color: #f1fa8c;\">\"/.\"</span> <span style=\"color: #0189cc;\">(</span>minibuffer-contents<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span>zap-up-to-char <span style=\"color: #0189cc;\">(</span>- arg<span style=\"color: #0189cc;\">)</span> ?/<span style=\"color: #bd93f9;\">)</span>\n        <span style=\"color: #bd93f9;\">(</span>delete-minibuffer-contents<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>backward-kill-word arg<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">vertico</span>\n  <span style=\"color: #ffb86c;\">:disabled</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-s\"</span> . swiper<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #ffb86c;\">:map</span> vertico-map\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-n\"</span> . vertico-next<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-p\"</span> . vertico-previous<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-f\"</span> . vertico-exit<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #ffb86c;\">:map</span> minibuffer-local-map\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"M-h\"</span> . dw/minibuffer-backward-kill<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>vertico-cycle t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom-face</span>\n  <span style=\"color: #ff79c6;\">(</span>vertico-current <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>t <span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:background</span> <span style=\"color: #f1fa8c;\">\"#3a3f5a\"</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:init</span>\n  <span style=\"color: #ff79c6;\">(</span>vertico-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Enable rich annotations using the Marginalia package</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">marginalia</span>\n  <span style=\"color: #ffb86c;\">:disabled</span>\n  <span style=\"color: #ffb86c;\">:after</span> vertico\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>marginalia-annotators '<span style=\"color: #50fa7b;\">(</span>marginalia-annotators-heavy marginalia-annotators-light nil<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ffb86c;\">:map</span> minibuffer-local-map\n              <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"M-A\"</span> . marginalia-cycle<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:init</span>\n  <span style=\"color: #ff79c6;\">(</span>marginalia-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org4868d6f\">\n<h2 id=\"org4868d6f\">Consult</h2>\n<div class=\"outline-text-2\" id=\"text-org4868d6f\">\n<p>\nConsult provides completion similar to ivy's counsel\n<code>consult-outline</code>: Used to search the headings in org mode. Can be sub-headings too\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/get-project-root</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">when</span> <span style=\"color: #50fa7b;\">(</span>fboundp 'projectile-project-root<span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>projectile-project-root<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">consult</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:demand</span> t\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span>\n         <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(\"C-s\" . consult-line)</span>\n         <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(\"C-M-l\" . consult-imenu)</span>\n         <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(\"C-M-j\" . persp-switch-to-buffer*)</span>\n         <span style=\"color: #ffb86c;\">:map</span> minibuffer-local-map\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-r\"</span> . consult-history<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>consult-project-root-function #'dw/get-project-root<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>completion-in-region-function #'consult-completion-in-region<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">:config</span>\n<span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(consult-preview-mode))  ;; invalid function</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgafe014b\">\n<h2 id=\"orgafe014b\">Embark</h2>\n<div class=\"outline-text-2\" id=\"text-orgafe014b\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">embark</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-S-a\"</span> . embark-act<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #ffb86c;\">:map</span> minibuffer-local-map\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-d\"</span> . embark-act<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Show Embark actions via which-key</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> embark-action-indicator\n        <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #bd93f9;\">(</span>map<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span>which-key--show-keymap <span style=\"color: #f1fa8c;\">\"Embark\"</span> map nil nil 'no-paging<span style=\"color: #bd93f9;\">)</span>\n          #'which-key--hide-popup-ignore-command<span style=\"color: #50fa7b;\">)</span>\n        embark-become-indicator embark-action-indicator<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgdd29755\">\n<h2 id=\"orgdd29755\">Embark Consult</h2>\n<div class=\"outline-text-2\" id=\"text-orgdd29755\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">embark-consult</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:after</span> <span style=\"color: #ff79c6;\">(</span>embark consult<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:demand</span> t\n  <span style=\"color: #ffb86c;\">:hook</span>\n  <span style=\"color: #ff79c6;\">(</span>embark-collect-mode . embark-consult-preview-minor-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org7ee5602\">\n<h2 id=\"org7ee5602\">Perspective</h2>\n<div class=\"outline-text-2\" id=\"text-org7ee5602\">\n<p>\nPerspective package is used to declutter the opened buffers.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">perspective</span>\n  <span style=\"color: #ffb86c;\">:demand</span> t\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">:bind ((\"C-M-b\" . persp-switch)</span>\n  <span style=\"color: #6272a4;\">;;        </span><span style=\"color: #6272a4;\">(\"C-M-n\" . persp-next)</span>\n  <span style=\"color: #6272a4;\">;;        </span><span style=\"color: #6272a4;\">(\"C-x k\" . persp-kill-buffer*))</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>persp-initial-frame-name <span style=\"color: #f1fa8c;\">\"Main\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(persp-mode-prefix-key (kbd \"C-0\"))</span>\n  <span style=\"color: #ff79c6;\">(</span>persp-suppress-no-prefix-key-warning t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Running `</span><span style=\"color: #8be9fd;\">persp-mode</span><span style=\"color: #6272a4;\">' multiple times resets the perspective list...</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">unless</span> <span style=\"color: #50fa7b;\">(</span>equal persp-mode t<span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>persp-mode<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org2ebcf25\">\n<h2 id=\"org2ebcf25\">Search &amp; Replace</h2>\n<div class=\"outline-text-2\" id=\"text-org2ebcf25\">\n<p>\nSearch and replace is the most common operation one does in emacs buffer.\n</p>\n<p>\n<code>isearch-forward</code>: command is used internally by <code>swiper</code>, which is bound to <code>C-s</code>. If not using <code>swiper</code> then make use of\n<code>occur</code>\n</p>\n<p>\n<code>isearch-backword</code>: used to seach backword from the point, bound to <code>C-s</code>\n</p>\n<p>\n<code>isearch-forward-regexp</code>: forward search with regex, bound to <code>C-M-s</code>\n</p>\n<p>\n<code>isearch-backword-regexp</code>: backword search with regex, bound to <code>C-M-r</code>\n</p>\n<p>\n<code>occur</code>: get the occurence of text line-wise and show them in a buffer, bound to <code>M-s o</code> Traversing in occurance of match in\noccur buffer will scroll the original buffer for preview. You can edit this preview by pressing <code>e</code> which will edit the original buffer too. You can edit using <code>query-replace</code>!. If want to re-edit the regex text entered in occur prompt, use <code>M-n</code>\nor <code>M-p</code> to circle through previously used patterns.\n</p>\n<p>\n<code>query-replace</code>: Used to replace FROM string to TO string, bound to <code>M-%</code>. Once TO string is specified replacement will happen interactively. <code>y</code> for Yes, <code>n</code> for No and Skip, <code>!</code> For replace all, <code>u</code> for undo prev replacement, <code>U</code> for undo all replacements. <code>q</code> to quit. Use <code>M-n</code> or <code>M-p</code> to circle through previously used patterns. Check all options with <code>?</code>\n</p>\n<p>\n<code>query-replace-regexp</code>: Used to replace FROM regexp to TO string, bound to <code>C-M-%</code>. It is also used to group the pattern match and replace with matched pattern. e.g replace <code>var-temp</code> with <code>temp-var</code>\nSearch Pattern: <code>\\(var\\)-\\(temp\\)</code>, TO string: <code>\\2-\\1</code>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org6d67fa4\">\n<h2 id=\"org6d67fa4\">Emoji</h2>\n<div class=\"outline-text-2\" id=\"text-org6d67fa4\">\n<p>\nTurn on the <code>emoji-mode</code> manually \n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">emojify</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>erc-mode . emojify-mode<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:commands</span> emojify-mode<span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org00ae1ef\">\n<h2 id=\"org00ae1ef\">Doom modeline</h2>\n<div class=\"outline-text-2\" id=\"text-org00ae1ef\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">You must run (all-the-icons-install-fonts) one time after</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">installing this package!</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">NOTE: The first time you load your configuration on a new machine, you'll</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">need to run the following command interactively so that mode line icons correctly</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">all-the-icons</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">doom-modeline</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:after</span> eshell     <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Make sure it gets hooked after eshell</span>\n  <span style=\"color: #ffb86c;\">:custom-face</span>\n  <span style=\"color: #ff79c6;\">(</span>mode-line <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>t <span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:height</span> 1.0<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>mode-line-inactive <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>t <span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:height</span> 1.0<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:init</span> <span style=\"color: #ff79c6;\">(</span>doom-modeline-mode 1<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>doom-modeline-height 15<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>doom-modeline-bar-width 6<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>doom-modeline-lsp t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>doom-modeline-modal-icon t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(doom-modeline-github t)</span>\n  <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(doom-modeline-mu4e nil)              </span>\n  <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(doom-modeline-irc nil)</span>\n  <span style=\"color: #ff79c6;\">(</span>doom-modeline-minor-modes nil<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(doom-modeline-persp-name nil)</span>\n  <span style=\"color: #ff79c6;\">(</span>doom-modeline-buffer-file-name-style 'truncate-except-project<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>doom-modeline-icon t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>doom-modeline-env-enable-go t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>doom-modeline-buffer-state-icon t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>doom-modeline-major-mode-icon t<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgbddee34\">\n<h2 id=\"orgbddee34\">Custom Fonts</h2>\n<div class=\"outline-text-2\" id=\"text-orgbddee34\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">load font, install all these fonts manually first, the size is 127 without exwm</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'default nil\n                    <span style=\"color: #ffb86c;\">:font</span> <span style=\"color: #f1fa8c;\">\"Fira Mono\"</span>\n                    <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">:font \"Source Code Pro\"</span>\n                    <span style=\"color: #ffb86c;\">:height</span> 127<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">:height 145) ;; in exwm</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Set the fixed pitch face</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'fixed-pitch nil\n                    <span style=\"color: #ffb86c;\">:font</span> <span style=\"color: #f1fa8c;\">\"Fira Mono\"</span>\n                    <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">:font \"Source Code Pro\"</span>\n                    <span style=\"color: #ffb86c;\">:weight</span> 'light\n                    <span style=\"color: #ffb86c;\">:height</span> 127<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">:height 145)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Set the variable pitch face</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'variable-pitch nil\n                    <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">:font \"Cantarell\"</span>\n                    <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">:font \"Iosevka Aile\"</span>\n                    <span style=\"color: #ffb86c;\">:font</span> <span style=\"color: #f1fa8c;\">\"Fira Mono\"</span>\n                    <span style=\"color: #ffb86c;\">:weight</span> 'light\n                    <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">:height 145</span>\n                    <span style=\"color: #ffb86c;\">:height</span> 127<span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgf0e7512\">\n<h2 id=\"orgf0e7512\">Custom Themes</h2>\n<div class=\"outline-text-2\" id=\"text-orgf0e7512\">\n<p>\n<code>doom-themes</code> offers a wide variety of themes. Install the themes as follows. You can load any themes using interactive command <code>counsel-load-theme</code>. I like following themes\n</p>\n<ul class=\"org-ul\">\n<li><code>doom-cracula</code></li>\n<li><code>doom-palenight</code></li>\n<li><code>doom-acario-light</code></li>\n<li><code>doom-one</code></li>\n<li><code>doom-one-light</code></li>\n<li><code>doom-snazzy</code></li>\n<li><code>doom-solarized-light</code></li>\n<li><code>doom-opera-light</code></li>\n<li><code>modus-vivendi</code></li>\n<li><code>modus-operandi</code></li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">doom-themes</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">load theme command M-x ^counsel-load-theme</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">doom-themes</span>\n  <span style=\"color: #ffb86c;\">:init</span> <span style=\"color: #ff79c6;\">(</span>load-theme 'doom-dracula t<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(load-theme 'atom-one-dark t)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgf41ee64\">\n<h2 id=\"orgf41ee64\">Which Key</h2>\n<div class=\"outline-text-2\" id=\"text-orgf41ee64\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">press C-h to find the which keys does what</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">which-key</span>\n  <span style=\"color: #ffb86c;\">:init</span> <span style=\"color: #ff79c6;\">(</span>which-key-mode<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:diminish</span> which-key-mode\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> which-key-idle-delay 0<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org6fe45f4\">\n<h2 id=\"org6fe45f4\">Counsel</h2>\n<div class=\"outline-text-2\" id=\"text-org6fe45f4\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">counsel</span>\n  <span style=\"color: #ffb86c;\">:after</span> ivy\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> counsel-yank-pop-preselect-last t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> counsel-yank-pop-separator <span style=\"color: #f1fa8c;\">\"\\n--------\\n\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"M-x\"</span> . counsel-M-x<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-x b\"</span> . counsel-ibuffer<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"M-y\"</span> . counsel-yank-pop<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-x C-f\"</span> . counsel-find-file<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-x d\"</span> . counsel-dired<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #ffb86c;\">:map</span> minibuffer-local-map\n         <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-r\"</span> . 'counsel-minibuffer-history<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">improved documentation about variables/functions</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">helpful</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>counsel-describe-function-function #'helpful-callable<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>counsel-describe-variable-function #'helpful-variable<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:bind</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">[</span>remap describe-function<span style=\"color: #50fa7b;\">]</span> . counsel-describe-function<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">[</span>remap describe-command<span style=\"color: #50fa7b;\">]</span> . helpful-command<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">[</span>remap describe-variable<span style=\"color: #50fa7b;\">]</span> . counsel-describe-variable<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">[</span>remap describe-key<span style=\"color: #50fa7b;\">]</span> . helpful-key<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">restclient---------------------------------------------------------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">restclient</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">magit -----------------------------------------------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">magit</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">-------------------------------------------------------------------------------------------------------</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgb90e72b\">\n<h2 id=\"orgb90e72b\">Projectile</h2>\n<div class=\"outline-text-2\" id=\"text-orgb90e72b\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">projectile</span>\n  <span style=\"color: #ffb86c;\">:diminish</span> projectile-mode\n  <span style=\"color: #ffb86c;\">:config</span> <span style=\"color: #ff79c6;\">(</span>projectile-mode<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span>projectile-completion-system 'ivy<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:bind-keymap</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"C-c p\"</span> . projectile-command-map<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:init</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">NOTE: Set this to the folder where you keep your Git repos!</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">when</span> <span style=\"color: #50fa7b;\">(</span>file-directory-p <span style=\"color: #f1fa8c;\">\"~/Projects\"</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> projectile-project-search-path '<span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"~/Projects/go/src/lynk\"</span>\n                                           <span style=\"color: #f1fa8c;\">\"~/Projects/go/src/math2do.in\"</span>\n                                           <span style=\"color: #f1fa8c;\">\"~/Projects/node\"</span>\n                                           <span style=\"color: #f1fa8c;\">\"~/Notes/Roam\"</span>\n                                           <span style=\"color: #f1fa8c;\">\"~/Projects/react\"</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> projectile-switch-project-action #'projectile-dired<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">after C-c p then M-o</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">counsel-projectile</span>\n  <span style=\"color: #ffb86c;\">:config</span> <span style=\"color: #ff79c6;\">(</span>counsel-projectile-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org6d6c73f\">\n<h2 id=\"org6d6c73f\">LSP Mode</h2>\n<div class=\"outline-text-2\" id=\"text-org6d6c73f\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-org25d9df4\">\n<h3 id=\"org25d9df4\">lsp mode</h3>\n<div class=\"outline-text-3\" id=\"text-org25d9df4\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/lsp-mode-setup</span> <span style=\"color: #ff79c6;\">()</span>  \n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> lsp-headerline-breadcrumb-segments '<span style=\"color: #50fa7b;\">(</span>path-up-to-project file symbols<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>lsp-headerline-breadcrumb-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">lsp-mode</span>\n  <span style=\"color: #ffb86c;\">:commands</span> <span style=\"color: #ff79c6;\">(</span>lsp lsp-deferred<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span>js2-mode web-mode rjsx-mode yaml-mode<span style=\"color: #50fa7b;\">)</span> . lsp<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:init</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> lsp-keymap-prefix <span style=\"color: #f1fa8c;\">\"C-c l\"</span><span style=\"color: #ff79c6;\">)</span>  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Or '</span><span style=\"color: #8be9fd;\">C-l</span><span style=\"color: #6272a4;\">', '</span><span style=\"color: #8be9fd;\">s-l</span><span style=\"color: #6272a4;\">'</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span>lsp-enable-which-key-integration t<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">lsp-ui</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>lsp-mode . lsp-ui-mode<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>lsp-ui-doc-position 'bottom<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orge4c607c\">\n<h3 id=\"orge4c607c\">Json Mode</h3>\n<div class=\"outline-text-3\" id=\"text-orge4c607c\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">json-mode</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t<span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org4694b29\">\n<h3 id=\"org4694b29\">Javascript</h3>\n<div class=\"outline-text-3\" id=\"text-org4694b29\">\n<p>\nKeep this segmented until you figure out how to merge this with configs of Next-JS in next header.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/set-js-indentation</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> js-indent-level 2<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> evil-shift-width js-indent-level<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq-default</span> tab-width 2<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(use-package js2-mode</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">:mode \"\\\\.jsx?\\\\'\"</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">:config</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">;; Use js2-mode for Node scripts</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(add-to-list 'magic-mode-alist '(\"#!/usr/bin/env node\" . js2-mode))</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">;; Don't use built-in syntax checking</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(setq js2-mode-show-strict-warnings nil)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">;; Set up proper indentation in JavaScript and JSON files</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(add-hook 'js2-mode-hook #'dw/set-js-indentation)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(add-hook 'json-mode-hook #'dw/set-js-indentation))</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(use-package prettier-js</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">;; :hook ((js2-mode . prettier-js-mode))</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">:config</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(setq prettier-js-show-errors nil))</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">rjsx-mode</span>\n  <span style=\"color: #ffb86c;\">:mode</span> <span style=\"color: #f1fa8c;\">\"\\\\.tsx?\\\\'\"</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span>add-to-list 'auto-mode-alist '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"\\\\.tsx?\\\\'\"</span> . rjsx-mode<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Set up proper indentation in JavaScript and JSON files</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'js2-mode-hook #'dw/set-js-indentation<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'rjsx-mode-hook #'dw/set-js-indentation<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'json-mode-hook #'dw/set-js-indentation<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(defadvice js-jsx-indent-line (after js-jsx-indent-line-after-hack activate)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">\"Workaround sgml-mode and follow airbnb component style.\"</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(save-excursion</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(beginning-of-line)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(if (looking-at-p \"^ +\\/?&gt; *$\")</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(delete-char sgml-basic-offset))))</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org628413a\">\n<h3 id=\"org628413a\">Emmet-mode</h3>\n<div class=\"outline-text-3\" id=\"text-org628413a\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span>add-hook 'sgml-mode-hook 'emmet-mode<span style=\"color: #61bfff;\">)</span> <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Auto-start on any markup modes</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'css-mode-hook  'emmet-mode<span style=\"color: #61bfff;\">)</span> <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">enable Emmet's css abbreviation.</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'scss-mode-hook  'emmet-mode<span style=\"color: #61bfff;\">)</span> <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">enable Emmet's css abbreviation.</span>\n\n<span style=\"color: #61bfff;\">(</span>add-hook 'css-mode-hook <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> tab-width 2<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'scss-mode-hook <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> tab-width 2<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'html-mode-hook <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> tab-width 2<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'sgml-mode-hook <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> tab-width 2<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org176e3a1\">\n<h3 id=\"org176e3a1\">Flycheck</h3>\n<div class=\"outline-text-3\" id=\"text-org176e3a1\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">flycheck</span>\n  <span style=\"color: #ffb86c;\">:defer</span> t\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>lsp-mode . flycheck-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgbcb8e43\">\n<h3 id=\"orgbcb8e43\">Java</h3>\n<div class=\"outline-text-3\" id=\"text-orgbcb8e43\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">hydra</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">lsp-java</span> <span style=\"color: #ffb86c;\">:config</span> <span style=\"color: #ff79c6;\">(</span>add-hook 'java-mode-hook 'lsp<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">dap-mode</span> <span style=\"color: #ffb86c;\">:after</span> lsp-mode <span style=\"color: #ffb86c;\">:config</span> <span style=\"color: #ff79c6;\">(</span>dap-auto-configure-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">dap-java</span> <span style=\"color: #ffb86c;\">:ensure</span> nil<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">spring boot support is experimental</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">lsp-java-boot</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">to enable the lenses</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'lsp-mode-hook #'lsp-lens-mode<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'java-mode-hook #'lsp-java-boot-lens-mode<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span>add-hook 'java-mode-hook <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> tab-width 2<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgaadf97c\">\n<h2 id=\"orgaadf97c\">Next-JS</h2>\n<div class=\"outline-text-2\" id=\"text-orgaadf97c\">\n<p>\nThis configuration is for developing next-js application with <code>typescript</code> and <code>tailwindcss</code>. \n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orge9744b7\">\n<h2 id=\"orge9744b7\">Markdown</h2>\n<div class=\"outline-text-2\" id=\"text-orge9744b7\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">markdown-mode</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:mode</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"README\\\\.md\\\\'\"</span> . gfm-mode<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Github README</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> markdown-command <span style=\"color: #f1fa8c;\">\"marked\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/set-markdown-header-font-sizes</span> <span style=\"color: #50fa7b;\">()</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">dolist</span> <span style=\"color: #bd93f9;\">(</span>face '<span style=\"color: #0189cc;\">(</span><span style=\"color: #61bfff;\">(</span>markdown-header-face-1 . 1.2<span style=\"color: #61bfff;\">)</span>\n                    <span style=\"color: #61bfff;\">(</span>markdown-header-face-2 . 1.1<span style=\"color: #61bfff;\">)</span>\n                    <span style=\"color: #61bfff;\">(</span>markdown-header-face-3 . 1.0<span style=\"color: #61bfff;\">)</span>\n                    <span style=\"color: #61bfff;\">(</span>markdown-header-face-4 . 1.0<span style=\"color: #61bfff;\">)</span>\n                    <span style=\"color: #61bfff;\">(</span>markdown-header-face-5 . 1.0<span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n      <span style=\"color: #bd93f9;\">(</span>set-face-attribute <span style=\"color: #0189cc;\">(</span>car face<span style=\"color: #0189cc;\">)</span> nil <span style=\"color: #ffb86c;\">:weight</span> 'normal <span style=\"color: #ffb86c;\">:height</span> <span style=\"color: #0189cc;\">(</span>cdr face<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/markdown-mode-hook</span> <span style=\"color: #50fa7b;\">()</span>\n    <span style=\"color: #50fa7b;\">(</span>dw/set-markdown-header-font-sizes<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'markdown-mode-hook 'dw/markdown-mode-hook<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgc7bfc4c\">\n<h2 id=\"orgc7bfc4c\">Org-roam</h2>\n<div class=\"outline-text-2\" id=\"text-orgc7bfc4c\">\n<ul class=\"org-ul\">\n<li><a href=\"https://www.orgroam.com/manual.html\">org-roam-manual</a></li>\n</ul>\n<p>\nUse following code in <code>init.el</code> file to setup <b>org-roam</b>. Make sure the directory <code>~/Notes/Roam</code> already exists.\n</p>\n<ul class=\"org-ul\">\n<li><code>org-roam-node-find</code> : creates a node if it does not exist, and visits the node.</li>\n<li><code>org-roam-capture</code> : creates a node if it does not exist, and restores the current window configuration upon completion.</li>\n<li><code>org-roam-insert</code> : creates a node if it does not exist, and inserts a link to the node at point.</li>\n<li><code>org-roam-alias-add</code> : place cursor over the node name and run this command to add aliases.</li>\n<li><code>org-roam-buffer-toggle</code> : Launch an org-roam buffer alongside that tracks the node currently at point. i.e viewing\nbacklink by opening different roam notes</li>\n</ul>\n<p>\nWe can streamline the template capture by customising own templates. While creating a new org-roam node, we'll be prompted\nto select the template specific to our need, e.g book, programming language etc.\n</p>\n<p>\nWe can capture everyday activities with <code>org-roam-dailies</code>. While capturing daily-note for first time, we'll be prompted to\ncreate a folder <code>daily/</code> which is relative to above <code>org-roam-directory</code>. Following commands are helpful\n</p>\n<ul class=\"org-ul\">\n<li><code>org-roam-dailies-capture-today</code> : Create an entry in the daily-note for today</li>\n<li><code>org-roam-dailies-goto-today</code> : Find the daily-note for today, creating it if necessary</li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">org-roam</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:demand</span> t\n  <span style=\"color: #ffb86c;\">:init</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-roam-v2-ack t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>org-roam-directory <span style=\"color: #f1fa8c;\">\"~/Notes/Roam\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span>org-roam-db-autosync-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org20de27b\">\n<h4 id=\"org20de27b\">Multiple Org-Roam</h4>\n<div class=\"outline-text-4\" id=\"text-org20de27b\">\n<p>\nIf you need to put org files under multiple folders to categorize your files, for example: putting files related to system design under directory <code>system-design</code> OR keeping files related to algorithms under directory <code>algorithms</code>. In such case, set the value of <code>org-roam-directory</code> to be different by making use of <code>directory-local-variables</code>. Under each of the categorizing folder keep a file named <code>.dir-locals.el</code> with follwing content\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">((nil . ((org-roam-directory . \".\") (org-roam-db-location . \"~/.config/emacs/system-design/org-roam.db\"))))</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org7a0bbb2\">\n<h2 id=\"org7a0bbb2\">Org-mode</h2>\n<div class=\"outline-text-2\" id=\"text-org7a0bbb2\">\n<ul class=\"org-ul\">\n<li>Create TODO header list and attach timestap with <code>org-time-stamp</code>, bound to key <code>C-c .</code></li>\n<li>In the calendar view, the date can be selected by moving with Shift and arrow keys. If time is important then type like 8pm or 8:30pm</li>\n<li>Use Shift + arrow keys for changing the state of TODO entries</li>\n<li>Schedule a TODO entry with <code>org-schedule</code>, bound to key <code>C-c C-s</code></li>\n<li>Set deadline of TODO with <code>org-deadline</code>, bound to key <code>C-c C-d</code></li>\n<li>Pull up org agendas using command <code>org-agenda</code>, then select appropriate options. Use <code>org-agenda-list</code> to specifically check agenda for the current week</li>\n<li>Add repeater to the timestamp. You can use yearly, monthly, weekly, daily and hourly repeat cookies by using the ‘y’, ‘m’, ‘w’, ‘d’ and ‘h’ letters.</li>\n<li>Moving DONE tasks to Archive files using command <code>org-refile</code>, bound to <code>C-c C-w</code></li>\n<li>Use <code>org-capture</code> to capture the TODOs based on its type.</li>\n<li>The captured TODO will also capture the position of point when capture happened. No navigate use <code>org-open-at-point</code>, bound to key-binding <code>C-c C-o</code></li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\">\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Turn on indentation and auto-fill mode for Org files</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/org-mode-setup</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span>org-indent-mode<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>auto-fill-mode 0<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>face-remap-add-relative 'default '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #ffb86c;\">:family</span> <span style=\"color: #f1fa8c;\">\"Iosevka Aile\"</span> <span style=\"color: #ffb86c;\">:height</span> 1.1<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">default font for org-mode</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">symbol ▼  ⤵</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">org</span>\n  <span style=\"color: #ffb86c;\">:defer</span> t\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>org-mode . dw/org-mode-setup<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-ellipsis <span style=\"color: #f1fa8c;\">\" ▾\"</span>\n        org-hide-emphasis-markers t\n        org-src-fontify-natively t\n        org-fontify-quote-and-verse-blocks t\n        org-src-tab-acts-natively t\n        org-edit-src-content-indentation 2\n        org-hide-block-startup nil\n        org-src-preserve-indentation nil\n        org-startup-folded 'content\n        org-cycle-separator-lines 2\n        org-adapt-indentation t\n        org-agenda-start-with-log-mode t\n        org-log-done 'time\n        org-log-into-drawer t<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-agenda-files\n        '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"~/Notes/Org/Tasks.org\"</span>\n          <span style=\"color: #f1fa8c;\">\"~/Notes/Org/Habits.org\"</span>\n          <span style=\"color: #f1fa8c;\">\"~/Notes/Org/Notes.org\"</span>\n          <span style=\"color: #f1fa8c;\">\"~/Notes/Org/Archive.org\"</span>\n          <span style=\"color: #f1fa8c;\">\"~/Notes/Org/Journal.org\"</span>\n          <span style=\"color: #f1fa8c;\">\"~/Notes/Org/Birthdays.org\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-tag-alist\n        '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span><span style=\"color: #ffb86c;\">:startgroup</span><span style=\"color: #bd93f9;\">)</span>                 \n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #ffb86c;\">:endgroup</span><span style=\"color: #bd93f9;\">)</span> <span style=\"color: #6272a4;\">; </span><span style=\"color: #6272a4;\">Put mutually exclusive tags here</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"@errand\"</span> . ?E<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"@home\"</span> . ?H<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"@work\"</span> . ?W<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"agenda\"</span> . ?a<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"planning\"</span> . ?p<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"publish\"</span> . ?P<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"batch\"</span> . ?b<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"note\"</span> . ?n<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"idea\"</span> . ?i<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-capture-templates\n        `<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"t\"</span> <span style=\"color: #f1fa8c;\">\"Tasks / Projects\"</span><span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"tt\"</span> <span style=\"color: #f1fa8c;\">\"Task\"</span> entry <span style=\"color: #0189cc;\">(</span>file+olp <span style=\"color: #f1fa8c;\">\"~/Notes/Tasks.org\"</span> <span style=\"color: #f1fa8c;\">\"Captured\"</span><span style=\"color: #0189cc;\">)</span>\n           <span style=\"color: #f1fa8c;\">\"* TODO %?\\n  %U\\n  %a\\n  %i\"</span> <span style=\"color: #ffb86c;\">:empty-lines</span> 1<span style=\"color: #bd93f9;\">)</span>\n\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"j\"</span> <span style=\"color: #f1fa8c;\">\"Journal Entries\"</span><span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"jj\"</span> <span style=\"color: #f1fa8c;\">\"Journal\"</span> entry\n           <span style=\"color: #0189cc;\">(</span>file+olp+datetree <span style=\"color: #f1fa8c;\">\"~/Notes/Journal.org\"</span><span style=\"color: #0189cc;\">)</span>\n           <span style=\"color: #f1fa8c;\">\"\\n* %&lt;%I:%M %p&gt; - Journal :journal:\\n\\n%?\\n\\n\"</span>\n           <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">,(dw/read-file-as-string \"~/Notes/Templates/Daily.org\")</span>\n           <span style=\"color: #ffb86c;\">:clock-in</span> <span style=\"color: #ffb86c;\">:clock-resume</span>\n           <span style=\"color: #ffb86c;\">:empty-lines</span> 1<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"jm\"</span> <span style=\"color: #f1fa8c;\">\"Meeting\"</span> entry\n           <span style=\"color: #0189cc;\">(</span>file+olp+datetree <span style=\"color: #f1fa8c;\">\"~/Notes/Journal.org\"</span><span style=\"color: #0189cc;\">)</span>\n           <span style=\"color: #f1fa8c;\">\"* %&lt;%I:%M %p&gt; - %a :meetings:\\n\\n%?\\n\\n\"</span>\n           <span style=\"color: #ffb86c;\">:clock-in</span> <span style=\"color: #ffb86c;\">:clock-resume</span>\n           <span style=\"color: #ffb86c;\">:empty-lines</span> 1<span style=\"color: #bd93f9;\">)</span>\n\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"w\"</span> <span style=\"color: #f1fa8c;\">\"Workflows\"</span><span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"we\"</span> <span style=\"color: #f1fa8c;\">\"Checking Email\"</span> entry <span style=\"color: #0189cc;\">(</span>file+olp+datetree <span style=\"color: #f1fa8c;\">\"~/Notes/Journal.org\"</span><span style=\"color: #0189cc;\">)</span>\n           <span style=\"color: #f1fa8c;\">\"* Checking Email :email:\\n\\n%?\"</span> <span style=\"color: #ffb86c;\">:clock-in</span> <span style=\"color: #ffb86c;\">:clock-resume</span> <span style=\"color: #ffb86c;\">:empty-lines</span> 1<span style=\"color: #bd93f9;\">)</span>\n\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"m\"</span> <span style=\"color: #f1fa8c;\">\"Metrics Capture\"</span><span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"mw\"</span> <span style=\"color: #f1fa8c;\">\"Weight\"</span> table-line <span style=\"color: #0189cc;\">(</span>file+headline <span style=\"color: #f1fa8c;\">\"~/Notes/Metrics.org\"</span> <span style=\"color: #f1fa8c;\">\"Weight\"</span><span style=\"color: #0189cc;\">)</span>\n           <span style=\"color: #f1fa8c;\">\"| %U | %^{Weight} | %^{Notes} |\"</span> <span style=\"color: #ffb86c;\">:kill-buffer</span> t<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-modules\n        '<span style=\"color: #50fa7b;\">(</span>org-crypt\n          org-habit\n          org-bookmark\n          org-eshell\n          org-irc<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">moving around TODO entries</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-refile-targets '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>nil <span style=\"color: #ffb86c;\">:maxlevel</span> . 1<span style=\"color: #bd93f9;\">)</span>\n                             <span style=\"color: #bd93f9;\">(</span>org-agenda-files <span style=\"color: #ffb86c;\">:maxlevel</span> . 2<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Save Org buffers after refiling!</span>\n  <span style=\"color: #ff79c6;\">(</span>advice-add 'org-refile <span style=\"color: #ffb86c;\">:after</span> 'org-save-all-org-buffers<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-outline-path-complete-in-steps nil<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-refile-use-outline-path t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> indent-tabs-mode nil<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-todo-keywords\n        '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>sequence <span style=\"color: #f1fa8c;\">\"BACKLOG(b)\"</span> <span style=\"color: #f1fa8c;\">\"TODO(t)\"</span> <span style=\"color: #f1fa8c;\">\"ACTIVE(a)\"</span> <span style=\"color: #f1fa8c;\">\"REVIEW(v)\"</span> <span style=\"color: #f1fa8c;\">\"READY(r)\"</span> <span style=\"color: #f1fa8c;\">\"WAIT(w)\"</span> <span style=\"color: #f1fa8c;\">\"|\"</span> <span style=\"color: #f1fa8c;\">\"DONE(d)\"</span> <span style=\"color: #f1fa8c;\">\"CANC(c)\"</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Configure custom agenda views</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-agenda-custom-commands\n      '<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"d\"</span> <span style=\"color: #f1fa8c;\">\"Dashboard\"</span>\n         <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">(</span>agenda <span style=\"color: #f1fa8c;\">\"\"</span> <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-deadline-warning-days 7<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n          <span style=\"color: #0189cc;\">(</span>todo <span style=\"color: #f1fa8c;\">\"TODO\"</span>\n                <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"Next Tasks\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n          <span style=\"color: #0189cc;\">(</span>tags-todo <span style=\"color: #f1fa8c;\">\"agenda/ACTIVE\"</span> <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"Active Projects\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n\n        <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"n\"</span> <span style=\"color: #f1fa8c;\">\"Next Tasks\"</span>\n         <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">(</span>todo <span style=\"color: #f1fa8c;\">\"TODO\"</span>\n                <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"Next Tasks\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n\n        <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"W\"</span> <span style=\"color: #f1fa8c;\">\"Work Tasks\"</span> tags-todo <span style=\"color: #f1fa8c;\">\"+work-email\"</span><span style=\"color: #50fa7b;\">)</span>\n\n        <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Low-effort next actions</span>\n        <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"e\"</span> tags-todo <span style=\"color: #f1fa8c;\">\"+TODO=\\\"NEXT\\\"+Effort&lt;15&amp;+Effort&gt;0\"</span>\n         <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"Low Effort Tasks\"</span><span style=\"color: #0189cc;\">)</span>\n          <span style=\"color: #0189cc;\">(</span>org-agenda-max-todos 20<span style=\"color: #0189cc;\">)</span>\n          <span style=\"color: #0189cc;\">(</span>org-agenda-files org-agenda-files<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n\n        <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"w\"</span> <span style=\"color: #f1fa8c;\">\"Workflow Status\"</span>\n         <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">(</span>todo <span style=\"color: #f1fa8c;\">\"BACKLOG\"</span>\n                <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"Project Backlog\"</span><span style=\"color: #ff79c6;\">)</span>\n                 <span style=\"color: #ff79c6;\">(</span>org-agenda-todo-list-sublevels nil<span style=\"color: #ff79c6;\">)</span>\n                 <span style=\"color: #ff79c6;\">(</span>org-agenda-files org-agenda-files<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n\n          <span style=\"color: #0189cc;\">(</span>todo <span style=\"color: #f1fa8c;\">\"WAIT\"</span>\n                <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"Waiting on External\"</span><span style=\"color: #ff79c6;\">)</span>\n                 <span style=\"color: #ff79c6;\">(</span>org-agenda-files org-agenda-files<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n\n          <span style=\"color: #0189cc;\">(</span>todo <span style=\"color: #f1fa8c;\">\"READY\"</span>\n                <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"Ready for Work\"</span><span style=\"color: #ff79c6;\">)</span>\n                 <span style=\"color: #ff79c6;\">(</span>org-agenda-files org-agenda-files<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n\n          <span style=\"color: #0189cc;\">(</span>todo <span style=\"color: #f1fa8c;\">\"ACTIVE\"</span>\n                <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"Active Projects\"</span><span style=\"color: #ff79c6;\">)</span>\n                 <span style=\"color: #ff79c6;\">(</span>org-agenda-files org-agenda-files<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n\n          <span style=\"color: #0189cc;\">(</span>todo <span style=\"color: #f1fa8c;\">\"REVIEW\"</span>\n                <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"In Review\"</span><span style=\"color: #ff79c6;\">)</span>\n                 <span style=\"color: #ff79c6;\">(</span>org-agenda-files org-agenda-files<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n\n          <span style=\"color: #0189cc;\">(</span>todo <span style=\"color: #f1fa8c;\">\"DONE\"</span>\n                <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"Completed Projects\"</span><span style=\"color: #ff79c6;\">)</span>\n                 <span style=\"color: #ff79c6;\">(</span>org-agenda-files org-agenda-files<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n          <span style=\"color: #0189cc;\">(</span>todo <span style=\"color: #f1fa8c;\">\"CANC\"</span>\n                <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>org-agenda-overriding-header <span style=\"color: #f1fa8c;\">\"Cancelled Projects\"</span><span style=\"color: #ff79c6;\">)</span>\n                 <span style=\"color: #ff79c6;\">(</span>org-agenda-files org-agenda-files<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Replace list hyphen with dot</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(font-lock-add-keywords 'org-mode</span>\n<span style=\"color: #6272a4;\">;;                         </span><span style=\"color: #6272a4;\">'((\"^ *\\\\([-]\\\\) \"</span>\n<span style=\"color: #6272a4;\">;;                            </span><span style=\"color: #6272a4;\">(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) \"•\"))))))</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">org-faces</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Make sure org-indent face is available</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">org-indent</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(set-face-attribute 'org-document-title nil :font \"Iosevka Aile\" :weight 'bold :height 1.3)</span>\n<span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(set-face-attribute 'org-document-title nil :font \"JetBrains Mono\" :weight 'bold :height 1.3)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-document-title nil <span style=\"color: #ffb86c;\">:font</span> <span style=\"color: #f1fa8c;\">\"Cantarell\"</span> <span style=\"color: #ffb86c;\">:weight</span> 'bold <span style=\"color: #ffb86c;\">:height</span> 1.1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-document-info nil <span style=\"color: #ffb86c;\">:font</span> <span style=\"color: #f1fa8c;\">\"Cantarell\"</span> <span style=\"color: #ffb86c;\">:weight</span> 'bold <span style=\"color: #ffb86c;\">:height</span> 1.0<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-document-info-keyword nil <span style=\"color: #ffb86c;\">:font</span> <span style=\"color: #f1fa8c;\">\"Fira Mono\"</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">set the size of nested headings</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">dolist</span> <span style=\"color: #ff79c6;\">(</span>face '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>org-level-1 . 1.2<span style=\"color: #bd93f9;\">)</span>\n                <span style=\"color: #bd93f9;\">(</span>org-level-2 . 1.1<span style=\"color: #bd93f9;\">)</span>\n                <span style=\"color: #bd93f9;\">(</span>org-level-3 . 1.0<span style=\"color: #bd93f9;\">)</span>\n                <span style=\"color: #bd93f9;\">(</span>org-level-4 . 1.0<span style=\"color: #bd93f9;\">)</span>\n                <span style=\"color: #bd93f9;\">(</span>org-level-5 . 1.0<span style=\"color: #bd93f9;\">)</span>\n                <span style=\"color: #bd93f9;\">(</span>org-level-6 . 1.0<span style=\"color: #bd93f9;\">)</span>\n                <span style=\"color: #bd93f9;\">(</span>org-level-7 . 1.0<span style=\"color: #bd93f9;\">)</span>\n                <span style=\"color: #bd93f9;\">(</span>org-level-8 . 1.0<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>set-face-attribute <span style=\"color: #50fa7b;\">(</span>car face<span style=\"color: #50fa7b;\">)</span> nil <span style=\"color: #ffb86c;\">:font</span> <span style=\"color: #f1fa8c;\">\"Iosevka Aile\"</span> <span style=\"color: #ffb86c;\">:weight</span> 'extra-bold <span style=\"color: #ffb86c;\">:height</span> <span style=\"color: #50fa7b;\">(</span>cdr face<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(set-face-attribute (car face) nil :font \"Iosevka Aile\" :weight 'extra-bold :height (cdr face))</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">check other faces - https://github.com/tkf/org-mode/blob/master/lisp/org-faces.el</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Ensure that anything that should be fixed-pitch in Org files appears that way</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-block nil <span style=\"color: #ffb86c;\">:foreground</span> nil <span style=\"color: #ffb86c;\">:inherit</span> 'fixed-pitch <span style=\"color: #ffb86c;\">:height</span> 1.02<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-table nil  <span style=\"color: #ffb86c;\">:inherit</span> 'fixed-pitch <span style=\"color: #ffb86c;\">:height</span> 1.1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-formula nil  <span style=\"color: #ffb86c;\">:inherit</span> 'fixed-pitch <span style=\"color: #ffb86c;\">:height</span> 1.1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-code nil   <span style=\"color: #ffb86c;\">:inherit</span> '<span style=\"color: #ff79c6;\">(</span>shadow variable-pitch<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ffb86c;\">:height</span> 1.1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-indent nil <span style=\"color: #ffb86c;\">:inherit</span> '<span style=\"color: #ff79c6;\">(</span>org-hide fixed-pitch<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ffb86c;\">:height</span> 1.1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-verbatim nil <span style=\"color: #ffb86c;\">:inherit</span> '<span style=\"color: #ff79c6;\">(</span>shadow variable-pitch<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ffb86c;\">:height</span> 1.1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-special-keyword nil <span style=\"color: #ffb86c;\">:inherit</span> '<span style=\"color: #ff79c6;\">(</span>font-lock-comment-face fixed-pitch<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ffb86c;\">:height</span> 1.1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-meta-line nil <span style=\"color: #ffb86c;\">:inherit</span> '<span style=\"color: #ff79c6;\">(</span>font-lock-comment-face fixed-pitch<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ffb86c;\">:height</span> 1.1<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-checkbox nil <span style=\"color: #ffb86c;\">:inherit</span> 'fixed-pitch <span style=\"color: #ffb86c;\">:height</span> 1.1<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Get rid of the background on column views</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-column nil <span style=\"color: #ffb86c;\">:background</span> nil<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>set-face-attribute 'org-column-title nil <span style=\"color: #ffb86c;\">:background</span> nil<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">use bullet list mode for heading</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(use-package org-bullets</span>\n<span style=\"color: #6272a4;\">;;   </span><span style=\"color: #6272a4;\">:after org</span>\n<span style=\"color: #6272a4;\">;;   </span><span style=\"color: #6272a4;\">:hook (org-mode . org-bullets-mode)</span>\n<span style=\"color: #6272a4;\">;;   </span><span style=\"color: #6272a4;\">:custom</span>\n<span style=\"color: #6272a4;\">;;   </span><span style=\"color: #6272a4;\">(org-bullets-bullet-list '(\"◉\" \"○\" \"●\" \"○\" \"●\" \"○\" \"●\")))</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">org-superstar</span>\n  <span style=\"color: #ffb86c;\">:after</span> org\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>org-mode . org-superstar-mode<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>org-superstar-remove-leading-stars t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>org-superstar-headline-bullets-list '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"◉\"</span> <span style=\"color: #f1fa8c;\">\"○\"</span> <span style=\"color: #f1fa8c;\">\"●\"</span> <span style=\"color: #f1fa8c;\">\"○\"</span> <span style=\"color: #f1fa8c;\">\"●\"</span> <span style=\"color: #f1fa8c;\">\"○\"</span> <span style=\"color: #f1fa8c;\">\"●\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/org-mode-visual-fill</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> visual-fill-column-width 130\n        visual-fill-column-center-text t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>visual-fill-column-mode 1<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>visual-line-mode 1<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">visual-fill-column</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>org-mode . efs/org-mode-visual-fill<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Org babels</span>\n<span style=\"color: #61bfff;\">(</span>org-babel-do-load-languages\n 'org-babel-load-languages\n '<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span>emacs-lisp . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>python . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>C . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>sass . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>css . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>shell . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>sql . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>java . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>js . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>plantuml . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>restclient . t<span style=\"color: #50fa7b;\">)</span>\n   <span style=\"color: #50fa7b;\">(</span>go . t<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">this disables the evaluation prompt inside org file</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-confirm-babel-evaluate nil<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">tab width is as if the language is indented in its major mode</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-src-tab-acts-natively t<span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n<p>\nUse command <code>toc-org-insert-toc</code> to insert/update the <code>Table of Contents</code> in heading having tag <code>:toc:</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">toc-org</span>\n  <span style=\"color: #ffb86c;\">:commands</span> toc-org-enable\n  <span style=\"color: #ffb86c;\">:init</span> <span style=\"color: #ff79c6;\">(</span>add-hook 'org-mode-hook 'toc-org-enable<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n<p>\nWe can insert man page into org mode. The format is <code>[[man:printf][The printf manual ] ]</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">ol-man</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orge9ae560\">\n<h2 id=\"orge9ae560\">Org Present</h2>\n<div class=\"outline-text-2\" id=\"text-orge9ae560\">\n<p>\nAfter upgrading to Emacs-29.1 <code>org-present</code> package is not working. Fix this ASAP.\nFix the problems with quiting <code>org-present</code>. The fonts are not resetting back to original.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\">\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/org-present-prepare-slide</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span>org-overview<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>org-show-entry<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>org-show-children<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/org-present-hook</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq-local</span> face-remapping-alist '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>default <span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:family</span> <span style=\"color: #f1fa8c;\">\"Iosevka Aile\"</span> <span style=\"color: #ffb86c;\">:height</span> 1.5<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n                                     <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(default (:height 1.5) fixed-pitch)</span>\n                                     <span style=\"color: #bd93f9;\">(</span>header-line <span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:height</span> 4.5<span style=\"color: #0189cc;\">)</span> fixed-pitch<span style=\"color: #bd93f9;\">)</span>\n                                     <span style=\"color: #bd93f9;\">(</span>org-document-title <span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:height</span> 1.75<span style=\"color: #0189cc;\">)</span> org-document-title<span style=\"color: #bd93f9;\">)</span>\n                                     <span style=\"color: #bd93f9;\">(</span>org-code <span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:height</span> 1.3<span style=\"color: #0189cc;\">)</span> org-code<span style=\"color: #bd93f9;\">)</span>\n                                     <span style=\"color: #bd93f9;\">(</span>org-verbatim <span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:height</span> 1.3<span style=\"color: #0189cc;\">)</span> org-verbatim<span style=\"color: #bd93f9;\">)</span>\n                                     <span style=\"color: #bd93f9;\">(</span>org-block <span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:height</span> 1.3<span style=\"color: #0189cc;\">)</span> org-block<span style=\"color: #bd93f9;\">)</span>\n                                     <span style=\"color: #bd93f9;\">(</span>org-block-begin-line <span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:height</span> 1.0<span style=\"color: #0189cc;\">)</span> org-block<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> header-line-format <span style=\"color: #f1fa8c;\">\" \"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(org-appear-mode -1)</span>\n  <span style=\"color: #ff79c6;\">(</span>org-display-inline-images<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>dw/org-present-prepare-slide<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(efs/kill-panel))</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/org-present-quit-hook</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq-local</span> face-remapping-alist '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>default default default<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> header-line-format nil<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>org-present-small<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>org-remove-inline-images<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(org-appear-mode 1)</span>\n  <span style=\"color: #ff79c6;\">(</span>org-present-mode 0<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(efs/start-panel))</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/org-present-prev</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>org-present-prev<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>dw/org-present-prepare-slide<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/org-present-next</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>org-present-next<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>dw/org-present-prepare-slide<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">when</span> <span style=\"color: #50fa7b;\">(</span>fboundp 'live-crafter-add-timestamp<span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>live-crafter-add-timestamp <span style=\"color: #bd93f9;\">(</span>substring-no-properties <span style=\"color: #0189cc;\">(</span>org-get-heading t t t t<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">org-present</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span>org-present-mode . dw/org-present-hook<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span>org-present-mode-quit . dw/org-present-quit-hook<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span>org-present-after-navigate-functions . my/org-present-prepare-slide<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org8134689\">\n<h2 id=\"org8134689\">Leetcode</h2>\n<div class=\"outline-text-2\" id=\"text-org8134689\">\n<p>\nFollowing configurations allow to write solutions to the <a href=\"https://leetcode.com/\">leetcode</a> problems. The <code>Solution</code> class implementing the solve method will then be tangled to <code>sol.h</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Automatically tangle our Emacs.org config file when we save it</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">math2do/org-babel-tangle-config</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">when</span> <span style=\"color: #50fa7b;\">(</span>string-equal <span style=\"color: #bd93f9;\">(</span>file-name-directory <span style=\"color: #0189cc;\">(</span>buffer-file-name<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span> <span style=\"color: #bd93f9;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"~/Projects/Leetcode/\"</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Dynamic scoping to the rescue</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">let</span> <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">(</span>org-confirm-babel-evaluate nil<span style=\"color: #0189cc;\">)</span>\n          <span style=\"color: #0189cc;\">(</span>current-prefix-arg '<span style=\"color: #61bfff;\">(</span>4<span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n      <span style=\"color: #bd93f9;\">(</span>call-interactively 'org-babel-tangle<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span>add-hook 'org-mode-hook <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span> <span style=\"color: #50fa7b;\">(</span>add-hook 'after-save-hook #'math2do/org-babel-tangle-config<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org35410b8\">\n<h2 id=\"org35410b8\">simple-httpd</h2>\n<div class=\"outline-text-2\" id=\"text-org35410b8\">\n<p>\nSimple <code>http</code> server. There are two important interactive functions <code>httpd-start</code> and <code>httpd-stop</code>\nFiles are served from <code>httpd-root</code> (can be changed at any time) on port <code>httpd-port</code>\n</p>\n<p>\nWe can server any directory using command <code>httpd-server-directory</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">simple-httpd</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> httpd-root <span style=\"color: #f1fa8c;\">\"/var/www\"</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(httpd-start)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org2b2d9e3\">\n<h2 id=\"org2b2d9e3\">Dired</h2>\n<div class=\"outline-text-2\" id=\"text-org2b2d9e3\">\n<p>\nShort for <code>Directory Editor</code>\n<code>^</code> : go to parent directory\n<code>RET</code> : Enter the directory\n<code>o</code> : <code>dired-find-file-other-window</code>, visit the file in or directory in another window. It can be edited.\n</p>\n<p>\nRenaming and Moving are the same thing. Following keybindings can be thought of as\ncapitalising the letter\n</p>\n<p>\n<code>S-c</code>: Copy file\n<code>S-r</code>: Rename file\n<code>S-d</code>: delete file(s) marked.\n<code>S-m</code>: <code>dired-do-chmod</code>, change the mode of the marked files\n<code>S-o</code>: <code>dired-do-chown</code>, change the owner of the marked files\n</p>\n<p>\n<code>%-m</code>: <code>dired-mark-files-regexp</code>, mark files with names matched by regex\n</p>\n<p>\n<code>m</code>: mark file\n<code>u</code>: unmark  file\n<code>t</code>: toggle marked\n<code>k</code>: kill (hide) marked, you can get these back by <code>g</code>\n<code>d</code>: mark for deletion\n<code>x</code>: delete files flagged for deletion\n</p>\n<p>\nFile Permissions\nUser Group Others\n-rwx-rwx-rwx\n-421-421-421 (777 for full permission, or 700) [1-7]\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">dired</span>\n  <span style=\"color: #ffb86c;\">:init</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> all-the-icons-dired-monochrome nil<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> nil\n  <span style=\"color: #ffb86c;\">:commands</span> <span style=\"color: #ff79c6;\">(</span>dired dired-jump<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"C-x C-j\"</span> . dired-jump<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> dired-listing-switches <span style=\"color: #f1fa8c;\">\"-agho --group-directories-first\"</span>\n        dired-omit-files <span style=\"color: #f1fa8c;\">\"^\\\\.[</span><span style=\"color: #bd93f9; font-weight: bold;\">^</span><span style=\"color: #f1fa8c;\">.].*\"</span>\n        dired-omit-verbose nil\n        dired-hide-details-hide-symlink-targets nil\n        delete-by-moving-to-trash t\n        dired-recursive-copies 'always\n        dired-recursive-deletes 'always<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">dired-rainbow</span>\n  <span style=\"color: #ffb86c;\">:defer</span> 2\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define-chmod</span> directory <span style=\"color: #f1fa8c;\">\"#6cb2eb\"</span> <span style=\"color: #f1fa8c;\">\"d.*\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> html <span style=\"color: #f1fa8c;\">\"#eb5286\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"css\"</span> <span style=\"color: #f1fa8c;\">\"less\"</span> <span style=\"color: #f1fa8c;\">\"sass\"</span> <span style=\"color: #f1fa8c;\">\"scss\"</span> <span style=\"color: #f1fa8c;\">\"htm\"</span> <span style=\"color: #f1fa8c;\">\"html\"</span> <span style=\"color: #f1fa8c;\">\"jhtm\"</span> <span style=\"color: #f1fa8c;\">\"mht\"</span> <span style=\"color: #f1fa8c;\">\"eml\"</span> <span style=\"color: #f1fa8c;\">\"mustache\"</span> <span style=\"color: #f1fa8c;\">\"xhtml\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> xml <span style=\"color: #f1fa8c;\">\"#f2d024\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"xml\"</span> <span style=\"color: #f1fa8c;\">\"xsd\"</span> <span style=\"color: #f1fa8c;\">\"xsl\"</span> <span style=\"color: #f1fa8c;\">\"xslt\"</span> <span style=\"color: #f1fa8c;\">\"wsdl\"</span> <span style=\"color: #f1fa8c;\">\"bib\"</span> <span style=\"color: #f1fa8c;\">\"json\"</span> <span style=\"color: #f1fa8c;\">\"msg\"</span> <span style=\"color: #f1fa8c;\">\"pgn\"</span> <span style=\"color: #f1fa8c;\">\"rss\"</span> <span style=\"color: #f1fa8c;\">\"yaml\"</span> <span style=\"color: #f1fa8c;\">\"yml\"</span> <span style=\"color: #f1fa8c;\">\"rdata\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> document <span style=\"color: #f1fa8c;\">\"#9561e2\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"docm\"</span> <span style=\"color: #f1fa8c;\">\"doc\"</span> <span style=\"color: #f1fa8c;\">\"docx\"</span> <span style=\"color: #f1fa8c;\">\"odb\"</span> <span style=\"color: #f1fa8c;\">\"odt\"</span> <span style=\"color: #f1fa8c;\">\"pdb\"</span> <span style=\"color: #f1fa8c;\">\"pdf\"</span> <span style=\"color: #f1fa8c;\">\"ps\"</span> <span style=\"color: #f1fa8c;\">\"rtf\"</span> <span style=\"color: #f1fa8c;\">\"djvu\"</span> <span style=\"color: #f1fa8c;\">\"epub\"</span> <span style=\"color: #f1fa8c;\">\"odp\"</span> <span style=\"color: #f1fa8c;\">\"ppt\"</span> <span style=\"color: #f1fa8c;\">\"pptx\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> markdown <span style=\"color: #f1fa8c;\">\"#ffed4a\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"org\"</span> <span style=\"color: #f1fa8c;\">\"etx\"</span> <span style=\"color: #f1fa8c;\">\"info\"</span> <span style=\"color: #f1fa8c;\">\"markdown\"</span> <span style=\"color: #f1fa8c;\">\"md\"</span> <span style=\"color: #f1fa8c;\">\"mkd\"</span> <span style=\"color: #f1fa8c;\">\"nfo\"</span> <span style=\"color: #f1fa8c;\">\"pod\"</span> <span style=\"color: #f1fa8c;\">\"rst\"</span> <span style=\"color: #f1fa8c;\">\"tex\"</span> <span style=\"color: #f1fa8c;\">\"textfile\"</span> <span style=\"color: #f1fa8c;\">\"txt\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> database <span style=\"color: #f1fa8c;\">\"#6574cd\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"xlsx\"</span> <span style=\"color: #f1fa8c;\">\"xls\"</span> <span style=\"color: #f1fa8c;\">\"csv\"</span> <span style=\"color: #f1fa8c;\">\"accdb\"</span> <span style=\"color: #f1fa8c;\">\"db\"</span> <span style=\"color: #f1fa8c;\">\"mdb\"</span> <span style=\"color: #f1fa8c;\">\"sqlite\"</span> <span style=\"color: #f1fa8c;\">\"nc\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> media <span style=\"color: #f1fa8c;\">\"#de751f\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"mp3\"</span> <span style=\"color: #f1fa8c;\">\"mp4\"</span> <span style=\"color: #f1fa8c;\">\"mkv\"</span> <span style=\"color: #f1fa8c;\">\"MP3\"</span> <span style=\"color: #f1fa8c;\">\"MP4\"</span> <span style=\"color: #f1fa8c;\">\"avi\"</span> <span style=\"color: #f1fa8c;\">\"mpeg\"</span> <span style=\"color: #f1fa8c;\">\"mpg\"</span> <span style=\"color: #f1fa8c;\">\"flv\"</span> <span style=\"color: #f1fa8c;\">\"ogg\"</span> <span style=\"color: #f1fa8c;\">\"mov\"</span> <span style=\"color: #f1fa8c;\">\"mid\"</span> <span style=\"color: #f1fa8c;\">\"midi\"</span> <span style=\"color: #f1fa8c;\">\"wav\"</span> <span style=\"color: #f1fa8c;\">\"aiff\"</span> <span style=\"color: #f1fa8c;\">\"flac\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> image <span style=\"color: #f1fa8c;\">\"#f66d9b\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"tiff\"</span> <span style=\"color: #f1fa8c;\">\"tif\"</span> <span style=\"color: #f1fa8c;\">\"cdr\"</span> <span style=\"color: #f1fa8c;\">\"gif\"</span> <span style=\"color: #f1fa8c;\">\"ico\"</span> <span style=\"color: #f1fa8c;\">\"jpeg\"</span> <span style=\"color: #f1fa8c;\">\"jpg\"</span> <span style=\"color: #f1fa8c;\">\"png\"</span> <span style=\"color: #f1fa8c;\">\"psd\"</span> <span style=\"color: #f1fa8c;\">\"eps\"</span> <span style=\"color: #f1fa8c;\">\"svg\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> log <span style=\"color: #f1fa8c;\">\"#c17d11\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"log\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> shell <span style=\"color: #f1fa8c;\">\"#f6993f\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"awk\"</span> <span style=\"color: #f1fa8c;\">\"bash\"</span> <span style=\"color: #f1fa8c;\">\"bat\"</span> <span style=\"color: #f1fa8c;\">\"sed\"</span> <span style=\"color: #f1fa8c;\">\"sh\"</span> <span style=\"color: #f1fa8c;\">\"zsh\"</span> <span style=\"color: #f1fa8c;\">\"vim\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> interpreted <span style=\"color: #f1fa8c;\">\"#38c172\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"py\"</span> <span style=\"color: #f1fa8c;\">\"ipynb\"</span> <span style=\"color: #f1fa8c;\">\"rb\"</span> <span style=\"color: #f1fa8c;\">\"pl\"</span> <span style=\"color: #f1fa8c;\">\"t\"</span> <span style=\"color: #f1fa8c;\">\"msql\"</span> <span style=\"color: #f1fa8c;\">\"mysql\"</span> <span style=\"color: #f1fa8c;\">\"pgsql\"</span> <span style=\"color: #f1fa8c;\">\"sql\"</span> <span style=\"color: #f1fa8c;\">\"r\"</span> <span style=\"color: #f1fa8c;\">\"clj\"</span> <span style=\"color: #f1fa8c;\">\"cljs\"</span> <span style=\"color: #f1fa8c;\">\"scala\"</span> <span style=\"color: #f1fa8c;\">\"js\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> compiled <span style=\"color: #f1fa8c;\">\"#4dc0b5\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"asm\"</span> <span style=\"color: #f1fa8c;\">\"cl\"</span> <span style=\"color: #f1fa8c;\">\"lisp\"</span> <span style=\"color: #f1fa8c;\">\"el\"</span> <span style=\"color: #f1fa8c;\">\"c\"</span> <span style=\"color: #f1fa8c;\">\"h\"</span> <span style=\"color: #f1fa8c;\">\"c++\"</span> <span style=\"color: #f1fa8c;\">\"h++\"</span> <span style=\"color: #f1fa8c;\">\"hpp\"</span> <span style=\"color: #f1fa8c;\">\"hxx\"</span> <span style=\"color: #f1fa8c;\">\"m\"</span> <span style=\"color: #f1fa8c;\">\"cc\"</span> <span style=\"color: #f1fa8c;\">\"cs\"</span> <span style=\"color: #f1fa8c;\">\"cp\"</span> <span style=\"color: #f1fa8c;\">\"cpp\"</span> <span style=\"color: #f1fa8c;\">\"go\"</span> <span style=\"color: #f1fa8c;\">\"f\"</span> <span style=\"color: #f1fa8c;\">\"for\"</span> <span style=\"color: #f1fa8c;\">\"ftn\"</span> <span style=\"color: #f1fa8c;\">\"f90\"</span> <span style=\"color: #f1fa8c;\">\"f95\"</span> <span style=\"color: #f1fa8c;\">\"f03\"</span> <span style=\"color: #f1fa8c;\">\"f08\"</span> <span style=\"color: #f1fa8c;\">\"s\"</span> <span style=\"color: #f1fa8c;\">\"rs\"</span> <span style=\"color: #f1fa8c;\">\"hi\"</span> <span style=\"color: #f1fa8c;\">\"hs\"</span> <span style=\"color: #f1fa8c;\">\"pyc\"</span> <span style=\"color: #f1fa8c;\">\".java\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> executable <span style=\"color: #f1fa8c;\">\"#8cc4ff\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"exe\"</span> <span style=\"color: #f1fa8c;\">\"msi\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> compressed <span style=\"color: #f1fa8c;\">\"#51d88a\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"7z\"</span> <span style=\"color: #f1fa8c;\">\"zip\"</span> <span style=\"color: #f1fa8c;\">\"bz2\"</span> <span style=\"color: #f1fa8c;\">\"tgz\"</span> <span style=\"color: #f1fa8c;\">\"txz\"</span> <span style=\"color: #f1fa8c;\">\"gz\"</span> <span style=\"color: #f1fa8c;\">\"xz\"</span> <span style=\"color: #f1fa8c;\">\"z\"</span> <span style=\"color: #f1fa8c;\">\"Z\"</span> <span style=\"color: #f1fa8c;\">\"jar\"</span> <span style=\"color: #f1fa8c;\">\"war\"</span> <span style=\"color: #f1fa8c;\">\"ear\"</span> <span style=\"color: #f1fa8c;\">\"rar\"</span> <span style=\"color: #f1fa8c;\">\"sar\"</span> <span style=\"color: #f1fa8c;\">\"xpi\"</span> <span style=\"color: #f1fa8c;\">\"apk\"</span> <span style=\"color: #f1fa8c;\">\"xz\"</span> <span style=\"color: #f1fa8c;\">\"tar\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> packaged <span style=\"color: #f1fa8c;\">\"#faad63\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"deb\"</span> <span style=\"color: #f1fa8c;\">\"rpm\"</span> <span style=\"color: #f1fa8c;\">\"apk\"</span> <span style=\"color: #f1fa8c;\">\"jad\"</span> <span style=\"color: #f1fa8c;\">\"jar\"</span> <span style=\"color: #f1fa8c;\">\"cab\"</span> <span style=\"color: #f1fa8c;\">\"pak\"</span> <span style=\"color: #f1fa8c;\">\"pk3\"</span> <span style=\"color: #f1fa8c;\">\"vdf\"</span> <span style=\"color: #f1fa8c;\">\"vpk\"</span> <span style=\"color: #f1fa8c;\">\"bsp\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> encrypted <span style=\"color: #f1fa8c;\">\"#ffed4a\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"gpg\"</span> <span style=\"color: #f1fa8c;\">\"pgp\"</span> <span style=\"color: #f1fa8c;\">\"asc\"</span> <span style=\"color: #f1fa8c;\">\"bfe\"</span> <span style=\"color: #f1fa8c;\">\"enc\"</span> <span style=\"color: #f1fa8c;\">\"signature\"</span> <span style=\"color: #f1fa8c;\">\"sig\"</span> <span style=\"color: #f1fa8c;\">\"p12\"</span> <span style=\"color: #f1fa8c;\">\"pem\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> fonts <span style=\"color: #f1fa8c;\">\"#6cb2eb\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"afm\"</span> <span style=\"color: #f1fa8c;\">\"fon\"</span> <span style=\"color: #f1fa8c;\">\"fnt\"</span> <span style=\"color: #f1fa8c;\">\"pfb\"</span> <span style=\"color: #f1fa8c;\">\"pfm\"</span> <span style=\"color: #f1fa8c;\">\"ttf\"</span> <span style=\"color: #f1fa8c;\">\"otf\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> partition <span style=\"color: #f1fa8c;\">\"#e3342f\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"dmg\"</span> <span style=\"color: #f1fa8c;\">\"iso\"</span> <span style=\"color: #f1fa8c;\">\"bin\"</span> <span style=\"color: #f1fa8c;\">\"nrg\"</span> <span style=\"color: #f1fa8c;\">\"qcow\"</span> <span style=\"color: #f1fa8c;\">\"toast\"</span> <span style=\"color: #f1fa8c;\">\"vcd\"</span> <span style=\"color: #f1fa8c;\">\"vmdk\"</span> <span style=\"color: #f1fa8c;\">\"bak\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define</span> vc <span style=\"color: #f1fa8c;\">\"#0074d9\"</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"git\"</span> <span style=\"color: #f1fa8c;\">\"gitignore\"</span> <span style=\"color: #f1fa8c;\">\"gitattributes\"</span> <span style=\"color: #f1fa8c;\">\"gitmodules\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">dired-rainbow-define-chmod</span> executable-unix <span style=\"color: #f1fa8c;\">\"#38c172\"</span> <span style=\"color: #f1fa8c;\">\"-.*x.*\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/my-dired-init</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #8995ba;\">\"Bunch of stuff to run for dired, either immediately or when it's</span>\n<span style=\"color: #8995ba;\"> loaded.\"</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">&lt;add other stuff here&gt;</span>\n  <span style=\"color: #ff79c6;\">(</span>define-key dired-mode-map <span style=\"color: #50fa7b;\">[</span>remap dired-find-file<span style=\"color: #50fa7b;\">]</span>\n    'dired-single-buffer<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>define-key dired-mode-map <span style=\"color: #50fa7b;\">[</span>remap dired-mouse-find-file-other-window<span style=\"color: #50fa7b;\">]</span>\n    'dired-single-buffer-mouse<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>define-key dired-mode-map <span style=\"color: #50fa7b;\">[</span>remap dired-up-directory<span style=\"color: #50fa7b;\">]</span>\n    'dired-single-up-directory<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">dired-single</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>dired-mode-hook . efs/my-dired-init<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">all-the-icons-dired</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>dired-mode-hook . all-the-icons-dired-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">dired-open</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Doesn't work as expected!</span>\n  <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(add-to-list 'dired-open-functions #'dired-open-xdg t)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> dired-open-extensions '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"png\"</span> . <span style=\"color: #f1fa8c;\">\"feh\"</span><span style=\"color: #bd93f9;\">)</span>\n                                <span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"mkv\"</span> . <span style=\"color: #f1fa8c;\">\"mpv\"</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">kill the current buffer when selecting a new directory to display</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(setq dired-kill-when-opening-new-dired-buffer t)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org8a038d1\">\n<h2 id=\"org8a038d1\">Docker</h2>\n<div class=\"outline-text-2\" id=\"text-org8a038d1\">\n<p>\nNeed to do more customization\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">docker</span>\n  <span style=\"color: #ffb86c;\">:commands</span> docker<span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orga91c1c7\">\n<h2 id=\"orga91c1c7\">Rest Configs</h2>\n<div class=\"outline-text-2\" id=\"text-orga91c1c7\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">treemacs ------------------------------------------------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">treemacs</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:defer</span> t<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">used with treemacs ------------------------------------------------------------------------------------</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">treemacs-projectile</span>\n  <span style=\"color: #ffb86c;\">:after</span> <span style=\"color: #ff79c6;\">(</span>treemacs projectile<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">treemacs-icons-dired</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>dired-mode . treemacs-icons-dired-enable-once<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">treemacs-magit</span>\n  <span style=\"color: #ffb86c;\">:after</span> <span style=\"color: #ff79c6;\">(</span>treemacs magit<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">treemacs-persp</span> <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">treemacs-perspective if you use perspective.el vs. persp-mode</span>\n  <span style=\"color: #ffb86c;\">:after</span> <span style=\"color: #ff79c6;\">(</span>treemacs persp-mode<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">or perspective vs. persp-mode</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:config</span> <span style=\"color: #ff79c6;\">(</span>treemacs-set-scope-type 'Perspectives<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">treemacs-tab-bar</span> <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">treemacs-tab-bar if you use tab-bar-mode</span>\n  <span style=\"color: #ffb86c;\">:after</span> <span style=\"color: #ff79c6;\">(</span>treemacs<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:config</span> <span style=\"color: #ff79c6;\">(</span>treemacs-set-scope-type 'Tabs<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">sequence diagram from www.websequencediagrams.com ------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'wsd-mode-hook 'company-mode<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">plantuml diagrams ----------------------------------------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-plantuml-jar-path\n      <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"~/Projects/notes/plantuml/plantuml-1.2022.5.jar\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">yaml mode ------------------------------------------------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">yaml-mode</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>yaml-mode . lsp-deferred<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>add-to-list 'auto-mode-alist '<span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"\\\\.yml\\\\'\"</span> . yaml-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">golang gopls lsp setup taken from  ----------------------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">go-mode</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span>\n         <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">If you want to switch existing go-mode bindings to use lsp-mode/gopls instead</span>\n         <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">uncomment the following lines</span>\n         <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(\"C-c C-j\" . lsp-find-definition)</span>\n         <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(\"C-c C-d\" . lsp-describe-thing-at-point)</span>\n         <span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span>go-mode . lsp-deferred<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span>before-save . lsp-format-buffer<span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span>before-save . lsp-organize-imports<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span>add-hook 'go-mode-hook <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> tab-width 2<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">dap mode debugging</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">dap-dlv-go</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">C++ lsp mode  --------------------------------------------------------------------------------------------</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">install language server : sudo snap install clangd --classic</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(add-hook 'c-mode-hook 'lsp)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(add-hook 'c++-mode-hook 'lsp)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Read Dockerfile --------------------------------------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">dockerfile-mode</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">dsp for for SQLS</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'sql-mode-hook 'lsp<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> lsp-sqls-workspace-config-path nil<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> lsp-sqls-connections\n      '<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>driver . <span style=\"color: #f1fa8c;\">\"postgresql\"</span><span style=\"color: #bd93f9;\">)</span> <span style=\"color: #bd93f9;\">(</span>dataSourceName . <span style=\"color: #f1fa8c;\">\"host=127.0.0.1 port=5432 user=postgres password=postgres dbname=fulfillment_service sslmode=disable\"</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Python lsp mode ------------------------------------------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">python-mode</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> nil\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>python-mode . lsp-deferred<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>python-shell-interpreter <span style=\"color: #f1fa8c;\">\"python3\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>dap-python-executable <span style=\"color: #f1fa8c;\">\"python3\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">dap-python</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> dap-python-debugger 'debugpy<span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> org-babel-python-command <span style=\"color: #f1fa8c;\">\"python3\"</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'python-mode-hook\n          <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span>\n            <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> indent-tabs-mode nil<span style=\"color: #50fa7b;\">)</span>\n            <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> tab-width 4<span style=\"color: #50fa7b;\">)</span>\n            <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> python-indent-offset 4<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">css-mode</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> nil\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>css-mode . lsp-deferred<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'css-mode-hook <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq-local</span> css-indent-offset 2<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">html-mode</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> nil\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>html-mode . lsp-deferred<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">scss-mode</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> nil\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>scss-mode . lsp-deferred<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">better code completion -----------------------------------------------------------------------------------</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">company</span>\n  <span style=\"color: #ffb86c;\">:after</span> lsp-mode\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>lsp-mode . company-mode<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ffb86c;\">:map</span> company-active-map\n              <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"&lt;tab&gt;\"</span> . company-complete-selection<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ffb86c;\">:map</span> lsp-mode-map\n        <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"&lt;tab&gt;\"</span> . company-indent-or-complete-common<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>company-minimum-prefix-length 1<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>company-idle-delay 0.0<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">better looking suggestions</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">company-box</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>company-mode . company-box-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">code commenting</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">evil-nerd-commenter</span>\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"C-/\"</span> . evilnc-comment-or-uncomment-lines<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org4e0c75c\">\n<h2 id=\"org4e0c75c\">Term Mode</h2>\n<div class=\"outline-text-2\" id=\"text-org4e0c75c\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">term</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> explicit-shell-file-name <span style=\"color: #f1fa8c;\">\"bash\"</span><span style=\"color: #ff79c6;\">)</span> <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Change this to zsh, etc</span>\n  <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(setq explicit-zsh-args '())         ;; Use 'explicit-&lt;shell&gt;-args for shell-specific args</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Match the default Bash shell prompt.  Update this if you have a custom prompt</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> term-prompt-regexp <span style=\"color: #f1fa8c;\">\"^[</span><span style=\"color: #bd93f9; font-weight: bold;\">^</span><span style=\"color: #f1fa8c;\">#$%&gt;\\n]*[#$%&gt;] *\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">colouring your terminal in term-mode</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">eterm-256color</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>term-mode . eterm-256color-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgb085d58\">\n<h2 id=\"orgb085d58\">Yasnippet</h2>\n<div class=\"outline-text-2\" id=\"text-orgb085d58\">\n<p>\nCode snippets can be inserted easily into a buffer based on major mode of the buffer.\nWhile in a buffer we can check what snippets are available using <code>yas-describe-tables</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">yasnippet</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>prog-mode . yas-minor-mode<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> yas-snippet-dirs '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"~/Configs/emacs-snippets\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>yas-global-mode 1<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgdcd0b5f\">\n<h2 id=\"orgdcd0b5f\">Dap Mode</h2>\n<div class=\"outline-text-2\" id=\"text-orgdcd0b5f\">\n<p>\nDap mode is used for debugging with breakpoints.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">dap-mode</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Uncomment the config below if you want all UI panes to be hidden by default!</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>lsp-enable-dap-auto-configure nil<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span>dap-ui-mode 1<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>dap-tooltip-mode 1<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">dap-node</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>dap-node-setup<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Automatically installs debug adapter if needed</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orga2e8d3b\">\n<h2 id=\"orga2e8d3b\">Eshell</h2>\n<div class=\"outline-text-2\" id=\"text-orga2e8d3b\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> shell-file-name <span style=\"color: #f1fa8c;\">\"/bin/bash\"</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">read-file</span> <span style=\"color: #ff79c6;\">(</span>file-path<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">with-temp-buffer</span>\n    <span style=\"color: #50fa7b;\">(</span>insert-file-contents file-path<span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>buffer-string<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/get-current-package-version</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">let</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>package-json-file <span style=\"color: #0189cc;\">(</span>concat <span style=\"color: #61bfff;\">(</span>eshell/pwd<span style=\"color: #61bfff;\">)</span> <span style=\"color: #f1fa8c;\">\"/package.json\"</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">when</span> <span style=\"color: #bd93f9;\">(</span>file-exists-p package-json-file<span style=\"color: #bd93f9;\">)</span>\n      <span style=\"color: #bd93f9;\">(</span><span style=\"color: #ff79c6;\">let*</span> <span style=\"color: #0189cc;\">(</span><span style=\"color: #61bfff;\">(</span>package-json-contents <span style=\"color: #ff79c6;\">(</span>read-file package-json-file<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n             <span style=\"color: #61bfff;\">(</span>package-json <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">ignore-errors</span> <span style=\"color: #50fa7b;\">(</span>json-parse-string package-json-contents<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n        <span style=\"color: #0189cc;\">(</span><span style=\"color: #ff79c6;\">when</span> package-json\n          <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">ignore-errors</span> <span style=\"color: #ff79c6;\">(</span>gethash <span style=\"color: #f1fa8c;\">\"version\"</span> package-json<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/map-line-to-status-char</span> <span style=\"color: #ff79c6;\">(</span>line<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">cond</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>string-match <span style=\"color: #f1fa8c;\">\"^?\\\\? \"</span> line<span style=\"color: #bd93f9;\">)</span> <span style=\"color: #f1fa8c;\">\"?\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/get-git-status-prompt</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">let</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>status-lines <span style=\"color: #0189cc;\">(</span>cdr <span style=\"color: #61bfff;\">(</span>process-lines <span style=\"color: #f1fa8c;\">\"git\"</span> <span style=\"color: #f1fa8c;\">\"status\"</span> <span style=\"color: #f1fa8c;\">\"--porcelain\"</span> <span style=\"color: #f1fa8c;\">\"-b\"</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>seq-uniq <span style=\"color: #bd93f9;\">(</span>seq-filter 'identity <span style=\"color: #0189cc;\">(</span>mapcar 'dw/map-line-to-status-char status-lines<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/get-prompt-path</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">let*</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>current-path <span style=\"color: #0189cc;\">(</span>eshell/pwd<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n         <span style=\"color: #bd93f9;\">(</span>git-output <span style=\"color: #0189cc;\">(</span>shell-command-to-string <span style=\"color: #f1fa8c;\">\"git rev-parse --show-toplevel\"</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n         <span style=\"color: #bd93f9;\">(</span>has-path <span style=\"color: #0189cc;\">(</span>not <span style=\"color: #61bfff;\">(</span>string-match <span style=\"color: #f1fa8c;\">\"^fatal\"</span> git-output<span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">if</span> <span style=\"color: #bd93f9;\">(</span>not has-path<span style=\"color: #bd93f9;\">)</span>\n        <span style=\"color: #bd93f9;\">(</span>abbreviate-file-name current-path<span style=\"color: #bd93f9;\">)</span>\n      <span style=\"color: #bd93f9;\">(</span>string-remove-prefix <span style=\"color: #0189cc;\">(</span>file-name-directory git-output<span style=\"color: #0189cc;\">)</span> current-path<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">This prompt function mostly replicates my custom zsh prompt setup</span>\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">that is powered by github.com/denysdovhan/spaceship-prompt.</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/eshell-prompt</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">let</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>current-branch <span style=\"color: #0189cc;\">(</span>magit-get-current-branch<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n        <span style=\"color: #bd93f9;\">(</span>package-version <span style=\"color: #0189cc;\">(</span>dw/get-current-package-version<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>concat\n     <span style=\"color: #f1fa8c;\">\"\\n\"</span>\n     <span style=\"color: #bd93f9;\">(</span>propertize <span style=\"color: #f1fa8c;\">\"Mathura\"</span> 'face `<span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"#62aeed\"</span> <span style=\"color: #ffb86c;\">:family</span> <span style=\"color: #f1fa8c;\">\"OLCK Optimum Med\"</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n     <span style=\"color: #bd93f9;\">(</span>propertize <span style=\"color: #f1fa8c;\">\" ॐ \"</span> 'face `<span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"#ff9f33\"</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n     <span style=\"color: #bd93f9;\">(</span>propertize <span style=\"color: #0189cc;\">(</span>dw/get-prompt-path<span style=\"color: #0189cc;\">)</span> 'face `<span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"#82cfd3\"</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n     <span style=\"color: #bd93f9;\">(</span><span style=\"color: #ff79c6;\">when</span> current-branch\n       <span style=\"color: #0189cc;\">(</span>concat\n        <span style=\"color: #61bfff;\">(</span>propertize <span style=\"color: #f1fa8c;\">\" • \"</span> 'face `<span style=\"color: #ff79c6;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"white\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n        <span style=\"color: #61bfff;\">(</span>propertize <span style=\"color: #ff79c6;\">(</span>concat <span style=\"color: #f1fa8c;\">\" \"</span> current-branch<span style=\"color: #ff79c6;\">)</span> 'face `<span style=\"color: #ff79c6;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"#c475f0\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n     <span style=\"color: #bd93f9;\">(</span><span style=\"color: #ff79c6;\">when</span> package-version\n       <span style=\"color: #0189cc;\">(</span>concat\n        <span style=\"color: #61bfff;\">(</span>propertize <span style=\"color: #f1fa8c;\">\" @ \"</span> 'face `<span style=\"color: #ff79c6;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"white\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n        <span style=\"color: #61bfff;\">(</span>propertize package-version 'face `<span style=\"color: #ff79c6;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"#e8a206\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n     <span style=\"color: #bd93f9;\">(</span>propertize <span style=\"color: #f1fa8c;\">\" • \"</span> 'face `<span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"white\"</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n     <span style=\"color: #bd93f9;\">(</span>propertize <span style=\"color: #0189cc;\">(</span>format-time-string <span style=\"color: #f1fa8c;\">\"%I:%M:%S %p\"</span><span style=\"color: #0189cc;\">)</span> 'face `<span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"#5a5b7f\"</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n     <span style=\"color: #bd93f9;\">(</span><span style=\"color: #ff79c6;\">if</span> <span style=\"color: #0189cc;\">(</span>= <span style=\"color: #61bfff;\">(</span>user-uid<span style=\"color: #61bfff;\">)</span> 0<span style=\"color: #0189cc;\">)</span>\n         <span style=\"color: #0189cc;\">(</span>propertize <span style=\"color: #f1fa8c;\">\"\\n#\"</span> 'face `<span style=\"color: #61bfff;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"red2\"</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n       <span style=\"color: #0189cc;\">(</span>propertize <span style=\"color: #f1fa8c;\">\"\\nλ\"</span> 'face `<span style=\"color: #61bfff;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"#aece4a\"</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n     <span style=\"color: #bd93f9;\">(</span>propertize <span style=\"color: #f1fa8c;\">\" \"</span> 'face `<span style=\"color: #0189cc;\">(</span><span style=\"color: #ffb86c;\">:foreground</span> <span style=\"color: #f1fa8c;\">\"white\"</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span>add-hook 'eshell-banner-load-hook\n          <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span>\n            <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> eshell-banner-message\n                  <span style=\"color: #bd93f9;\">(</span>concat <span style=\"color: #f1fa8c;\">\"\\n\"</span> <span style=\"color: #0189cc;\">(</span>propertize <span style=\"color: #f1fa8c;\">\" \"</span> 'display <span style=\"color: #61bfff;\">(</span>create-image <span style=\"color: #f1fa8c;\">\"~/Configs/.config/emacs/eshell/sarna.png\"</span> 'png nil <span style=\"color: #ffb86c;\">:scale</span> 0.05 <span style=\"color: #ffb86c;\">:align-to</span> <span style=\"color: #f1fa8c;\">\"center\"</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n                          <span style=\"color: #f1fa8c;\">\"\\n\"</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">dw/eshell-configure</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">xterm-color</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">push</span> 'eshell-tramp eshell-modules-list<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">push</span> 'xterm-color-filter eshell-preoutput-filter-functions<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>delq 'eshell-handle-ansi-color eshell-output-filter-functions<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Save command history when commands are entered</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'eshell-pre-command-hook 'eshell-save-some-history<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'eshell-before-prompt-hook\n            <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #bd93f9;\">()</span>\n              <span style=\"color: #bd93f9;\">(</span><span style=\"color: #ff79c6;\">setq</span> xterm-color-preserve-properties t<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Truncate buffer for performance</span>\n  <span style=\"color: #ff79c6;\">(</span>add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">We want to use xterm-256color when running interactive commands</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">in eshell but not during other times when we might be launching</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">a shell command to gather its output.</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'eshell-pre-command-hook\n            <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #bd93f9;\">()</span> <span style=\"color: #bd93f9;\">(</span>setenv <span style=\"color: #f1fa8c;\">\"TERM\"</span> <span style=\"color: #f1fa8c;\">\"xterm-256color\"</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'eshell-post-command-hook\n            <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #bd93f9;\">()</span> <span style=\"color: #bd93f9;\">(</span>setenv <span style=\"color: #f1fa8c;\">\"TERM\"</span> <span style=\"color: #f1fa8c;\">\"dumb\"</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Use completion-at-point to provide completions in eshell</span>\n  <span style=\"color: #ff79c6;\">(</span>define-key eshell-mode-map <span style=\"color: #50fa7b;\">(</span>kbd <span style=\"color: #f1fa8c;\">\"&lt;tab&gt;\"</span><span style=\"color: #50fa7b;\">)</span> 'completion-at-point<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>define-key eshell-mode-map <span style=\"color: #50fa7b;\">(</span>kbd <span style=\"color: #f1fa8c;\">\"C-r\"</span><span style=\"color: #50fa7b;\">)</span> 'consult-history<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Initialize the shell history</span>\n  <span style=\"color: #ff79c6;\">(</span>eshell-hist-initialize<span style=\"color: #ff79c6;\">)</span>\n\n\n  <span style=\"color: #ff79c6;\">(</span>setenv <span style=\"color: #f1fa8c;\">\"PAGER\"</span> <span style=\"color: #f1fa8c;\">\"cat\"</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> eshell-prompt-function      'dw/eshell-prompt\n        eshell-prompt-regexp        <span style=\"color: #f1fa8c;\">\"^λ \"</span>\n        eshell-history-size         10000\n        eshell-buffer-maximum-lines 10000\n        eshell-hist-ignoredups t\n        eshell-highlight-prompt t\n        eshell-scroll-to-bottom-on-input t\n        eshell-prefer-lisp-functions nil<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">eshell</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>eshell-first-time-mode . dw/eshell-configure<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">:bind (:map eshell-mode-map</span>\n  <span style=\"color: #6272a4;\">;;             </span><span style=\"color: #6272a4;\">(\"C-r\" . consult-history))</span>\n  <span style=\"color: #ffb86c;\">:init</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> eshell-directory-name <span style=\"color: #f1fa8c;\">\"~/Configs/.config/emacs/eshell/\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">eshell-z</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span>eshell-mode . <span style=\"color: #bd93f9;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #0189cc;\">()</span> <span style=\"color: #0189cc;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">eshell-z</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n         <span style=\"color: #50fa7b;\">(</span>eshell-z-change-dir .  <span style=\"color: #bd93f9;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #0189cc;\">()</span> <span style=\"color: #0189cc;\">(</span>eshell/pushd <span style=\"color: #61bfff;\">(</span>eshell/pwd<span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">exec-path-from-shell</span>\n  <span style=\"color: #ffb86c;\">:init</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> exec-path-from-shell-check-startup-files nil<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">when</span> <span style=\"color: #50fa7b;\">(</span>memq window-system '<span style=\"color: #bd93f9;\">(</span>mac ns x<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>exec-path-from-shell-initialize<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">visual commands</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">with-eval-after-load</span> 'esh-opt\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> eshell-destroy-buffer-when-process-dies t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> eshell-visual-commands '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"htop\"</span> <span style=\"color: #f1fa8c;\">\"zsh\"</span> <span style=\"color: #f1fa8c;\">\"vim\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Fish completion</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">fish-completion</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>eshell-mode . fish-completion-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">command highlighting</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">eshell-syntax-highlighting</span>\n  <span style=\"color: #ffb86c;\">:after</span> esh-mode\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span>eshell-syntax-highlighting-global-mode +1<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">History autocompletion</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">esh-autosuggest</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>eshell-mode . esh-autosuggest-mode<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> esh-autosuggest-delay 0.5<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>set-face-foreground 'company-preview-common <span style=\"color: #f1fa8c;\">\"#4b5668\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>set-face-background 'company-preview nil<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Toggling eshell</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">eshell-toggle</span>\n  <span style=\"color: #ffb86c;\">:bind</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"C-&lt;return&gt;\"</span> . eshell-toggle<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>eshell-toggle-window-side 'right<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>eshell-toggle-use-projectile-root t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>eshell-toggle-run-command nil<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgbd7af81\">\n<h2 id=\"orgbd7af81\">Vterm</h2>\n<div class=\"outline-text-2\" id=\"text-orgbd7af81\">\n<p>\nCheck installation instructions from repo: <a href=\"https://github.com/akermu/emacs-libvterm\">https://github.com/akermu/emacs-libvterm</a>\nThere are some pre-requisites that need to be installed before installing <code>vterm</code>. These are:\n<a href=\"https://cmake.org/install/\">cmake</a> : which in turn may depend on <code>openssl</code> and <code>libssl-dev</code>, both of which can be installed with <code>apt</code>\n</p>\n<p>\n<code>sudo apt-get install -y libtool-bin</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">vterm</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t<span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org3c05fbf\">\n<h2 id=\"org3c05fbf\">M-Tab Buffer Cycling</h2>\n<div class=\"outline-text-2\" id=\"text-org3c05fbf\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">buffer-flip</span>\n  <span style=\"color: #ffb86c;\">:ensure</span> t\n  <span style=\"color: #ffb86c;\">:bind</span>  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"M-&lt;tab&gt;\"</span> . buffer-flip<span style=\"color: #50fa7b;\">)</span>\n          <span style=\"color: #ffb86c;\">:map</span> buffer-flip-map\n          <span style=\"color: #50fa7b;\">(</span> <span style=\"color: #f1fa8c;\">\"M-&lt;tab&gt;\"</span> .   buffer-flip-forward<span style=\"color: #50fa7b;\">)</span> \n          <span style=\"color: #50fa7b;\">(</span> <span style=\"color: #f1fa8c;\">\"M-S-&lt;tab&gt;\"</span> . buffer-flip-backward<span style=\"color: #50fa7b;\">)</span> \n          <span style=\"color: #50fa7b;\">(</span> <span style=\"color: #f1fa8c;\">\"M-ESC\"</span> .     buffer-flip-abort<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> buffer-flip-skip-patterns\n        '<span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"^\\\\*helm\\\\b\"</span>\n          <span style=\"color: #f1fa8c;\">\"^\\\\*swiper\\\\*$\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org3e27e38\">\n<h2 id=\"org3e27e38\">Password Store</h2>\n<div class=\"outline-text-2\" id=\"text-org3e27e38\">\n<ul class=\"org-ul\">\n<li><code>password-store-insert</code> : Insert a new entry with <b>Password</b></li>\n<li><code>pasword-store-copy</code> : Copy the password into kill ring</li>\n<li><code>password-store-edit</code> : Edit the existing password in a buffer. After editing quit buffer by <code>C-x #</code></li>\n</ul>\n<p>\nEntry convention: <code>{category}/{service}/password</code>, <code>{category}/{service}/username</code>,  <code>{category}/{service}/url</code>\nIf multiple services than, after <code>service</code> add another sub-service\n</p>\n<p>\nExplore other functions by fuzzy searching commands with <code>password-store</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">password-store</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org1471152\">\n<h2 id=\"org1471152\">Custom emacs file</h2>\n<div class=\"outline-text-2\" id=\"text-org1471152\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> custom-file <span style=\"color: #ff79c6;\">(</span>concat user-emacs-directory <span style=\"color: #f1fa8c;\">\"emacs-custom.el\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">when</span> <span style=\"color: #ff79c6;\">(</span>file-exists-p custom-file<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>load custom-file<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Make gc pauses faster by decreasing the threshold.</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> gc-cons-threshold <span style=\"color: #ff79c6;\">(</span>* 2 1000 1000<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"status\" id=\"postamble\">\n<p class=\"date\">Date: 2023-07-08 Sat 00:00</p>\n</div>\n</body>",
		"path": "/content/emacs-custom-configuration",
		"heading_ids": [
			"org8b9f94a",
			"orgedb34bc",
			"orgbf7417d",
			"org2c8a3d6",
			"org7d7b72f",
			"orgec0e1a5",
			"org1198c79",
			"org05d8b4b",
			"org4868d6f",
			"orgafe014b",
			"orgdd29755",
			"org7ee5602",
			"org2ebcf25",
			"org6d67fa4",
			"org00ae1ef",
			"orgbddee34",
			"orgf0e7512",
			"orgf41ee64",
			"org6fe45f4",
			"orgb90e72b",
			"org6d6c73f",
			"org25d9df4",
			"orge4c607c",
			"org4694b29",
			"org628413a",
			"org176e3a1",
			"orgbcb8e43",
			"orgaadf97c",
			"orge9744b7",
			"orgc7bfc4c",
			"org20de27b",
			"org7a0bbb2",
			"orge9ae560",
			"org8134689",
			"org35410b8",
			"org2b2d9e3",
			"org8a038d1",
			"orga91c1c7",
			"org4e0c75c",
			"orgb085d58",
			"orgdcd0b5f",
			"orga2e8d3b",
			"orgbd7af81",
			"org3c05fbf",
			"org3e27e38",
			"org1471152"
		]
	},
	{
		"title": "emacs-emacs-lisp",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgf476355\">References</a></li>\n<li><a href=\"#org7f08064\">Functions</a>\n<ul>\n<li><a href=\"#orgebe7a27\">Interactive Functions</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgf476355\">\n<h2 id=\"orgf476355\">References</h2>\n<div class=\"outline-text-2\" id=\"text-orgf476355\">\n<ul class=\"org-ul\">\n<li><a href=\"https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html\">Programming in Emacs Lisp</a></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org7f08064\">\n<h2 id=\"org7f08064\">Functions</h2>\n<div class=\"outline-text-2\" id=\"text-org7f08064\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgebe7a27\">\n<h3 id=\"orgebe7a27\">Interactive Functions</h3>\n<div class=\"outline-text-3\" id=\"text-orgebe7a27\">\n<p>\nYou make a function interactive by placing a list that begins with the special form interactive immediately after the documentation.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">multiply-by-seven</span> <span style=\"color: #ff79c6;\">(</span>number<span style=\"color: #ff79c6;\">)</span>       <span style=\"color: #6272a4;\">; </span><span style=\"color: #6272a4;\">Interactive version.</span>\n  <span style=\"color: #8995ba;\">\"Multiply NUMBER by seven.\"</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span> <span style=\"color: #f1fa8c;\">\"p\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>message <span style=\"color: #f1fa8c;\">\"The result is %d\"</span> <span style=\"color: #50fa7b;\">(</span>* 7 number<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n<p>\nAbove function can be evaluated by <code>C-u</code> <code>{number}</code> <code>M-e</code> <code>multiply-by-seven</code>\n</p>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/emacs-emacs-lisp",
		"heading_ids": [
			"orgf476355",
			"org7f08064",
			"orgebe7a27"
		]
	},
	{
		"title": "java-maven",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org2c3ba13\">Maven Project</a></li>\n<li><a href=\"#orgf421007\">Reference</a></li>\n<li><a href=\"#orge72e51a\">Create Project</a></li>\n<li><a href=\"#org2777f6d\">The <code>POM</code></a></li>\n<li><a href=\"#org855eac2\">Build Project</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org2c3ba13\">\n<h2 id=\"org2c3ba13\">Maven Project</h2>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgf421007\">\n<h2 id=\"orgf421007\">Reference</h2>\n<div class=\"outline-text-2\" id=\"text-orgf421007\">\n<ul class=\"org-ul\">\n<li><a href=\"https://maven.apache.org/download.cgi\">Download Maven</a></li>\n<li><a href=\"https://maven.apache.org/install.html\">Install Maven</a></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orge72e51a\">\n<h2 id=\"orge72e51a\">Create Project</h2>\n<div class=\"outline-text-2\" id=\"text-orge72e51a\">\n<p>\nMaven project can be created with following command. Change the param <code>DgroupdId</code> and <code>DartifactId</code> for new projects.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org2777f6d\">\n<h2 id=\"org2777f6d\">The <code>POM</code></h2>\n<div class=\"outline-text-2\" id=\"text-org2777f6d\">\n<p>\nThe <code>pom.xml</code> is the core file present at root directory of the project.\nIt is a single configuration file that contains the majority of information required to build a project in just the way you want.\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org855eac2\">\n<h2 id=\"org855eac2\">Build Project</h2>\n<div class=\"outline-text-2\" id=\"text-org855eac2\">\n<p>\nBuild the project with following command. It will run series of actions and print the information.\nThis will execute various phases.\n</p>\n<ul class=\"org-ul\">\n<li>validate</li>\n<li>generate-sources</li>\n<li>process-sources</li>\n<li>generate-resources</li>\n<li>process-resources</li>\n<li>compile</li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">mvn package\n</pre>\n</div>\n<p>\nRun the newly compiled and packaged <code>JAR</code> with following\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">java -cp target/practice-1.0-SNAPSHOT.jar com.practice.app.App\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/java-maven",
		"heading_ids": [
			"org2c3ba13",
			"orgf421007",
			"orge72e51a",
			"org2777f6d",
			"org855eac2"
		]
	},
	{
		"title": "miscellaneous-books",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org4269493\">Computer Science</a>\n<ul>\n<li><a href=\"#orgce8beb1\">Operating System Concepts</a></li>\n<li><a href=\"#orgf9d2902\">Database System Concepts</a></li>\n<li><a href=\"#orge9ee932\">Computer Networking</a></li>\n<li><a href=\"#org814db90\">Introduction to Algorithms</a></li>\n<li><a href=\"#orgf460ee0\">Compilers: Principles Techniques and Tool</a></li>\n<li><a href=\"#org9c6967a\">The Go Programming Language</a></li>\n<li><a href=\"#org1d37b13\">Head First Design Pattern <code>(Building Extensible and Maintainable Object-Oriented Software)</code></a></li>\n</ul>\n</li>\n<li><a href=\"#orgc773ff0\">Novels</a>\n<ul>\n<li><a href=\"#org5f433ef\">The Alchemist</a></li>\n</ul>\n</li>\n<li><a href=\"#orge52b925\">Motivational</a>\n<ul>\n<li><a href=\"#org5c8641e\">Atomic Habits</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org4269493\">\n<h2 id=\"org4269493\">Computer Science</h2>\n<div class=\"outline-text-2\" id=\"text-org4269493\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgce8beb1\">\n<h3 id=\"orgce8beb1\">Operating System Concepts</h3>\n<div class=\"outline-text-3\" id=\"text-orgce8beb1\">\n<p>\nAuthor: Silberschatz, Galvin, Gagne\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgf9d2902\">\n<h3 id=\"orgf9d2902\">Database System Concepts</h3>\n<div class=\"outline-text-3\" id=\"text-orgf9d2902\">\n<p>\nAuthor: Abraham Silberschatz, Henry F. Korth, S. Sudarshan\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orge9ee932\">\n<h3 id=\"orge9ee932\">Computer Networking</h3>\n<div class=\"outline-text-3\" id=\"text-orge9ee932\">\n<p>\nAuthor: Kurose\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org814db90\">\n<h3 id=\"org814db90\">Introduction to Algorithms</h3>\n<div class=\"outline-text-3\" id=\"text-org814db90\">\n<p>\nAuthor: Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgf460ee0\">\n<h3 id=\"orgf460ee0\">Compilers: Principles Techniques and Tool</h3>\n<div class=\"outline-text-3\" id=\"text-orgf460ee0\">\n<p>\nAuthor: Aho\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org9c6967a\">\n<h3 id=\"org9c6967a\">The Go Programming Language</h3>\n<div class=\"outline-text-3\" id=\"text-org9c6967a\">\n<p>\nAuthor: Alan A. A. Donovan, Brian W. Kernighan\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org1d37b13\">\n<h3 id=\"org1d37b13\">Head First Design Pattern <code>(Building Extensible and Maintainable Object-Oriented Software)</code></h3>\n<div class=\"outline-text-3\" id=\"text-org1d37b13\">\n<p>\nAuthor: by Eric Freeman, Elisabeth Robson\n</p>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgc773ff0\">\n<h2 id=\"orgc773ff0\">Novels</h2>\n<div class=\"outline-text-2\" id=\"text-orgc773ff0\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-org5f433ef\">\n<h3 id=\"org5f433ef\">The Alchemist</h3>\n<div class=\"outline-text-3\" id=\"text-org5f433ef\">\n<p>\nAuthor: Paulo Coelho\n</p>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orge52b925\">\n<h2 id=\"orge52b925\">Motivational</h2>\n<div class=\"outline-text-2\" id=\"text-orge52b925\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-org5c8641e\">\n<h3 id=\"org5c8641e\">Atomic Habits</h3>\n<div class=\"outline-text-3\" id=\"text-org5c8641e\">\n<p>\nAuthor: James Clear\n</p>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/miscellaneous-books",
		"heading_ids": [
			"org4269493",
			"orgce8beb1",
			"orgf9d2902",
			"orge9ee932",
			"org814db90",
			"orgf460ee0",
			"org9c6967a",
			"org1d37b13",
			"orgc773ff0",
			"org5f433ef",
			"orge52b925",
			"org5c8641e"
		]
	},
	{
		"title": "cp-problem-setting",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org8997d8f\">Greatest Number</a>\n<ul>\n<li><a href=\"#orgea8cc99\">Solution</a></li>\n</ul>\n</li>\n<li><a href=\"#org005eb3d\">Subarray Sums Divisible by K</a>\n<ul>\n<li><a href=\"#org747101a\">Solution</a></li>\n</ul>\n</li>\n<li><a href=\"#orge253884\">Repeat And Missing Number</a></li>\n<li><a href=\"#org6162110\">Google Interview Questions</a>\n<ul>\n<li><a href=\"#org1c2de1d\">Maximise Gifts</a></li>\n<li><a href=\"#org939852b\">Rooms with most visits</a></li>\n<li><a href=\"#org182bbf4\">Misplaced Char</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org8997d8f\">\n<h2 id=\"org8997d8f\">Greatest Number</h2>\n<div class=\"outline-text-2\" id=\"text-org8997d8f\">\n<p>\nInspired by this Leetcode Problem <a href=\"https://leetcode.com/problems/create-maximum-number/\">321. Create Maximum Number</a>\n</p>\n<p>\nGiven an array <code>nums</code> containing only digits. Create a maximum <code>k</code>-digit number using digits\nfrom <code>nums</code>. Relative ordering of digits used from the array must be preserved.\n</p>\n<p>\n<span class=\"underline\">Example 1</span>:\n<b>Input</b>: nums = [7, 9, 0, 8, 1, 7], k = 4\n<b>Output</b>: [9, 8, 1, 7]\n</p>\n<p>\n<span class=\"underline\">Example 2</span>:\n<b>Input</b>: nums = [7, 9, 0, 8, 1, 7], k = 3\n<b>Output</b>: [9, 8, 7]\n</p>\n<p>\n<span class=\"underline\">Constraints</span>:\n1 &lt;= nums.length &lt;= 1e5\n0 &lt;= nums[i] &lt;= 9\n1 &lt;= k &lt;= nums.length\n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgea8cc99\">\n<h3 id=\"orgea8cc99\">Solution</h3>\n<div class=\"outline-text-3\" id=\"text-orgea8cc99\">\n<div class=\"org-src-container\">\n<pre class=\"src src-cpp\"><span style=\"color: #bd93f9;\">vector</span> <span style=\"color: #61bfff;\">&lt;</span><span style=\"color: #bd93f9;\">int</span><span style=\"color: #61bfff;\">&gt;</span> <span style=\"color: #50fa7b;\">Solve</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #bd93f9;\">vector</span> <span style=\"color: #ff79c6;\">&lt;</span><span style=\"color: #bd93f9;\">int</span><span style=\"color: #ff79c6;\">&gt;</span> <span style=\"color: #ffc9e8;\">nums</span>, <span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">k</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">here goes your code ...</span>\n  <span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">n</span> = <span style=\"color: #ff79c6;\">(</span><span style=\"color: #bd93f9;\">int</span><span style=\"color: #ff79c6;\">)</span> nums.size<span style=\"color: #ff79c6;\">()</span>;\n  <span style=\"color: #bd93f9;\">vector</span> <span style=\"color: #ff79c6;\">&lt;</span><span style=\"color: #bd93f9;\">int</span><span style=\"color: #ff79c6;\">&gt;</span> <span style=\"color: #ffc9e8;\">ans</span>;\n  <span style=\"color: #ff79c6;\">for</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">i</span> = 0; i &lt; n; i++<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #ff79c6;\">while</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">!</span>ans.empty<span style=\"color: #bd93f9;\">()</span> &amp;&amp; ans.back<span style=\"color: #bd93f9;\">()</span> &lt; nums<span style=\"color: #bd93f9;\">[</span>i<span style=\"color: #bd93f9;\">]</span> &amp;&amp; <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">(</span>n - i<span style=\"color: #0189cc;\">)</span> &gt; <span style=\"color: #0189cc;\">(</span>k - <span style=\"color: #61bfff;\">(</span><span style=\"color: #bd93f9;\">int</span><span style=\"color: #61bfff;\">)</span> ans.size<span style=\"color: #61bfff;\">()</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span> <span style=\"color: #50fa7b;\">{</span>\n      ans.pop_back<span style=\"color: #bd93f9;\">()</span>;\n    <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #ff79c6;\">if</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span><span style=\"color: #bd93f9;\">int</span><span style=\"color: #bd93f9;\">)</span> ans.size<span style=\"color: #bd93f9;\">()</span> &lt; k<span style=\"color: #50fa7b;\">)</span> <span style=\"color: #50fa7b;\">{</span>\n      ans.push_back<span style=\"color: #bd93f9;\">(</span>nums<span style=\"color: #0189cc;\">[</span>i<span style=\"color: #0189cc;\">]</span><span style=\"color: #bd93f9;\">)</span>;\n    <span style=\"color: #50fa7b;\">}</span>\n  <span style=\"color: #ff79c6;\">}</span>\n  <span style=\"color: #ff79c6;\">return</span> ans;\n<span style=\"color: #61bfff;\">}</span> \n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org005eb3d\">\n<h2 id=\"org005eb3d\">Subarray Sums Divisible by K</h2>\n<div class=\"outline-text-2\" id=\"text-org005eb3d\">\n<p>\nSame as this Leetcode Problem <a href=\"https://leetcode.com/problems/subarray-sums-divisible-by-k/description/\">974. Subarray Sums Divisible by K</a>\n</p>\n<p>\nGiven an integer array <code>nums</code> and an integer <code>k</code>, return the number of non-empty subarrays that\nhave a sum divisible by k.\n</p>\n<p>\n<span class=\"underline\">Example 1</span>:\n<b>Input</b>: nums = [4, 5, 0, -2, -3, 1], k = 5\n<b>Output</b>: 7\n<b>Explanation</b>: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n</p>\n<p>\n<span class=\"underline\">Example 2</span>:\n<b>Input</b>: nums = {5}, k = 9\n<b>Output</b>: 0\n</p>\n<p>\n<span class=\"underline\">Constraints</span>:\n1 &lt;= nums.length &lt;= 3 * 1e4\n-1e4 &lt;= nums[i] &lt;= 1e4\n2 &lt;= k &lt;= 1e4\n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org747101a\">\n<h3 id=\"org747101a\">Solution</h3>\n<div class=\"outline-text-3\" id=\"text-org747101a\">\n<div class=\"org-src-container\">\n<pre class=\"src src-cpp\">\n<span style=\"color: #bd93f9;\">int</span> <span style=\"color: #50fa7b;\">subarraysDivByK</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #bd93f9;\">vector</span><span style=\"color: #ff79c6;\">&lt;</span><span style=\"color: #bd93f9;\">int</span><span style=\"color: #ff79c6;\">&gt;</span>&amp; <span style=\"color: #ffc9e8;\">nums</span>, <span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">k</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">n</span> = <span style=\"color: #ff79c6;\">(</span><span style=\"color: #bd93f9;\">int</span><span style=\"color: #ff79c6;\">)</span> nums.size<span style=\"color: #ff79c6;\">()</span>;\n  <span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">sum</span> = 0, <span style=\"color: #ffc9e8;\">ans</span> = 0;\n  <span style=\"color: #bd93f9;\">vector</span> <span style=\"color: #ff79c6;\">&lt;</span><span style=\"color: #bd93f9;\">int</span><span style=\"color: #ff79c6;\">&gt;</span> <span style=\"color: #ffc9e8;\">rem</span><span style=\"color: #ff79c6;\">(</span>k, 0<span style=\"color: #ff79c6;\">)</span>;\n  rem<span style=\"color: #ff79c6;\">[</span>0<span style=\"color: #ff79c6;\">]</span> = 1;\n  <span style=\"color: #ff79c6;\">for</span> <span style=\"color: #ff79c6;\">(</span><span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">i</span> = 0; i &lt; n; i++<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">{</span>\n    sum = <span style=\"color: #50fa7b;\">(</span>sum + nums<span style=\"color: #bd93f9;\">[</span>i<span style=\"color: #bd93f9;\">]</span><span style=\"color: #50fa7b;\">)</span> % k;\n    sum = <span style=\"color: #50fa7b;\">(</span>sum + k<span style=\"color: #50fa7b;\">)</span> % k;            <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">for ensuring positive reminder</span>\n    ans += rem<span style=\"color: #50fa7b;\">[</span>sum<span style=\"color: #50fa7b;\">]</span>;\n    rem<span style=\"color: #50fa7b;\">[</span>sum<span style=\"color: #50fa7b;\">]</span>++;\n  <span style=\"color: #ff79c6;\">}</span>\n  <span style=\"color: #ff79c6;\">return</span> ans;\n<span style=\"color: #61bfff;\">}</span>\n\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orge253884\">\n<h2 id=\"orge253884\">Repeat And Missing Number</h2>\n<div class=\"outline-text-2\" id=\"text-orge253884\">\n<p>\nOne best way is to use the input array and negate the position for which element is found.\nIf a position is already negative, means a repeated element. If position is still positive means missing element.\n</p>\n<p>\nAlternative way is get xor of elements from\ngiven array    : <code>{1, 2, .. . . .x, x ... ...n}</code>   / where y is missing and x appearing twice\nfrom serquecnce: <code>{1, 2, ... ....x..y........n}</code>   / all elements from 1 … n\nObservation is: From above set all elements appear twice except x and y.\nXoring all elements from sets will lead to <code>xor1 = x^y</code> value, from which using the first set bit = <code>xor1 &amp; ~~(xor1 - 1)</code>\nSo idea is to funnel above set of elements into two groups using above set beat and, xoring the elements of each group will lead to answer.\n</p>\n<p>\n<b>Note: Adding -1 to a number flips the bits of a number starting from right most set bit</b>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org6162110\">\n<h2 id=\"org6162110\">Google Interview Questions</h2>\n<div class=\"outline-text-2\" id=\"text-org6162110\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-org1c2de1d\">\n<h3 id=\"org1c2de1d\">Maximise Gifts</h3>\n<div class=\"outline-text-3\" id=\"text-org1c2de1d\">\n<p>\nUncle is planning to give gifts to his nephew. He wants to give maximum number of gifts. He is given the days when gift shop is open and cost of a gift on that day. Tommorow is day-1. Everyday he saves only 1 rupees. Find the maximum number of gifts he can purchase.\n</p>\n<p>\nSample Input: array of pairs [i,j] where i=i-th day, j-cost of gift\n<code>[[1,2],[4,3],[5,5],[6,1]]</code>\n</p>\n<p>\nHint - Use <code>Dyanamic Programming</code>\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org939852b\">\n<h3 id=\"org939852b\">Rooms with most visits</h3>\n<div class=\"outline-text-3\" id=\"text-org939852b\">\n<p>\nGIven appointments of customer in the form of array of [start, duration] and k rooms marked from 1, 2.. upto k, Find the room which had most visits. The customer will be alloted first free room with lower mark. If all rooms are occupied customers have to wait and will be served as First Come First Serve basis.\n</p>\n<p>\nHint - Use <code>priority_queue</code>\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org182bbf4\">\n<h3 id=\"org182bbf4\">Misplaced Char</h3>\n<div class=\"outline-text-3\" id=\"text-org182bbf4\">\n<p>\nGiven a string return the index of a char which is not in alphabetical order of its previous char. i.e Check if the string has chars in the same order as alphabetical order. If a character is misplaced from this order return its index.\n</p>\n<p>\nFollow up question\nFind the minimum misplaced chars from string\nHint - Find <code>Longest Increasing Subsequence</code>, return <code>len - lis</code>\n</p>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/cp-problem-setting",
		"heading_ids": [
			"org8997d8f",
			"orgea8cc99",
			"org005eb3d",
			"org747101a",
			"orge253884",
			"org6162110",
			"org1c2de1d",
			"org939852b",
			"org182bbf4"
		]
	},
	{
		"title": "mongo-tutorial",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org7c4b23a\">References</a></li>\n<li><a href=\"#org47ae84e\">Queries</a>\n<ul>\n<li><a href=\"#org3e56ee6\">Comparison query operators</a></li>\n<li><a href=\"#orgedfecab\"><code>CRUD</code> Oerations with movies data</a>\n<ul>\n<li><a href=\"#orgd73da63\">Insert movie details into collection <code>movies</code></a></li>\n<li><a href=\"#org0cf6874\">Find movies by Christopher Nolan</a></li>\n<li><a href=\"#org77d00f6\">Find Movies before 2000</a></li>\n<li><a href=\"#org40b2c4f\">Find Movies with more than 100 awards</a></li>\n<li><a href=\"#org397a493\">Find Project fields</a></li>\n<li><a href=\"#org01c3bf9\">Update record</a></li>\n<li><a href=\"#org7e5ed2d\">Delete record</a></li>\n</ul>\n</li>\n<li><a href=\"#org402d6ee\"><code>CRUD</code> Operations on inventory data</a>\n<ul>\n<li><a href=\"#org060813d\">Find inventory item with status 'A' or 'B'</a></li>\n<li><a href=\"#org17ce6c6\">Find items with either status='A' or qty less than 30</a></li>\n<li><a href=\"#org7c6dc9d\">Find in nested document</a></li>\n<li><a href=\"#org3c106e3\">Query an array</a></li>\n</ul>\n</li>\n<li><a href=\"#org2aa5120\">Aggregate Data (<code>$group</code>)</a></li>\n</ul>\n</li>\n<li><a href=\"#org008dfb1\">Aggregation Operations</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org7c4b23a\">\n<h2 id=\"org7c4b23a\">References</h2>\n<div class=\"outline-text-2\" id=\"text-org7c4b23a\">\n<ul class=\"org-ul\">\n<li><a href=\"https://www.mongodb.com/docs/manual/tutorial/getting-started/\">Offical Getting Started</a></li>\n<li><a href=\"https://www.mongodb.com/docs/\">Official Documentation</a></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org47ae84e\">\n<h2 id=\"org47ae84e\">Queries</h2>\n<div class=\"outline-text-2\" id=\"text-org47ae84e\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-org3e56ee6\">\n<h3 id=\"org3e56ee6\">Comparison query operators</h3>\n<div class=\"outline-text-3\" id=\"text-org3e56ee6\">\n<ul class=\"org-ul\">\n<li><code>$eq</code> - Matches values that are equal to specified value</li>\n<li><code>$ne</code> - Matches all values that are not equal to a specified value.</li>\n<li><code>$gt</code> - Matches values that are greater than specified value</li>\n<li><code>$gte</code> - Matches values that are greater than or equal to a specified value.</li>\n<li><code>$lt</code> - Matches values that are less than a specified value.</li>\n<li><code>$lte</code> - Matches values that are less than or equal to a specified value.</li>\n<li><code>$in</code> - Matches any of the values specified in an array.</li>\n<li><code>$nin</code> - Matches none of the values specified in an array.</li>\n</ul>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgedfecab\">\n<h3 id=\"orgedfecab\"><code>CRUD</code> Oerations with movies data</h3>\n<div class=\"outline-text-3\" id=\"text-orgedfecab\">\n</div>\n<div class=\"outline-4\" id=\"outline-container-orgd73da63\">\n<h4 id=\"orgd73da63\">Insert movie details into collection <code>movies</code></h4>\n<div class=\"outline-text-4\" id=\"text-orgd73da63\">\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.movies.insertMany<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">[</span>\n    <span style=\"color: #50fa7b;\">{</span>\n        title: <span style=\"color: #f1fa8c;\">'Titanic'</span>,\n        year: 1997,\n        genres: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Drama'</span>, <span style=\"color: #f1fa8c;\">'Romance'</span> <span style=\"color: #bd93f9;\">]</span>,\n        rated: <span style=\"color: #f1fa8c;\">'PG-13'</span>,\n        languages: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'English'</span>, <span style=\"color: #f1fa8c;\">'French'</span>, <span style=\"color: #f1fa8c;\">'German'</span>, <span style=\"color: #f1fa8c;\">'Swedish'</span>, <span style=\"color: #f1fa8c;\">'Italian'</span>, <span style=\"color: #f1fa8c;\">'Russian'</span> <span style=\"color: #bd93f9;\">]</span>,\n        released: ISODate<span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"1997-12-19T00:00:00.000Z\"</span><span style=\"color: #bd93f9;\">)</span>,\n        awards: <span style=\"color: #bd93f9;\">{</span>\n            wins: 127,\n            nominations: 63,\n            text: <span style=\"color: #f1fa8c;\">'Won 11 Oscars. Another 116 wins &amp; 63 nominations.'</span>\n        <span style=\"color: #bd93f9;\">}</span>,\n        cast: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Leonardo DiCaprio'</span>, <span style=\"color: #f1fa8c;\">'Kate Winslet'</span>, <span style=\"color: #f1fa8c;\">'Billy Zane'</span>, <span style=\"color: #f1fa8c;\">'Kathy Bates'</span> <span style=\"color: #bd93f9;\">]</span>,\n        directors: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'James Cameron'</span> <span style=\"color: #bd93f9;\">]</span>\n    <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #50fa7b;\">{</span>\n        title: <span style=\"color: #f1fa8c;\">'The Dark Knight'</span>,\n        year: 2008,\n        genres: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Action'</span>, <span style=\"color: #f1fa8c;\">'Crime'</span>, <span style=\"color: #f1fa8c;\">'Drama'</span> <span style=\"color: #bd93f9;\">]</span>,\n        rated: <span style=\"color: #f1fa8c;\">'PG-13'</span>,\n        languages: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'English'</span>, <span style=\"color: #f1fa8c;\">'Mandarin'</span> <span style=\"color: #bd93f9;\">]</span>,\n        released: ISODate<span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"2008-07-18T00:00:00.000Z\"</span><span style=\"color: #bd93f9;\">)</span>,\n        awards: <span style=\"color: #bd93f9;\">{</span>\n            wins: 144,\n            nominations: 106,\n            text: <span style=\"color: #f1fa8c;\">'Won 2 Oscars. Another 142 wins &amp; 106 nominations.'</span>\n        <span style=\"color: #bd93f9;\">}</span>,\n        cast: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Christian Bale'</span>, <span style=\"color: #f1fa8c;\">'Heath Ledger'</span>, <span style=\"color: #f1fa8c;\">'Aaron Eckhart'</span>, <span style=\"color: #f1fa8c;\">'Michael Caine'</span> <span style=\"color: #bd93f9;\">]</span>,\n        directors: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Christopher Nolan'</span> <span style=\"color: #bd93f9;\">]</span>\n    <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #50fa7b;\">{</span>\n        title: <span style=\"color: #f1fa8c;\">'Spirited Away'</span>,\n        year: 2001,\n        genres: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Animation'</span>, <span style=\"color: #f1fa8c;\">'Adventure'</span>, <span style=\"color: #f1fa8c;\">'Family'</span> <span style=\"color: #bd93f9;\">]</span>,\n        rated: <span style=\"color: #f1fa8c;\">'PG'</span>,\n        languages: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Japanese'</span> <span style=\"color: #bd93f9;\">]</span>,\n        released: ISODate<span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"2003-03-28T00:00:00.000Z\"</span><span style=\"color: #bd93f9;\">)</span>,\n        awards: <span style=\"color: #bd93f9;\">{</span>\n            wins: 52,\n            nominations: 22,\n            text: <span style=\"color: #f1fa8c;\">'Won 1 Oscar. Another 51 wins &amp; 22 nominations.'</span>\n        <span style=\"color: #bd93f9;\">}</span>,\n        cast: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Rumi Hiiragi'</span>, <span style=\"color: #f1fa8c;\">'Miyu Irino'</span>, <span style=\"color: #f1fa8c;\">'Mari Natsuki'</span>, <span style=\"color: #f1fa8c;\">'Takashi Naite'</span> <span style=\"color: #bd93f9;\">]</span>,\n        directors: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Hayao Miyazaki'</span> <span style=\"color: #bd93f9;\">]</span>\n    <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #50fa7b;\">{</span>\n        title: <span style=\"color: #f1fa8c;\">'Casablanca'</span>,\n        genres:cmdline  <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Drama'</span>, <span style=\"color: #f1fa8c;\">'Romance'</span>, <span style=\"color: #f1fa8c;\">'War'</span> <span style=\"color: #bd93f9;\">]</span>,\n        rated: <span style=\"color: #f1fa8c;\">'PG'</span>,\n        cast: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Humphrey Bogart'</span>, <span style=\"color: #f1fa8c;\">'Ingrid Bergman'</span>, <span style=\"color: #f1fa8c;\">'Paul Henreid'</span>, <span style=\"color: #f1fa8c;\">'Claude Rains'</span> <span style=\"color: #bd93f9;\">]</span>,\n        languages: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'English'</span>, <span style=\"color: #f1fa8c;\">'French'</span>, <span style=\"color: #f1fa8c;\">'German'</span>, <span style=\"color: #f1fa8c;\">'Italian'</span> <span style=\"color: #bd93f9;\">]</span>,\n        released: ISODate<span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"1943-01-23T00:00:00.000Z\"</span><span style=\"color: #bd93f9;\">)</span>,\n\n        directors: <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">'Michael Curtiz'</span> <span style=\"color: #bd93f9;\">]</span>,\n        awards: <span style=\"color: #bd93f9;\">{</span>\n            wins: 9,\n            nominations: 6,\n            text: <span style=\"color: #f1fa8c;\">'Won 3 Oscars. Another 6 wins &amp; 6 nominations.'</span>\n        <span style=\"color: #bd93f9;\">}</span>,\n        lastupdated: <span style=\"color: #f1fa8c;\">'2015-09-04 00:22:54.600000000'</span>,\n        year: 1942\n    <span style=\"color: #50fa7b;\">}</span>\n<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org0cf6874\">\n<h4 id=\"org0cf6874\">Find movies by Christopher Nolan</h4>\n<div class=\"outline-text-4\" id=\"text-org0cf6874\">\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.movies.find<span style=\"color: #61bfff;\">(</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">filter</span>\n    <span style=\"color: #ff79c6;\">{</span>\n        <span style=\"color: #f1fa8c;\">\"directors\"</span> : <span style=\"color: #f1fa8c;\">\"Christopher Nolan\"</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org77d00f6\">\n<h4 id=\"org77d00f6\">Find Movies before 2000</h4>\n<div class=\"outline-text-4\" id=\"text-org77d00f6\">\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.movies.find<span style=\"color: #61bfff;\">(</span>\n    <span style=\"color: #ff79c6;\">{</span>\n        <span style=\"color: #f1fa8c;\">\"released\"</span> : <span style=\"color: #50fa7b;\">{</span>\n            $lt : ISODate<span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"2000-01-01\"</span><span style=\"color: #bd93f9;\">)</span>\n        <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org40b2c4f\">\n<h4 id=\"org40b2c4f\">Find Movies with more than 100 awards</h4>\n<div class=\"outline-text-4\" id=\"text-org40b2c4f\">\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.movies.find<span style=\"color: #61bfff;\">(</span>\n    <span style=\"color: #ff79c6;\">{</span>\n        <span style=\"color: #f1fa8c;\">\"awards.wins\"</span> : <span style=\"color: #50fa7b;\">{</span>\n            $gt : 100\n        <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">)</span>.limit<span style=\"color: #61bfff;\">(</span>2<span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org397a493\">\n<h4 id=\"org397a493\">Find Project fields</h4>\n<div class=\"outline-text-4\" id=\"text-org397a493\">\n<p>\n<code>0</code> - exclude\n<code>1</code> - include\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.movies.find<span style=\"color: #61bfff;\">(</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">filter</span>\n    <span style=\"color: #ff79c6;\">{</span>\n        <span style=\"color: #f1fa8c;\">\"awards.wins\"</span> : <span style=\"color: #50fa7b;\">{</span>\n            $gt : 100\n        <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #ff79c6;\">}</span>,\n     <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">project fields</span>\n    <span style=\"color: #ff79c6;\">{</span>\n        <span style=\"color: #f1fa8c;\">\"_id\"</span> : 0,\n        <span style=\"color: #f1fa8c;\">\"title\"</span> : 1,\n        <span style=\"color: #f1fa8c;\">\"year\"</span> : 1,\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org01c3bf9\">\n<h4 id=\"org01c3bf9\">Update record</h4>\n<div class=\"outline-text-4\" id=\"text-org01c3bf9\">\n<p>\n<code>updateOne</code> - Updates one record \n<code>updateMany</code> - Updates many records matching the filter\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.movies.updateOne<span style=\"color: #61bfff;\">(</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">filter</span>\n    <span style=\"color: #ff79c6;\">{</span> <span style=\"color: #f1fa8c;\">\"title\"</span> : <span style=\"color: #f1fa8c;\">\"Titanic\"</span> <span style=\"color: #ff79c6;\">}</span>,\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">update action</span>\n    <span style=\"color: #ff79c6;\">{</span>\n        $set : <span style=\"color: #50fa7b;\">{</span> <span style=\"color: #f1fa8c;\">\"year\"</span> : 2000 <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org7e5ed2d\">\n<h4 id=\"org7e5ed2d\">Delete record</h4>\n<div class=\"outline-text-4\" id=\"text-org7e5ed2d\">\n<p>\n<code>deleteOne</code> - deletes one record\n<code>deleteMany</code> - deletes all records matching the filter\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.movies.deleteMany<span style=\"color: #61bfff;\">(</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">filter</span>\n    <span style=\"color: #ff79c6;\">{</span>\n        <span style=\"color: #f1fa8c;\">\"genres\"</span> : <span style=\"color: #f1fa8c;\">\"Biography\"</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org402d6ee\">\n<h3 id=\"org402d6ee\"><code>CRUD</code> Operations on inventory data</h3>\n<div class=\"outline-text-3\" id=\"text-org402d6ee\">\n<p>\nInsert following inventory data\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.inventory.insertMany<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">[</span>\n    <span style=\"color: #50fa7b;\">{</span> item: <span style=\"color: #f1fa8c;\">\"journal\"</span>, qty: 25, tags: <span style=\"color: #bd93f9;\">[</span><span style=\"color: #f1fa8c;\">\"blank\"</span>, <span style=\"color: #f1fa8c;\">\"red\"</span><span style=\"color: #bd93f9;\">]</span>, size: <span style=\"color: #bd93f9;\">{</span> h: 14, w: 21, uom: <span style=\"color: #f1fa8c;\">\"cm\"</span> <span style=\"color: #bd93f9;\">}</span> <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #50fa7b;\">{</span> item: <span style=\"color: #f1fa8c;\">\"mat\"</span>, qty: 85, tags: <span style=\"color: #bd93f9;\">[</span><span style=\"color: #f1fa8c;\">\"gray\"</span><span style=\"color: #bd93f9;\">]</span>, size: <span style=\"color: #bd93f9;\">{</span> h: 27.9, w: 35.5, uom: <span style=\"color: #f1fa8c;\">\"cm\"</span> <span style=\"color: #bd93f9;\">}</span> <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #50fa7b;\">{</span> item: <span style=\"color: #f1fa8c;\">\"mousepad\"</span>, qty: 25, tags: <span style=\"color: #bd93f9;\">[</span><span style=\"color: #f1fa8c;\">\"gel\"</span>, <span style=\"color: #f1fa8c;\">\"blue\"</span><span style=\"color: #bd93f9;\">]</span>, size: <span style=\"color: #bd93f9;\">{</span> h: 19, w: 22.85, uom: <span style=\"color: #f1fa8c;\">\"cm\"</span> <span style=\"color: #bd93f9;\">}</span> <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #50fa7b;\">{</span> item: <span style=\"color: #f1fa8c;\">\"notebook\"</span>, qty: 50, size: <span style=\"color: #bd93f9;\">{</span> h: 8.5, w: 11, uom: <span style=\"color: #f1fa8c;\">\"in\"</span> <span style=\"color: #bd93f9;\">}</span>, status: <span style=\"color: #f1fa8c;\">\"A\"</span> <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #50fa7b;\">{</span> item: <span style=\"color: #f1fa8c;\">\"paper\"</span>, qty: 100, size: <span style=\"color: #bd93f9;\">{</span> h: 8.5, w: 11, uom: <span style=\"color: #f1fa8c;\">\"in\"</span> <span style=\"color: #bd93f9;\">}</span>, status: <span style=\"color: #f1fa8c;\">\"D\"</span> <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #50fa7b;\">{</span> item: <span style=\"color: #f1fa8c;\">\"planner\"</span>, qty: 75, size: <span style=\"color: #bd93f9;\">{</span> h: 22.85, w: 30, uom: <span style=\"color: #f1fa8c;\">\"cm\"</span> <span style=\"color: #bd93f9;\">}</span>, status: <span style=\"color: #f1fa8c;\">\"D\"</span> <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #50fa7b;\">{</span> item: <span style=\"color: #f1fa8c;\">\"postcard\"</span>, qty: 45, size: <span style=\"color: #bd93f9;\">{</span> h: 10, w: 15.25, uom: <span style=\"color: #f1fa8c;\">\"cm\"</span> <span style=\"color: #bd93f9;\">}</span>, status: <span style=\"color: #f1fa8c;\">\"A\"</span> <span style=\"color: #50fa7b;\">}</span>\n<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org060813d\">\n<h4 id=\"org060813d\">Find inventory item with status 'A' or 'B'</h4>\n<div class=\"outline-text-4\" id=\"text-org060813d\">\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.inventory.find<span style=\"color: #61bfff;\">(</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">filter</span>\n    <span style=\"color: #ff79c6;\">{</span>\n        status : <span style=\"color: #50fa7b;\">{</span>\n            $in : <span style=\"color: #bd93f9;\">[</span><span style=\"color: #f1fa8c;\">\"A\"</span>, <span style=\"color: #f1fa8c;\">\"B\"</span><span style=\"color: #bd93f9;\">]</span>\n        <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org17ce6c6\">\n<h4 id=\"org17ce6c6\">Find items with either status='A' or qty less than 30</h4>\n<div class=\"outline-text-4\" id=\"text-org17ce6c6\">\n<p>\n<code>$or</code> - filter data with or condition.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.inventory.find<span style=\"color: #61bfff;\">(</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">filter with or conditions</span>\n    <span style=\"color: #ff79c6;\">{</span>\n        $or: <span style=\"color: #50fa7b;\">[</span>\n            <span style=\"color: #bd93f9;\">{</span> status: <span style=\"color: #f1fa8c;\">\"A\"</span> <span style=\"color: #bd93f9;\">}</span>,\n            <span style=\"color: #bd93f9;\">{</span> qty: <span style=\"color: #0189cc;\">{</span> $lt: 30 <span style=\"color: #0189cc;\">}</span> <span style=\"color: #bd93f9;\">}</span>\n        <span style=\"color: #50fa7b;\">]</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">)</span>;\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org7c6dc9d\">\n<h4 id=\"org7c6dc9d\">Find in nested document</h4>\n<div class=\"outline-text-4\" id=\"text-org7c6dc9d\">\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">\ndb.inventory.find<span style=\"color: #61bfff;\">(</span> <span style=\"color: #ff79c6;\">{</span> size: <span style=\"color: #50fa7b;\">{</span> h: 14, w: 21, uom: <span style=\"color: #f1fa8c;\">\"cm\"</span> <span style=\"color: #50fa7b;\">}</span> <span style=\"color: #ff79c6;\">}</span> <span style=\"color: #61bfff;\">)</span>;\n\ndb.inventory.find<span style=\"color: #61bfff;\">(</span> <span style=\"color: #ff79c6;\">{</span> <span style=\"color: #f1fa8c;\">\"size.uom\"</span>: <span style=\"color: #f1fa8c;\">\"in\"</span> <span style=\"color: #ff79c6;\">}</span> <span style=\"color: #61bfff;\">)</span>;\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-4\" id=\"outline-container-org3c106e3\">\n<h4 id=\"org3c106e3\">Query an array</h4>\n<div class=\"outline-text-4\" id=\"text-org3c106e3\">\n<p>\nMatch an array. The array has to match exactly with the document.\n<code>Order</code> of elements matter\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">\ndb.inventory.find<span style=\"color: #61bfff;\">(</span> <span style=\"color: #ff79c6;\">{</span> tags: <span style=\"color: #50fa7b;\">[</span><span style=\"color: #f1fa8c;\">\"red\"</span>, <span style=\"color: #f1fa8c;\">\"blank\"</span><span style=\"color: #50fa7b;\">]</span> <span style=\"color: #ff79c6;\">}</span> <span style=\"color: #61bfff;\">)</span>;\n\n</pre>\n</div>\n<p>\nIf <code>order</code> needn't be matched, then use following query. If subarray is matched, then also result is returned.\n<code>$all</code> - Match all the elements mentioned in any order.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.inventory.find<span style=\"color: #61bfff;\">(</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">filter</span>\n    <span style=\"color: #ff79c6;\">{</span>\n        tags : <span style=\"color: #50fa7b;\">{</span>\n            $all : <span style=\"color: #bd93f9;\">[</span> <span style=\"color: #f1fa8c;\">\"red\"</span>, <span style=\"color: #f1fa8c;\">\"blank\"</span><span style=\"color: #bd93f9;\">]</span>\n        <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org2aa5120\">\n<h3 id=\"org2aa5120\">Aggregate Data (<code>$group</code>)</h3>\n<div class=\"outline-text-3\" id=\"text-org2aa5120\">\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.movies.aggregate<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">[</span>\n  <span style=\"color: #50fa7b;\">{</span> $unwind: <span style=\"color: #f1fa8c;\">\"$genres\"</span> <span style=\"color: #50fa7b;\">}</span>,\n  <span style=\"color: #50fa7b;\">{</span>\n    $group: <span style=\"color: #bd93f9;\">{</span>\n      _id: <span style=\"color: #f1fa8c;\">\"$genres\"</span>,\n      genreCount: <span style=\"color: #0189cc;\">{</span> $count: <span style=\"color: #61bfff;\">{</span> <span style=\"color: #61bfff;\">}</span> <span style=\"color: #0189cc;\">}</span>\n    <span style=\"color: #bd93f9;\">}</span>\n  <span style=\"color: #50fa7b;\">}</span>,\n  <span style=\"color: #50fa7b;\">{</span> $sort: <span style=\"color: #bd93f9;\">{</span> <span style=\"color: #f1fa8c;\">\"genreCount\"</span>: -1 <span style=\"color: #bd93f9;\">}</span> <span style=\"color: #50fa7b;\">}</span>\n<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n<ul class=\"org-ul\">\n<li><code>$unwind</code> to output a document for each element in the genres array.</li>\n<li><code>$group</code> and the <code>$count</code> accumulator to count the number of occurrences of each genre. This value is stored in the <code>genreCount</code> field.</li>\n<li><code>$sort</code> to sort the resulting documents by the <code>genreCount</code> field in descending order.</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org008dfb1\">\n<h2 id=\"org008dfb1\">Aggregation Operations</h2>\n<div class=\"outline-text-2\" id=\"text-org008dfb1\">\n<p>\nTotal order quantity of medium size pizzas grouped by pizza name\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">\ndb.orders.aggregate<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">[</span>\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">Stage 1: Filter pizza order documents by pizza size</span>\n  <span style=\"color: #50fa7b;\">{</span>\n    $match: <span style=\"color: #bd93f9;\">{</span> size: <span style=\"color: #f1fa8c;\">\"medium\"</span> <span style=\"color: #bd93f9;\">}</span>\n  <span style=\"color: #50fa7b;\">}</span>,\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">Stage 2: Group remaining documents by pizza name and calculate total quantity</span>\n  <span style=\"color: #50fa7b;\">{</span>\n    $group: <span style=\"color: #bd93f9;\">{</span>_id: <span style=\"color: #f1fa8c;\">\"$name\"</span>, totalQuantity: <span style=\"color: #0189cc;\">{</span> $sum: <span style=\"color: #f1fa8c;\">\"$quantity\"</span> <span style=\"color: #0189cc;\">}</span> <span style=\"color: #bd93f9;\">}</span>\n  <span style=\"color: #50fa7b;\">}</span>\n<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">)</span>;\n\n</pre>\n</div>\n<p>\nThe following example calculates the total pizza order value and average order quantity between two dates:\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.orders.aggregate<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">[</span>\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">Stage 1: Filter pizza order documents by date range</span>\n  <span style=\"color: #50fa7b;\">{</span>\n    $match: <span style=\"color: #bd93f9;\">{</span>\n      date : <span style=\"color: #0189cc;\">{</span> $gte: <span style=\"color: #ff79c6;\">new</span> <span style=\"color: #bd93f9;\">ISODate</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #f1fa8c;\">\"2020-01-30\"</span><span style=\"color: #61bfff;\">)</span>, $lt: <span style=\"color: #ff79c6;\">new</span> <span style=\"color: #bd93f9;\">ISODate</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #f1fa8c;\">\"2022-01-30\"</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #0189cc;\">}</span>\n    <span style=\"color: #bd93f9;\">}</span>\n  <span style=\"color: #50fa7b;\">}</span>,\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">Stage 2: Group remaining documents by date and calculate results</span>\n  <span style=\"color: #50fa7b;\">{</span>\n    $group: <span style=\"color: #bd93f9;\">{</span>\n      _id: <span style=\"color: #0189cc;\">{</span> $dateToString: <span style=\"color: #61bfff;\">{</span> format: <span style=\"color: #f1fa8c;\">\"%Y-%m-%d\"</span>, date: <span style=\"color: #f1fa8c;\">\"$date\"</span><span style=\"color: #61bfff;\">}</span> <span style=\"color: #0189cc;\">}</span>,\n      totalOrderValue: <span style=\"color: #0189cc;\">{</span> $sum: <span style=\"color: #61bfff;\">{</span> $multiply: <span style=\"color: #ff79c6;\">[</span><span style=\"color: #f1fa8c;\">\"$price\"</span>, <span style=\"color: #f1fa8c;\">\"$quantity\"</span><span style=\"color: #ff79c6;\">]</span> <span style=\"color: #61bfff;\">}</span> <span style=\"color: #0189cc;\">}</span>,\n      averageOrderQuantity: <span style=\"color: #0189cc;\">{</span> $avg: <span style=\"color: #f1fa8c;\">\"$quantity\"</span> <span style=\"color: #0189cc;\">}</span>\n    <span style=\"color: #bd93f9;\">}</span>\n  <span style=\"color: #50fa7b;\">}</span>,\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">Stage 3: Sort documents by totalOrderValue in descending order</span>\n  <span style=\"color: #50fa7b;\">{</span>\n    $sort: <span style=\"color: #bd93f9;\">{</span>\n      totalOrderValue: -1\n    <span style=\"color: #bd93f9;\">}</span>\n  <span style=\"color: #50fa7b;\">}</span>\n<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/mongo-tutorial",
		"heading_ids": [
			"org7c4b23a",
			"org47ae84e",
			"org3e56ee6",
			"orgedfecab",
			"orgd73da63",
			"org0cf6874",
			"org77d00f6",
			"org40b2c4f",
			"org397a493",
			"org01c3bf9",
			"org7e5ed2d",
			"org402d6ee",
			"org060813d",
			"org17ce6c6",
			"org7c6dc9d",
			"org3c106e3",
			"org2aa5120",
			"org008dfb1"
		]
	},
	{
		"title": "react-freecodecamp-coding-addict",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org2e94045\">Introduction</a></li>\n<li><a href=\"#org5686394\">Basic skeleton of react project</a></li>\n<li><a href=\"#org69636a5\">Passing and Receiving props</a>\n<ul>\n<li><a href=\"#org76ad84a\">Destructuring</a></li>\n</ul>\n</li>\n<li><a href=\"#orgca23841\">Iterate over items and pass to component</a></li>\n<li><a href=\"#orga2eea25\">Events in react</a></li>\n<li><a href=\"#orga6237a7\">Import and Export</a>\n<ul>\n<li><a href=\"#org1ebf36b\">Named export</a></li>\n<li><a href=\"#orgaf73005\">Default Export</a></li>\n</ul>\n</li>\n<li><a href=\"#orgecf66e2\">useState hook</a></li>\n<li><a href=\"#org5b35f4e\">Spread operator</a></li>\n<li><a href=\"#org6070944\">useEffect hook</a>\n<ul>\n<li><a href=\"#orga22d97c\">useEffect cleanup function</a></li>\n</ul>\n</li>\n<li><a href=\"#org220d4ef\">Conditional Rendering</a></li>\n<li><a href=\"#org2fcf91c\">Controlled input</a></li>\n<li><a href=\"#org1942273\">useRef hook</a></li>\n<li><a href=\"#orgb788727\">useReducer hook</a></li>\n<li><a href=\"#org6c779c5\">Prop Drilling</a></li>\n<li><a href=\"#org85311db\">useContext hook</a>\n<ul>\n<li><a href=\"#org752b81e\">Custom Hooks for custom useContext</a></li>\n</ul>\n</li>\n<li><a href=\"#org375b023\">Custom Hooks</a></li>\n<li><a href=\"#orgadb1ab5\">PropTypes</a></li>\n<li><a href=\"#org8fc8870\">React Router</a></li>\n<li><a href=\"#org9e9220b\">React.memo, useCallback, useMemo</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org2e94045\">\n<h2 id=\"org2e94045\">Introduction</h2>\n<div class=\"outline-text-2\" id=\"text-org2e94045\">\n<p>\nThe code blocks have <code>import React from 'react';</code> for the reason of code formatting in org-babel. \n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org5686394\">\n<h2 id=\"org5686394\">Basic skeleton of react project</h2>\n<div class=\"outline-text-2\" id=\"text-org5686394\">\n<ul class=\"org-ul\">\n<li>Create App by <code>npx create-react-app my-app</code></li>\n<li>Delete All the files inside <code>./src</code> except <code>index.js</code> which should contain following minimal code.</li>\n<li>Create <code>index.css</code> for styling</li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React from <span style=\"color: #f1fa8c;\">'react'</span>;\n<span style=\"color: #ff79c6;\">import</span> ReactDom from <span style=\"color: #f1fa8c;\">'react-dom'</span>;\n<span style=\"color: #ff79c6;\">import</span> <span style=\"color: #f1fa8c;\">'./index.css'</span>;\n\n<span style=\"color: #ff79c6;\">function</span> <span style=\"color: #50fa7b;\">BookList</span><span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">message</span> = <span style=\"color: #f1fa8c;\">'Hello World!!'</span>;\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n    <span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">React.Fragment</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">h1</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> </span><span style=\"color: #50fa7b;\">{</span>message<span style=\"color: #50fa7b;\">}</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">h1</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Book</span> <span style=\"color: #ffc9e8;\">author</span>=<span style=\"color: #f1fa8c;\">'Mathura Tudu'</span> <span style=\"color: #ffc9e8;\">price</span>=<span style=\"color: #bd93f9;\">{</span>123<span style=\"color: #bd93f9;\">}</span> /<span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">    </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">React.Fragment</span><span style=\"color: #50fa7b;\">&gt;</span>\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n\nReactDom.render<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">&lt;</span><span style=\"color: #50fa7b;\">BookList</span>/<span style=\"color: #ff79c6;\">&gt;</span>, document.getElementById<span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">'root'</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org69636a5\">\n<h2 id=\"org69636a5\">Passing and Receiving props</h2>\n<div class=\"outline-text-2\" id=\"text-org69636a5\">\n<p>\nPassing props, function reference can also be passed which can be called at receiving side.\ne.g closeModal after timeOut of 2 seconds, call at Modal component\n</p>\n<p>\n<code>&lt;Book author='Mathura Tudu' price={123} /&gt;</code>\nOR\n<code>&lt;Modal closeModal={closeModal} /&gt;</code> Here <code>closeModal</code> is a function.\n</p>\n<p>\nReceiving props\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">Book</span> = <span style=\"color: #61bfff;\">(</span>props<span style=\"color: #61bfff;\">)</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  author = props.author;\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n      &lt;h1&gt; Author name is <span style=\"color: #50fa7b;\">{</span>author<span style=\"color: #50fa7b;\">}</span> &lt;/h1&gt;\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>;\n</pre>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org76ad84a\">\n<h3 id=\"org76ad84a\">Destructuring</h3>\n<div class=\"outline-text-3\" id=\"text-org76ad84a\">\n<p>\nThe reciever component can destructure the passed props as follows\n<code>const { author, price } = props;</code>\nor destructuring can happen at params as follows.\n<code>children</code> props is passed to props.children, which also can be destructured as follows.\nChildren props are passed as <code>&lt;Book author='Author name'&gt; &lt;children&gt; Hello There &lt;/children&gt; &lt;/Book&gt;</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">Book</span> = <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">{</span> author, price, children <span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n      &lt;h1&gt; Author name is <span style=\"color: #50fa7b;\">{</span>author<span style=\"color: #50fa7b;\">}</span> &lt;/h1&gt;\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>;\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgca23841\">\n<h2 id=\"orgca23841\">Iterate over items and pass to component</h2>\n<div class=\"outline-text-2\" id=\"text-orgca23841\">\n<p>\nEach child in a list should have unique key. Index also could be passed\nwhen map is like <code>books.map((book, index) =&gt; { return ( &lt;Book key={index} author={book} /&gt;); });</code>\nBut better pass some other unique id.\nNote : Spread operator <code>...books</code> will pass its individual fields. i.e it is same as passing author, price separately\nand not as book object.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React from <span style=\"color: #f1fa8c;\">'react'</span>;\n<span style=\"color: #ff79c6;\">function</span> <span style=\"color: #50fa7b;\">BookList</span><span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">books</span> = <span style=\"color: #ff79c6;\">[</span><span style=\"color: #50fa7b;\">{</span>author: <span style=\"color: #f1fa8c;\">'a'</span>, id: 1<span style=\"color: #50fa7b;\">}</span>, <span style=\"color: #50fa7b;\">{</span>author: <span style=\"color: #f1fa8c;\">'b'</span>, id: 2<span style=\"color: #50fa7b;\">}</span><span style=\"color: #ff79c6;\">]</span>;\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n    <span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">section</span> <span style=\"color: #ffc9e8;\">className</span>=<span style=\"color: #f1fa8c;\">'booklist'</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">{</span>\n        books.map<span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">(</span>book<span style=\"color: #0189cc;\">)</span> =&gt; <span style=\"color: #0189cc;\">{</span>\n          <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #61bfff;\">(</span>\n            <span style=\"color: #ff79c6;\">&lt;</span><span style=\"color: #50fa7b;\">Book</span> <span style=\"color: #ffc9e8;\">key</span>=<span style=\"color: #50fa7b;\">{</span>book.id<span style=\"color: #50fa7b;\">}</span> <span style=\"color: #50fa7b;\">{</span>...book<span style=\"color: #50fa7b;\">}</span> /<span style=\"color: #ff79c6;\">&gt;</span>\n          <span style=\"color: #61bfff;\">)</span>;\n        <span style=\"color: #0189cc;\">}</span><span style=\"color: #bd93f9;\">)</span>\n      <span style=\"color: #50fa7b;\">}</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">    </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">section</span><span style=\"color: #50fa7b;\">&gt;</span>\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\n<code>filter</code> is another such method for filtering out the items of interest.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\">\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">removeId</span> = 1;\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">person with removeId will not be present in newPeople.</span>\n<span style=\"color: #ff79c6;\">let</span> <span style=\"color: #ffc9e8;\">newPeople</span> = people.filter<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>person<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n  <span style=\"color: #ff79c6;\">return</span> person.id != removeId;\n<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>;\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orga2eea25\">\n<h2 id=\"orga2eea25\">Events in react</h2>\n<div class=\"outline-text-2\" id=\"text-orga2eea25\">\n<p>\nAll the react events can be found <a href=\"https://reactjs.org/docs/events.html\">Here</a>\n<code>onClick</code> is commonly used event attached to button as follows\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React from <span style=\"color: #f1fa8c;\">'react'</span>;\n<span style=\"color: #ff79c6;\">function</span> <span style=\"color: #50fa7b;\">FunctionalComponent</span><span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">clickHandler</span> = <span style=\"color: #ff79c6;\">(</span>event<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">{</span>\n    console.log<span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">'handle on click'</span><span style=\"color: #50fa7b;\">)</span>;\n  <span style=\"color: #ff79c6;\">}</span>;\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">handlerWithParam</span> = <span style=\"color: #ff79c6;\">(</span>author<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n    console.log<span style=\"color: #50fa7b;\">(</span>author<span style=\"color: #50fa7b;\">)</span>;\n  <span style=\"color: #ff79c6;\">}</span>;\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n    <span style=\"color: #50fa7b;\">&lt;&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">button</span> <span style=\"color: #ffc9e8;\">type</span>=<span style=\"color: #f1fa8c;\">'button'</span> <span style=\"color: #ffc9e8;\">onClick</span>=<span style=\"color: #bd93f9;\">{</span>clickHandler<span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\">simple button </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">button</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\">                       // passing function reference for fn with empty params, or just event is passed</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">button</span> <span style=\"color: #ffc9e8;\">type</span>=<span style=\"color: #f1fa8c;\">'button'</span> <span style=\"color: #ffc9e8;\">onClick</span>=<span style=\"color: #bd93f9;\">{</span><span style=\"color: #0189cc;\">()</span> =&gt; handlerWithParam<span style=\"color: #0189cc;\">(</span>author<span style=\"color: #0189cc;\">)</span> <span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\">complex onclick </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">button</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\">  // use arrow function</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">h1</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> onClick=</span><span style=\"color: #50fa7b;\">{</span> <span style=\"color: #bd93f9;\">()</span> =&gt; <span style=\"color: #bd93f9;\">{</span> console.log<span style=\"color: #0189cc;\">(</span><span style=\"color: #f1fa8c;\">'handle onclick'</span><span style=\"color: #0189cc;\">)</span>; <span style=\"color: #bd93f9;\">}</span> <span style=\"color: #50fa7b;\">}</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">h1</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">    </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">&gt;</span>\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orga6237a7\">\n<h2 id=\"orga6237a7\">Import and Export</h2>\n<div class=\"outline-text-2\" id=\"text-orga6237a7\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-org1ebf36b\">\n<h3 id=\"org1ebf36b\">Named export</h3>\n<div class=\"outline-text-3\" id=\"text-org1ebf36b\">\n<p>\nNamed export is as follows. Multiple exports are allowed per file.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">export</span> <span style=\"color: #ff79c6;\">function</span> FuncName<span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">function body</span>\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\nIt can be imported as follows. The name has to match exactly\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\">\n<span style=\"color: #ff79c6;\">import</span> <span style=\"color: #61bfff;\">{</span> FuncName <span style=\"color: #61bfff;\">}</span> from <span style=\"color: #f1fa8c;\">'./FuncName'</span>;\n<span style=\"color: #ff79c6;\">import</span> <span style=\"color: #61bfff;\">{</span> books<span style=\"color: #61bfff;\">}</span> from <span style=\"color: #f1fa8c;\">'./books'</span>;\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgaf73005\">\n<h3 id=\"orgaf73005\">Default Export</h3>\n<div class=\"outline-text-3\" id=\"text-orgaf73005\">\n<p>\nDefault export is as follows. Only one default per file is allowed.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">Component</span> = <span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">function body</span>\n<span style=\"color: #61bfff;\">}</span>;\n<span style=\"color: #ff79c6;\">export</span> <span style=\"color: #ff79c6;\">default</span> Component;\n</pre>\n</div>\n<p>\nWhich can be imported as follows. The imported name be given any name unlike named export.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\">\n<span style=\"color: #ff79c6;\">import</span> AnyName from <span style=\"color: #f1fa8c;\">'./Book'</span>;\n\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgecf66e2\">\n<h2 id=\"orgecf66e2\">useState hook</h2>\n<div class=\"outline-text-2\" id=\"text-orgecf66e2\">\n<p>\n<code>useState</code> is a function which returns an array of value and function controlling the value.\nuse array destructuring to store into conventional variables as follows at top level.\n<code>const [text, setText] = useState('sample title');</code>  OR we can use <code>React.useState('some title');</code>\n</p>\n<p>\nuseState rerenders the component when value is changed. Note that <code>useState</code> it is a named export as follows.\n<code>import React, { useState } from 'react';</code>\n</p>\n<p>\nSometime it is important to make the update only based on previous state. Check following snippet\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">onclickIncrease</span> = <span style=\"color: #61bfff;\">()</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  setTimeout<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">()</span> =&gt; <span style=\"color: #50fa7b;\">{</span>\n    setValue<span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">(</span>prevValue<span style=\"color: #0189cc;\">)</span> =&gt; <span style=\"color: #0189cc;\">{</span> <span style=\"color: #ff79c6;\">return</span> prevValue + 1; <span style=\"color: #0189cc;\">}</span><span style=\"color: #bd93f9;\">)</span>;\n  <span style=\"color: #50fa7b;\">}</span>, 2000<span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org5b35f4e\">\n<h2 id=\"org5b35f4e\">Spread operator</h2>\n<div class=\"outline-text-2\" id=\"text-org5b35f4e\">\n<p>\nFor copying the object we needn't copy individual fields which will be done by <code>spread operator</code>\ni.e if <code>person = { name: \"Mathura\", age: 25, email: \"mathura.dakshana15@gmail.com\"}</code>\nwe can update the email and copy it into new variable as follows\n<code>newPerson = { ...person, email: \"new-email@gmail.com\" }</code>\n</p>\n<p>\nAppend to array can be done as follows\n<code>setPeople([...people, newPerson]);</code>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org6070944\">\n<h2 id=\"org6070944\">useEffect hook</h2>\n<div class=\"outline-text-2\" id=\"text-org6070944\">\n<p>\nBy default runs after every re-render, even re-render can caused by <code>useState</code>\nJust like <code>useState</code> this is also a named import.\n<code>useEffect</code> is heavily used to fetch data from API when component is rendered initially.\nCheck javascript-tutorial to see how <code>fetch</code> is used to fetch data from API.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React from <span style=\"color: #f1fa8c;\">'react'</span>;\nuseEffect<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">()</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n  console.log<span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">'what is happening'</span><span style=\"color: #50fa7b;\">)</span>;\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">Api call or any other clean up</span>\n<span style=\"color: #ff79c6;\">}</span>, <span style=\"color: #ff79c6;\">[]</span><span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n<p>\nSecond param, i.e list of dependencies can be passed to <code>useEffect</code>, so that it'll be triggered only when those dependency value changes.\n<code>[]</code> - useEffect is invoked on first render.\n<code>[value]</code> - useEffect will run when value changes.\n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orga22d97c\">\n<h3 id=\"orga22d97c\">useEffect cleanup function</h3>\n<div class=\"outline-text-3\" id=\"text-orga22d97c\">\n<p>\nReturn clean up function, which will be called before next re-render.\nFollowing snippet will prevent attaching the multiple instances of eventListener.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">checkSize</span> = <span style=\"color: #61bfff;\">()</span> =&gt; <span style=\"color: #61bfff;\">{</span> console.log<span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">'window size'</span>, window.innerWidth<span style=\"color: #ff79c6;\">)</span>; <span style=\"color: #61bfff;\">}</span>;\nuseEffect<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">()</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n    window.addEventListener<span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">'resize'</span>, checkSize<span style=\"color: #50fa7b;\">)</span>;\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">Return clean up function, which will be called before next re-render</span>\n    <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #50fa7b;\">()</span> =&gt; <span style=\"color: #50fa7b;\">{</span>\n        window.removeEventListener<span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">'resize'</span>, checkSize<span style=\"color: #bd93f9;\">)</span>;\n    <span style=\"color: #50fa7b;\">}</span>;\n<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org220d4ef\">\n<h2 id=\"org220d4ef\">Conditional Rendering</h2>\n<div class=\"outline-text-2\" id=\"text-org220d4ef\">\n<p>\nFollowing expressions shows how inline conditional rendering reduces the codebase.\n<code>short-circuit</code> evaluation and <code>ternary</code> operator are used.\n</p>\n<p>\nfirst non-false value is returned from OR conditions e.g <code>text || 'hello'</code>. If text is not-empty it's value is returned, else 'hello' will be returned.\nlast non-false value is returned from AND conditions, considering former conditions are true, otherwise nothing happens.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React from <span style=\"color: #f1fa8c;\">'react'</span>;\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">Component</span> = <span style=\"color: #61bfff;\">()</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ff79c6;\">[</span> <span style=\"color: #ffc9e8;\">isLoading</span>, <span style=\"color: #ffc9e8;\">setIsLoading</span> <span style=\"color: #ff79c6;\">]</span> = useState<span style=\"color: #ff79c6;\">(</span><span style=\"color: #8be9fd;\">false</span><span style=\"color: #ff79c6;\">)</span>;\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n    <span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">div</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">h1</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> </span><span style=\"color: #50fa7b;\">{</span>isLoading || <span style=\"color: #f1fa8c;\">'Hello'</span> <span style=\"color: #50fa7b;\">}</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">h1</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">{</span>isLoading &amp;&amp; <span style=\"color: #bd93f9;\">&lt;</span><span style=\"color: #50fa7b;\">h1</span><span style=\"color: #bd93f9;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> 'Hello' </span><span style=\"color: #bd93f9;\">&lt;</span>/<span style=\"color: #50fa7b;\">h1</span><span style=\"color: #bd93f9;\">&gt;</span> <span style=\"color: #50fa7b;\">}</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">div</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> </span><span style=\"color: #50fa7b;\">{</span>isError ? <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">&lt;</span><span style=\"color: #50fa7b;\">h1</span><span style=\"color: #0189cc;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> There is error </span><span style=\"color: #0189cc;\">&lt;</span>/<span style=\"color: #50fa7b;\">h1</span><span style=\"color: #0189cc;\">&gt;</span><span style=\"color: #bd93f9; background-color: #282a36;\">)</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> : </span><span style=\"color: #bd93f9; background-color: #282a36;\">(</span><span style=\"color: #0189cc;\">&lt;</span><span style=\"color: #50fa7b;\">h2</span><span style=\"color: #0189cc;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> There is no error </span><span style=\"color: #0189cc;\">&lt;</span>/<span style=\"color: #50fa7b;\">h2</span><span style=\"color: #0189cc;\">&gt;</span><span style=\"color: #bd93f9;\">)</span> <span style=\"color: #50fa7b;\">}</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">div</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">    </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">div</span><span style=\"color: #50fa7b;\">&gt;</span>\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org2fcf91c\">\n<h2 id=\"org2fcf91c\">Controlled input</h2>\n<div class=\"outline-text-2\" id=\"text-org2fcf91c\">\n<p>\nInput fields of form can be attached to the state variable as follows.\nWhile submitting we can direcly use state variables. Note <code>onChange</code> events can use wrapped to do some form validation.\nWe can do more validation during <code>handleSubmit</code> also.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React from <span style=\"color: #f1fa8c;\">'react'</span>;\n\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">ControlledInputs</span> = <span style=\"color: #61bfff;\">()</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ff79c6;\">[</span><span style=\"color: #ffc9e8;\">person</span>, <span style=\"color: #ffc9e8;\">setPerson</span><span style=\"color: #ff79c6;\">]</span> = useState<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">{</span>name: <span style=\"color: #f1fa8c;\">''</span>, email: <span style=\"color: #f1fa8c;\">''</span><span style=\"color: #50fa7b;\">}</span><span style=\"color: #ff79c6;\">)</span>;\n\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">handleSubmit</span> = <span style=\"color: #ff79c6;\">(</span>e<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n    e.preventDefault<span style=\"color: #50fa7b;\">()</span>; <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">for preventing the form submit and refresh automatically</span>\n    console.log<span style=\"color: #50fa7b;\">(</span>person<span style=\"color: #50fa7b;\">)</span>; <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">use the state variable without reading from input fields.</span>\n  <span style=\"color: #ff79c6;\">}</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">handleChange</span> = <span style=\"color: #ff79c6;\">(</span>e<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">name</span> = e.target.name;\n    <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">value</span> = e.target.value;\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">now based on name set/validate the value</span>\n    setPerson<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">{</span> ...person, <span style=\"color: #0189cc;\">[</span>name<span style=\"color: #0189cc;\">]</span>: value <span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">)</span>;  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">using dynamic object properties.</span>\n  <span style=\"color: #ff79c6;\">}</span>\n\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n    <span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">React.Fragment</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">article</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">form</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">          </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">div</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">            </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">label</span> <span style=\"color: #ffc9e8;\">htmlFor</span>=<span style=\"color: #f1fa8c;\">\"name\"</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\">Name: </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">label</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">            </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">input</span>\n              <span style=\"color: #ffc9e8;\">type</span>=<span style=\"color: #f1fa8c;\">'text'</span>\n              <span style=\"color: #ffc9e8;\">id</span>=<span style=\"color: #f1fa8c;\">'name'</span>\n              <span style=\"color: #ffc9e8;\">name</span>=<span style=\"color: #f1fa8c;\">'name'</span>\n              <span style=\"color: #ffc9e8;\">value</span>=<span style=\"color: #bd93f9;\">{</span>person.name<span style=\"color: #bd93f9;\">}</span>\n              <span style=\"color: #ffc9e8;\">onChange</span>=<span style=\"color: #bd93f9;\">{</span>handleChange<span style=\"color: #bd93f9;\">}</span>\n            /<span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">          </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">div</span><span style=\"color: #50fa7b;\">&gt;</span>\n\n<span style=\"color: #f8f8f2; background-color: #282a36;\">          </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">div</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">            </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">label</span> <span style=\"color: #ffc9e8;\">htmlFor</span>=<span style=\"color: #f1fa8c;\">\"email\"</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\">Email: </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">label</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">            </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">input</span>\n              <span style=\"color: #ffc9e8;\">type</span>=<span style=\"color: #f1fa8c;\">'text'</span>\n              <span style=\"color: #ffc9e8;\">id</span>=<span style=\"color: #f1fa8c;\">'email'</span>\n              <span style=\"color: #ffc9e8;\">name</span>=<span style=\"color: #f1fa8c;\">'email'</span>\n              <span style=\"color: #ffc9e8;\">value</span>=<span style=\"color: #bd93f9;\">{</span>person.email<span style=\"color: #bd93f9;\">}</span>\n              <span style=\"color: #ffc9e8;\">onChange</span>=<span style=\"color: #bd93f9;\">{</span>handleChange<span style=\"color: #bd93f9;\">}</span>\n            /<span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">          </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">div</span><span style=\"color: #50fa7b;\">&gt;</span>\n\n<span style=\"color: #f8f8f2; background-color: #282a36;\">          </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">button</span> <span style=\"color: #ffc9e8;\">type</span>=<span style=\"color: #f1fa8c;\">'submit'</span> <span style=\"color: #ffc9e8;\">onClick</span>=<span style=\"color: #bd93f9;\">{</span>handleSubmit<span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> submit </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">submit</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">form</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">article</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">    </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">React.Fragment</span><span style=\"color: #50fa7b;\">&gt;</span>\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org1942273\">\n<h2 id=\"org1942273\">useRef hook</h2>\n<div class=\"outline-text-2\" id=\"text-org1942273\">\n<p>\nFor handling uncontrolled input\n</p>\n<ul class=\"org-ul\">\n<li>preserves value</li>\n<li>doesn't cause <code>re-render</code>, hence we can safely use <code>useEffect</code> without dependency array.</li>\n<li>target DOM node/elements</li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React from <span style=\"color: #f1fa8c;\">'react'</span>;\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">UserRefBasics</span> = <span style=\"color: #61bfff;\">()</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">refContainer</span> = useRef<span style=\"color: #ff79c6;\">(</span><span style=\"color: #8be9fd;\">null</span><span style=\"color: #ff79c6;\">)</span>;\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">handleSubmit</span> = <span style=\"color: #ff79c6;\">(</span>e<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n    e.preventDefault<span style=\"color: #50fa7b;\">()</span>;\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">access the targetted element, which can be h1, div, or input field</span>\n    console.log<span style=\"color: #50fa7b;\">(</span>refContainer.current.value<span style=\"color: #50fa7b;\">)</span>;\n  <span style=\"color: #ff79c6;\">}</span>\n\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n    <span style=\"color: #50fa7b;\">&lt;&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">form</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">input</span> <span style=\"color: #ffc9e8;\">type</span>=<span style=\"color: #f1fa8c;\">'text'</span> <span style=\"color: #ffc9e8;\">ref</span>=<span style=\"color: #bd93f9;\">{</span>refContainer<span style=\"color: #bd93f9;\">}</span> /<span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">button</span> <span style=\"color: #ffc9e8;\">type</span>=<span style=\"color: #f1fa8c;\">'submit'</span> <span style=\"color: #ffc9e8;\">onSubmit</span>=<span style=\"color: #bd93f9;\">{</span>handleSubmit<span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> submit </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">button</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">form</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">    </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">&gt;</span>\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgb788727\">\n<h2 id=\"orgb788727\">useReducer hook</h2>\n<div class=\"outline-text-2\" id=\"text-orgb788727\">\n<p>\nFor maintaining state effectively. The steps 1 and 2 can be moved to a separate file for better code formatting.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React, <span style=\"color: #61bfff;\">{</span> useState, useReducer <span style=\"color: #61bfff;\">}</span> from <span style=\"color: #f1fa8c;\">'react'</span>;\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">1. define the default state containing all state variables.</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">defaultState</span> = <span style=\"color: #61bfff;\">{</span>\n  people : <span style=\"color: #ff79c6;\">[]</span>,\n  isModalOpen: <span style=\"color: #8be9fd;\">false</span>,\n<span style=\"color: #61bfff;\">}</span>;\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">2. define reducer function, based on action type return new state by making use of payload passed.</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">reducer</span> = <span style=\"color: #61bfff;\">(</span>state, action<span style=\"color: #61bfff;\">)</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">if</span> <span style=\"color: #ff79c6;\">(</span>state.type == <span style=\"color: #f1fa8c;\">'ADD_PERSON'</span><span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">{</span>\n    newPeople = <span style=\"color: #50fa7b;\">[</span>...state.people, action.payload<span style=\"color: #50fa7b;\">]</span>;\n    <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #50fa7b;\">{</span>\n      ...state,\n      people: newPeople\n    <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #ff79c6;\">throw</span> <span style=\"color: #ff79c6;\">new</span> <span style=\"color: #bd93f9;\">Error</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">'no matching action found'</span><span style=\"color: #50fa7b;\">)</span>;\n  <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">UseReducerComponent</span> = <span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ff79c6;\">[</span><span style=\"color: #ffc9e8;\">name</span>, <span style=\"color: #ffc9e8;\">setName</span><span style=\"color: #ff79c6;\">]</span> = useState<span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">''</span><span style=\"color: #ff79c6;\">)</span>;  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">other small states can make use of useState</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ff79c6;\">[</span><span style=\"color: #ffc9e8;\">state</span>, <span style=\"color: #ffc9e8;\">dispatch</span><span style=\"color: #ff79c6;\">]</span> = useReducer<span style=\"color: #ff79c6;\">(</span>reducer, defaultState<span style=\"color: #ff79c6;\">)</span>;\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">addPerson</span> = <span style=\"color: #ff79c6;\">()</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">dispatch the action, the reducer will automatically maintain last state</span>\n    dispatch<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">{</span> type: <span style=\"color: #f1fa8c;\">'ADD_PERSON'</span>, peron: <span style=\"color: #0189cc;\">{</span>name: <span style=\"color: #f1fa8c;\">'Mathura'</span>, age: 23<span style=\"color: #0189cc;\">}</span><span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">)</span>;\n  <span style=\"color: #ff79c6;\">}</span>\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">rest of all code logic ...</span>\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org6c779c5\">\n<h2 id=\"org6c779c5\">Prop Drilling</h2>\n<div class=\"outline-text-2\" id=\"text-org6c779c5\">\n<p>\nWhen more number of components are developed and relationship between component increases, then\nwe'll find difficult to manage the state. Properties have to properly drilled down the components, and update\nmay have to be reflected in the parent component.\nImagine Component hierarchy <code>BaseComponent -&gt; ListPeople -&gt; SinglePerson</code>, Suppose BaseComponents have list of people, <code>removePerson</code> method.\nThese properties have to be passed down to children, sometimes mid-children don't even need these props.\n</p>\n<p>\nTo solve this complexity we have\n</p>\n<ul class=\"org-ul\">\n<li><code>context-api</code></li>\n<li><code>redux</code></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org85311db\">\n<h2 id=\"org85311db\">useContext hook</h2>\n<div class=\"outline-text-2\" id=\"text-org85311db\">\n<p>\nWrap the root or base component with context provider and pass the props which can be accessed by children.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React, <span style=\"color: #61bfff;\">{</span> useContext <span style=\"color: #61bfff;\">}</span> from <span style=\"color: #f1fa8c;\">'react'</span>;\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">PersonContext</span> = React.createContext<span style=\"color: #61bfff;\">()</span>;\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">1. Provider</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">RootComponent</span> = <span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">all code goes here ...</span>\n\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n    <span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">PersonContext.Provider</span> <span style=\"color: #ffc9e8;\">value</span>=<span style=\"color: #bd93f9;\">{</span> <span style=\"color: #0189cc;\">{</span>removePerson, person<span style=\"color: #0189cc;\">}</span> <span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\">    // pass any value, methods</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Children</span> /<span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">ListComponent</span> /<span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">    </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">PersonContext.Provider</span><span style=\"color: #50fa7b;\">&gt;</span>\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">2. Consumer - any children can now access those passed props</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">Children</span> = <span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ff79c6;\">{</span> person, removePerson <span style=\"color: #ff79c6;\">}</span> = useContext<span style=\"color: #ff79c6;\">(</span>PersonContext<span style=\"color: #ff79c6;\">)</span>;\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">use person and removePerson</span>\n<span style=\"color: #61bfff;\">}</span>\n\n</pre>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org752b81e\">\n<h3 id=\"org752b81e\">Custom Hooks for custom useContext</h3>\n<div class=\"outline-text-3\" id=\"text-org752b81e\">\n<p>\nWe can create a global context as custom hook. Use following logic in separate file. e.g <code>context.js</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React, <span style=\"color: #61bfff;\">{</span> useState, useContext <span style=\"color: #61bfff;\">}</span> from <span style=\"color: #f1fa8c;\">'react'</span>;\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">AppContext</span> = React.createContext<span style=\"color: #61bfff;\">()</span>;\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">AppProvider</span> = <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">{</span>children<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ff79c6;\">[</span><span style=\"color: #ffc9e8;\">isModalOpen</span>, <span style=\"color: #ffc9e8;\">setIsModalOpen</span><span style=\"color: #ff79c6;\">]</span> = useState<span style=\"color: #ff79c6;\">(</span><span style=\"color: #8be9fd;\">false</span><span style=\"color: #ff79c6;\">)</span>;  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">define as many states as needed.</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">openModal</span> = <span style=\"color: #ff79c6;\">()</span> =&gt; setIsModalOpen<span style=\"color: #ff79c6;\">(</span><span style=\"color: #8be9fd;\">true</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n    <span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">AppContext.Provider</span> <span style=\"color: #ffc9e8;\">value</span>=<span style=\"color: #bd93f9;\">{</span><span style=\"color: #0189cc;\">{</span> openModal <span style=\"color: #0189cc;\">}</span><span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">{</span>children<span style=\"color: #50fa7b;\">}</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">    </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">AppContext.Provider</span><span style=\"color: #50fa7b;\">&gt;</span>\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ff79c6;\">export</span> <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">useGlobalContext</span> = <span style=\"color: #61bfff;\">()</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">return</span> useContext<span style=\"color: #ff79c6;\">(</span>AppContext<span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>;\n<span style=\"color: #ff79c6;\">export</span> <span style=\"color: #61bfff;\">{</span> AppContext, AppProvider <span style=\"color: #61bfff;\">}</span>;\n</pre>\n</div>\n<p>\nImport <code>AppProvider</code> and wrap your app as <code>&lt;AppProvider&gt; &lt;App /&gt; &lt;/AppProvider&gt;</code>\nImport <code>useGlobalContext</code> and destructure the required props.\n</p>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org375b023\">\n<h2 id=\"org375b023\">Custom Hooks</h2>\n<div class=\"outline-text-2\" id=\"text-org375b023\">\n<p>\nFor re-using functionality. e.g Common function to fetch data from API call\nFollowing custom hook, call it <code>useFetch</code> does the job of fetching products or any fetch in general.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React, <span style=\"color: #61bfff;\">{</span> useState, useEffect <span style=\"color: #61bfff;\">}</span> from <span style=\"color: #f1fa8c;\">'react'</span>;\n\n<span style=\"color: #ff79c6;\">export</span> <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">useFetch</span> = <span style=\"color: #61bfff;\">(</span>url<span style=\"color: #61bfff;\">)</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ff79c6;\">[</span><span style=\"color: #ffc9e8;\">loading</span>, <span style=\"color: #ffc9e8;\">setLoading</span><span style=\"color: #ff79c6;\">]</span> = useState<span style=\"color: #ff79c6;\">(</span><span style=\"color: #8be9fd;\">true</span><span style=\"color: #ff79c6;\">)</span>;\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ff79c6;\">[</span><span style=\"color: #ffc9e8;\">products</span>, <span style=\"color: #ffc9e8;\">setProducts</span><span style=\"color: #ff79c6;\">]</span> = useState<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">[]</span><span style=\"color: #ff79c6;\">)</span>;\n\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">getProducts</span> = useCallback<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">()</span> =&gt; <span style=\"color: #50fa7b;\">{</span>\n    <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">response</span> = <span style=\"color: #ff79c6;\">await</span> fetch<span style=\"color: #bd93f9;\">(</span>url<span style=\"color: #bd93f9;\">)</span>;\n    <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">products</span> = <span style=\"color: #ff79c6;\">await</span> reponse.json<span style=\"color: #bd93f9;\">()</span>;\n    setProducts<span style=\"color: #bd93f9;\">(</span>products<span style=\"color: #bd93f9;\">)</span>;\n    setLoading<span style=\"color: #bd93f9;\">(</span><span style=\"color: #8be9fd;\">false</span><span style=\"color: #bd93f9;\">)</span>;\n  <span style=\"color: #50fa7b;\">}</span>, <span style=\"color: #50fa7b;\">[</span>url<span style=\"color: #50fa7b;\">]</span><span style=\"color: #ff79c6;\">)</span>;\n\n  useEffect<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">()</span> =&gt; <span style=\"color: #50fa7b;\">{</span>\n    getProducts<span style=\"color: #bd93f9;\">()</span>;\n  <span style=\"color: #50fa7b;\">}</span>, <span style=\"color: #50fa7b;\">[</span>url, getProducts<span style=\"color: #50fa7b;\">]</span><span style=\"color: #ff79c6;\">)</span>;\n\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">{</span>loading, products<span style=\"color: #ff79c6;\">}</span>;\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\nAbove custom hook can be used in other components as\n<code>const { loading, products } = useFetch(url);</code>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgadb1ab5\">\n<h2 id=\"orgadb1ab5\">PropTypes</h2>\n<div class=\"outline-text-2\" id=\"text-orgadb1ab5\">\n<p>\nUsed for validating the props passed. import as <code>import PropTypes from 'prop-types';</code>\ne.g consider a component receiving as follows.\n<code>const ProductComponent = ({image, name, price }) { }</code>\n</p>\n<p>\nBefore exporting above component we can add following validation.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\">ProductComponent.propTypes = <span style=\"color: #61bfff;\">{</span>\n  image: PropTypes.object.isRequired,\n  name: PropTypes.string.isRequired,\n  price: PropTypes.number.isRequired,\n<span style=\"color: #61bfff;\">}</span>;\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">or we can set default values as follows</span>\nProductComponent.defaultProps = <span style=\"color: #61bfff;\">{</span>\n  image: <span style=\"color: #ff79c6;\">{</span> url: <span style=\"color: #f1fa8c;\">'custom'</span> <span style=\"color: #ff79c6;\">}</span>,\n  name: <span style=\"color: #f1fa8c;\">'Sampoo'</span>,\n  price: 25,\n<span style=\"color: #61bfff;\">}</span>;\n</pre>\n</div>\n<p>\nConditional rendering can solve the issues, hence PropTypes needn't be used.\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org8fc8870\">\n<h2 id=\"org8fc8870\">React Router</h2>\n<div class=\"outline-text-2\" id=\"text-org8fc8870\">\n<p>\nUseful single page applications, enable us to navigate to different url without page refresh\nWrap your applications as follows. All matching path will be loaded. So we have to specify to be exact match and make use of <code>Switch</code>\nInstall with <code>npm install react-router-dom</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React from <span style=\"color: #f1fa8c;\">'react'</span>;\n<span style=\"color: #ff79c6;\">import</span> <span style=\"color: #61bfff;\">{</span> BrowserRouter as Router, Switch, Route, useParams <span style=\"color: #61bfff;\">}</span> from <span style=\"color: #f1fa8c;\">'react-router-dom'</span>;\n<span style=\"color: #ff79c6;\">import</span> Home from <span style=\"color: #f1fa8c;\">'./Home'</span>;\n\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">ReactRouterComp</span> = <span style=\"color: #61bfff;\">()</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n    <span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Router</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">NavBar</span> /<span style=\"color: #50fa7b;\">&gt;</span>\n\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Switch</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\">   // for matching URL exactly once</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Route</span> <span style=\"color: #ffc9e8;\">exact</span> <span style=\"color: #ffc9e8;\">path</span>=<span style=\"color: #f1fa8c;\">'/'</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">          </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Home</span> /<span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">Route</span><span style=\"color: #50fa7b;\">&gt;</span>\n\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Route</span> <span style=\"color: #ffc9e8;\">exact</span> <span style=\"color: #ffc9e8;\">path</span>=<span style=\"color: #f1fa8c;\">'/people'</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">          </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">People</span> /<span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">Route</span><span style=\"color: #50fa7b;\">&gt;</span>\n\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Route</span> <span style=\"color: #ffc9e8;\">path</span>=<span style=\"color: #f1fa8c;\">'/person/:id'</span> <span style=\"color: #ffc9e8;\">children</span>=<span style=\"color: #bd93f9;\">{</span> <span style=\"color: #0189cc;\">&lt;</span><span style=\"color: #50fa7b;\">Person</span> /<span style=\"color: #0189cc;\">&gt;</span> <span style=\"color: #bd93f9;\">}</span> <span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">Route</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\">  // passing URL params</span>\n\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Route</span> <span style=\"color: #ffc9e8;\">path</span>=<span style=\"color: #f1fa8c;\">'*'</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\">  // custom error page when invalid URL is entered.</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">          </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Error</span> /<span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">Route</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">Switch</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">    </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">Router</span><span style=\"color: #50fa7b;\">&gt;</span>\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">The Child can point to URL as follows, after importing { Link} from 'react-router-dom'</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">People</span> = <span style=\"color: #61bfff;\">()</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">somePerson</span> = <span style=\"color: #ff79c6;\">{</span>id: 2<span style=\"color: #ff79c6;\">}</span>;\n  <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">(</span>\n    <span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">ul</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">li</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Link</span> <span style=\"color: #ffc9e8;\">to</span>=<span style=\"color: #f1fa8c;\">'/'</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> Home </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">Link</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">li</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">li</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">        </span><span style=\"color: #50fa7b;\">&lt;</span><span style=\"color: #50fa7b;\">Link</span> <span style=\"color: #ffc9e8;\">to</span>=<span style=\"color: #bd93f9;\">{</span><span style=\"color: #f1fa8c;\">`/person/${somePerson.id}`</span><span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">&gt;</span><span style=\"color: #f8f8f2; background-color: #282a36;\"> Learn More </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">Link</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">      </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">li</span><span style=\"color: #50fa7b;\">&gt;</span>\n<span style=\"color: #f8f8f2; background-color: #282a36;\">    </span><span style=\"color: #50fa7b;\">&lt;</span>/<span style=\"color: #50fa7b;\">ul</span><span style=\"color: #50fa7b;\">&gt;</span>\n  <span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">grab id passed by Route in Person comp</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">Person</span> = <span style=\"color: #61bfff;\">()</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ff79c6;\">{</span> id <span style=\"color: #ff79c6;\">}</span> = useParams<span style=\"color: #ff79c6;\">()</span>;\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">make use of id</span>\n<span style=\"color: #61bfff;\">}</span>\n\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org9e9220b\">\n<h2 id=\"org9e9220b\">React.memo, useCallback, useMemo</h2>\n<div class=\"outline-text-2\" id=\"text-org9e9220b\">\n<p>\nIf props don't change re-rendering is not needed.\nto achieve this we wrap component as follows\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">import</span> React, <span style=\"color: #61bfff;\">{</span> useCallback <span style=\"color: #61bfff;\">}</span> from <span style=\"color: #f1fa8c;\">'react'</span>;\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">1. at top level the addToCart function will be cached, and  will not change until cart changes.</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">addToCart</span> = useCallback<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">()</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n  setCart<span style=\"color: #50fa7b;\">(</span>cart + 1<span style=\"color: #50fa7b;\">)</span>;\n<span style=\"color: #ff79c6;\">}</span>, <span style=\"color: #ff79c6;\">[</span>cart<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">)</span>;\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">2. down the level</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">BigList</span> = React.memo<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">{</span> product, addToCart <span style=\"color: #50fa7b;\">}</span><span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">if uppler level has triggered re-render, re-rendering will not happen at this Level if product props hasn't changed.</span>\n<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>;\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">3. When some computation is heavy and depends on few data use useMemo</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">expensiveFunc</span> = useMemo<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">()</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n  callExpensiveFunc<span style=\"color: #50fa7b;\">(</span>products<span style=\"color: #50fa7b;\">)</span>;\n<span style=\"color: #ff79c6;\">}</span>, <span style=\"color: #ff79c6;\">[</span>products<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/react-freecodecamp-coding-addict",
		"heading_ids": [
			"org2e94045",
			"org5686394",
			"org69636a5",
			"org76ad84a",
			"orgca23841",
			"orga2eea25",
			"orga6237a7",
			"org1ebf36b",
			"orgaf73005",
			"orgecf66e2",
			"org5b35f4e",
			"org6070944",
			"orga22d97c",
			"org220d4ef",
			"org2fcf91c",
			"org1942273",
			"orgb788727",
			"org6c779c5",
			"org85311db",
			"org752b81e",
			"org375b023",
			"orgadb1ab5",
			"org8fc8870",
			"org9e9220b"
		]
	},
	{
		"title": "design-pattern-java",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org05bef5c\">Abstract Factory Pattern</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org05bef5c\">\n<h2 id=\"org05bef5c\">Abstract Factory Pattern</h2>\n<div class=\"outline-text-2\" id=\"text-org05bef5c\">\n<p>\nAbstract Factory Pattern is used to create concrete objects without need to call for\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/design-pattern-java",
		"heading_ids": [
			"org05bef5c"
		]
	},
	{
		"title": "Javascript Tutorial",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgc0e13f1\">Reference</a></li>\n<li><a href=\"#org6ac636a\"><code>this</code> keyword</a></li>\n<li><a href=\"#orged642a7\">Map</a></li>\n<li><a href=\"#org11ab32c\">Set</a></li>\n<li><a href=\"#org7832dc9\">Dynamic Object Keys</a></li>\n<li><a href=\"#orgd31f42f\">Filter and Find</a></li>\n<li><a href=\"#org120aa56\">Reduce</a></li>\n<li><a href=\"#orge6ec6ee\">Callback Function</a></li>\n<li><a href=\"#org32fe4cc\">Callback Hell</a></li>\n<li><a href=\"#org12d1163\">Promises</a></li>\n<li><a href=\"#org313e30b\">Async-Await</a></li>\n<li><a href=\"#org369f225\">Fetch API call</a>\n<ul>\n<li><a href=\"#org737aae2\">Fetch error</a></li>\n</ul>\n</li>\n<li><a href=\"#org871cacd\">Axios</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgc0e13f1\">\n<h2 id=\"orgc0e13f1\">Reference</h2>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org6ac636a\">\n<h2 id=\"org6ac636a\"><code>this</code> keyword</h2>\n<div class=\"outline-text-2\" id=\"text-org6ac636a\">\n<p>\nThe value that this store is the current execution context of the JavaScript program.\nIn case of using this inside method of an object, this refers to that object.\nInside regular function this refers to the global object which is window in browser, global in node.\nThe call back is like a regular function inside which this refers to global object, hence make sure to pass this to callback if needed.\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orged642a7\">\n<h2 id=\"orged642a7\">Map</h2>\n<div class=\"outline-text-2\" id=\"text-orged642a7\">\n<p>\nReturns an array (can be empty). Doesn't change the size of original array (unlike <code>filter</code>).\nUses value from original array when making new one. By default functions in js returns undefined. So make sure to return required data.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">ages</span> = people.map<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>person<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n  <span style=\"color: #ff79c6;\">return</span> person.age;\n<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org11ab32c\">\n<h2 id=\"org11ab32c\">Set</h2>\n<div class=\"outline-text-2\" id=\"text-org11ab32c\">\n<p>\nFor storing unique values. It's analogous to <code>set</code> in cpp-tutorial. Set object supports methods <code>.add(value)</code> <code>.delete(value)</code> <code>.clear()</code> <code>.has(value)</code>\nFollowing code extracts all the unique categories all menu items fall into.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">categories</span> = <span style=\"color: #ff79c6;\">new</span> <span style=\"color: #61bfff;\">[</span>...Set<span style=\"color: #ff79c6;\">(</span>menu.map<span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>item<span style=\"color: #bd93f9;\">)</span> =&gt; <span style=\"color: #bd93f9;\">{</span>\n  <span style=\"color: #ff79c6;\">return</span> item.category\n<span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">]</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org7832dc9\">\n<h2 id=\"org7832dc9\">Dynamic Object Keys</h2>\n<div class=\"outline-text-2\" id=\"text-org7832dc9\">\n<p>\nUpdating the value for any key dynamically. <code>updateState</code> below is the required function.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">state</span> = <span style=\"color: #61bfff;\">{</span> name: <span style=\"color: #f1fa8c;\">'Mathura'</span>, age: 12 <span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ff79c6;\">function</span> <span style=\"color: #50fa7b;\">updateState</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ffc9e8;\">key</span>, <span style=\"color: #ffc9e8;\">value</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  state<span style=\"color: #ff79c6;\">[</span>key<span style=\"color: #ff79c6;\">]</span> = value;\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgd31f42f\">\n<h2 id=\"orgd31f42f\">Filter and Find</h2>\n<div class=\"outline-text-2\" id=\"text-orgd31f42f\">\n<p>\n<code>Filter</code>: Returns a new array, can manipulate the size of new array. Returns based on condition.\n<code>Find</code>: Returns single instance, returns first match, if no match found returns <code>undefined</code>.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">teens</span> = people.filter<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>person<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>   <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">returns array of person who are teens</span>\n  <span style=\"color: #ff79c6;\">return</span> person.age &lt; 20\n<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">ayush</span> = people.find<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>person<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>     <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">returns a first person from list whose name is 'Ayush'</span>\n  <span style=\"color: #ff79c6;\">return</span> person.name === <span style=\"color: #f1fa8c;\">'Ayush'</span>\n<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org120aa56\">\n<h2 id=\"org120aa56\">Reduce</h2>\n<div class=\"outline-text-2\" id=\"text-org120aa56\">\n<p>\nJust like map, filter, we iterate over the array with call back function. It reduces the array to single value (which can be number, array, or object)\nThe call back function takes two params.\n</p>\n<ol class=\"org-ol\">\n<li><code>('acc')</code> - total of all calculations</li>\n<li><code>('curr')</code> - current iteration/value</li>\n</ol>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">dailyTotal</span> = staff.reduce<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>total, person<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n  total += person.salary \n  <span style=\"color: #ff79c6;\">return</span> total              <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">always return this</span>\n<span style=\"color: #ff79c6;\">}</span>, 0<span style=\"color: #61bfff;\">)</span>;                      <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">second param can be any data type</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orge6ec6ee\">\n<h2 id=\"orge6ec6ee\">Callback Function</h2>\n<div class=\"outline-text-2\" id=\"text-orge6ec6ee\">\n<p>\nRefer examples of map, filter, find ..etc\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org32fe4cc\">\n<h2 id=\"org32fe4cc\">Callback Hell</h2>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org12d1163\">\n<h2 id=\"org12d1163\">Promises</h2>\n<div class=\"outline-text-2\" id=\"text-org12d1163\">\n<p>\nPromise a object that returns a value that we intend to use later. So we can write asynchronous code in sequential way.\nA promise can be in state <code>Pending</code>, <code>Rejected</code>, <code>Fulfilled</code>. Calling <code>resolve()</code> and <code>reject()</code> should be decided by the developer.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">promise</span> = <span style=\"color: #ff79c6;\">new</span> <span style=\"color: #bd93f9;\">Promise</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>resolve, reject<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n    resolve<span style=\"color: #50fa7b;\">()</span>   <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">can pass any data type, same goes for reject</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">reject()  </span>\n<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>\n\npromise.then<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>data<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">data sent from resolve in promise</span>\n<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>.<span style=\"color: #ff79c6;\">catch</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>e<span style=\"color: #ff79c6;\">)</span> =&gt; <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">error sent from reject in promise</span>\n<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org313e30b\">\n<h2 id=\"org313e30b\">Async-Await</h2>\n<div class=\"outline-text-2\" id=\"text-org313e30b\">\n<p>\nAsync-Await allows us to write asynchronous function in synchronous way.\n<code>await</code> is used to unwrap the promise settled, It can throw error if promise is rejected.\n</p>\n<p>\nIt can only be used if we have made the function Async. <b>Async function always returns a promise</b>, even if there is\nsimply a return statement (which means auto fulfilled). We can wrap the await statements inside try-catch block\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">alternative for below is nesting the .then methods which reduces readibility</span>\n<span style=\"color: #ff79c6;\">function</span> <span style=\"color: #50fa7b;\">getUser</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ffc9e8;\">user</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n    <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">new</span> <span style=\"color: #bd93f9;\">Promise</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span>resolve, reject<span style=\"color: #50fa7b;\">)</span> =&gt; <span style=\"color: #50fa7b;\">{</span>\n        <span style=\"color: #6272a4;\">//</span><span style=\"color: #6272a4;\">.. do resolve, reject logic</span>\n    <span style=\"color: #50fa7b;\">}</span><span style=\"color: #ff79c6;\">)</span>\n<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ff79c6;\">function</span> <span style=\"color: #50fa7b;\">getArticles</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ffc9e8;\">id</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n    <span style=\"color: #ff79c6;\">return</span> <span style=\"color: #ff79c6;\">new</span> <span style=\"color: #bd93f9;\">Promise</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span>resolve, reject<span style=\"color: #50fa7b;\">)</span> =&gt; <span style=\"color: #50fa7b;\">{</span>\n        <span style=\"color: #6272a4;\">//</span><span style=\"color: #6272a4;\">.. do resolve, reject logic</span>\n    <span style=\"color: #50fa7b;\">}</span><span style=\"color: #ff79c6;\">)</span>\n<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">getData</span> = <span style=\"color: #ff79c6;\">async</span> <span style=\"color: #61bfff;\">()</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n    <span style=\"color: #ff79c6;\">try</span> <span style=\"color: #ff79c6;\">{</span>\n        <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">user</span> = <span style=\"color: #ff79c6;\">await</span> getUser<span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">'math2do'</span><span style=\"color: #50fa7b;\">)</span>                <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">user gets whatever is resolved inside 'getUser' function</span>\n        <span style=\"color: #ff79c6;\">if</span> <span style=\"color: #50fa7b;\">(</span>user<span style=\"color: #50fa7b;\">)</span> <span style=\"color: #50fa7b;\">{</span>\n            <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">articles</span> = <span style=\"color: #ff79c6;\">await</span> getArticles<span style=\"color: #bd93f9;\">(</span>user.id<span style=\"color: #bd93f9;\">)</span>;\n        <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #ff79c6;\">}</span> <span style=\"color: #ff79c6;\">catch</span><span style=\"color: #ff79c6;\">(</span>error<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">{</span>\n        <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">rejected promise                                 // error gets whatever is rejected inside either getUser or getArticle</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org369f225\">\n<h2 id=\"org369f225\">Fetch API call</h2>\n<div class=\"outline-text-2\" id=\"text-org369f225\">\n<p>\nCheck complete note here - <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">fetch</a>\n<code>fetch</code> is used to make API call with external service.\n</p>\n<p>\nWe can use following short syntax if we are interested in the final response\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\">\nfetch<span style=\"color: #61bfff;\">(</span>url<span style=\"color: #61bfff;\">)</span>\n  .then<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>resp<span style=\"color: #ff79c6;\">)</span> =&gt; resp.json<span style=\"color: #ff79c6;\">()</span><span style=\"color: #61bfff;\">)</span>\n  .then<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>data<span style=\"color: #ff79c6;\">)</span> =&gt; console.log<span style=\"color: #ff79c6;\">(</span>data<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n  .<span style=\"color: #ff79c6;\">catch</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>err<span style=\"color: #ff79c6;\">)</span> =&gt; console.log<span style=\"color: #ff79c6;\">(</span>err<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n<p>\nAsync way of getting results, which is functionally same as above.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">fetchData</span> = <span style=\"color: #ff79c6;\">async</span> <span style=\"color: #61bfff;\">(</span>url<span style=\"color: #61bfff;\">)</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n    <span style=\"color: #ff79c6;\">try</span> <span style=\"color: #ff79c6;\">{</span>\n        <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">resp</span> = <span style=\"color: #ff79c6;\">await</span> fetch<span style=\"color: #50fa7b;\">(</span>url<span style=\"color: #50fa7b;\">)</span>\n        <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">data</span> = resp.json<span style=\"color: #50fa7b;\">()</span>\n        console.log<span style=\"color: #50fa7b;\">(</span>data<span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #ff79c6;\">}</span> <span style=\"color: #ff79c6;\">catch</span><span style=\"color: #ff79c6;\">(</span>err<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">{</span>\n        console.log<span style=\"color: #50fa7b;\">(</span>err<span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org737aae2\">\n<h3 id=\"org737aae2\">Fetch error</h3>\n<div class=\"outline-text-3\" id=\"text-org737aae2\">\n<p>\nUsing .then and .catch makes the code little unreadable hence we use try, catch, async and await as below.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">createUser</span> = <span style=\"color: #ff79c6;\">async</span> <span style=\"color: #61bfff;\">(</span>url = <span style=\"color: #f1fa8c;\">''</span>, data = <span style=\"color: #ff79c6;\">{}</span><span style=\"color: #61bfff;\">)</span> =&gt; <span style=\"color: #61bfff;\">{</span>\n    <span style=\"color: #ff79c6;\">try</span> <span style=\"color: #ff79c6;\">{</span>\n        <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">resp</span> = <span style=\"color: #ff79c6;\">await</span> fetch<span style=\"color: #50fa7b;\">(</span>url, <span style=\"color: #bd93f9;\">{</span> method: <span style=\"color: #f1fa8c;\">'POST'</span>, headers: <span style=\"color: #0189cc;\">{</span> <span style=\"color: #f1fa8c;\">'Content-Type'</span>: <span style=\"color: #f1fa8c;\">'application/json'</span> <span style=\"color: #0189cc;\">}</span>, body: JSON.stringify<span style=\"color: #0189cc;\">(</span>data<span style=\"color: #0189cc;\">)</span> <span style=\"color: #bd93f9;\">}</span><span style=\"color: #50fa7b;\">)</span>\n        <span style=\"color: #ff79c6;\">if</span> <span style=\"color: #50fa7b;\">(</span>!resp.ok<span style=\"color: #50fa7b;\">)</span> <span style=\"color: #50fa7b;\">{</span>\n            <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">err</span> = <span style=\"color: #f1fa8c;\">`There was some error \"${resp.status} ${resp.statusText}\"`</span>;\n            <span style=\"color: #ff79c6;\">throw</span> <span style=\"color: #ff79c6;\">new</span> <span style=\"color: #bd93f9;\">Error</span><span style=\"color: #bd93f9;\">(</span>err<span style=\"color: #bd93f9;\">)</span>\n        <span style=\"color: #50fa7b;\">}</span>\n        <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ffc9e8;\">tours</span> = resp.json<span style=\"color: #50fa7b;\">()</span>\n        <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">use tours data...</span>\n    <span style=\"color: #ff79c6;\">}</span> <span style=\"color: #ff79c6;\">catch</span><span style=\"color: #ff79c6;\">(</span>err<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">{</span>\n        console.log<span style=\"color: #50fa7b;\">(</span>err<span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">}</span>\ncreateUser<span style=\"color: #61bfff;\">(</span><span style=\"color: #f1fa8c;\">'https://user-service.com/create'</span>, <span style=\"color: #ff79c6;\">{</span> name: <span style=\"color: #f1fa8c;\">'Mathura'</span> <span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org871cacd\">\n<h2 id=\"org871cacd\">Axios</h2>\n<div class=\"outline-text-2\" id=\"text-org871cacd\">\n<p>\nRefer this <a href=\"https://youtu.be/mS48F0swwAY\">Youtube</a> video by John Smilga\nInstall using <code>npm install axios</code>\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/javascript-tutorial",
		"heading_ids": [
			"orgc0e13f1",
			"org6ac636a",
			"orged642a7",
			"org11ab32c",
			"org7832dc9",
			"orgd31f42f",
			"org120aa56",
			"orge6ec6ee",
			"org32fe4cc",
			"org12d1163",
			"org313e30b",
			"org369f225",
			"org737aae2",
			"org871cacd"
		]
	},
	{
		"title": "mongo-aggregation-framework",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgb1b6d56\">Aggregation Framework</a>\n<ul>\n<li><a href=\"#org6de6f5f\">Aggregation Stages</a></li>\n<li><a href=\"#orgbde3bc8\">Accumulators</a></li>\n<li><a href=\"#org46e5911\">Unary operators</a></li>\n</ul>\n</li>\n<li><a href=\"#orgfd8fb5b\">One query to rule them all</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgb1b6d56\">\n<h2 id=\"orgb1b6d56\">Aggregation Framework</h2>\n<div class=\"outline-text-2\" id=\"text-orgb1b6d56\">\n<p>\n<code>\"$&lt;fieldName&gt;\"</code> refers to the name of the field in input document.\n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org6de6f5f\">\n<h3 id=\"org6de6f5f\">Aggregation Stages</h3>\n<div class=\"outline-text-3\" id=\"text-org6de6f5f\">\n<p>\n<code>$match</code> <code>$group</code> <code>$project</code> <code>$sort</code> <code>$count</code> <code>$limit</code> <code>$skip</code> <code>$out</code>\n</p>\n<p>\n<code>$unwind</code> - splits the record for reach element of specified array. Usually used in conjuction with <b>$group</b>, <b>$project</b>\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgbde3bc8\">\n<h3 id=\"orgbde3bc8\">Accumulators</h3>\n<div class=\"outline-text-3\" id=\"text-orgbde3bc8\">\n<p>\n<code>$sum</code> <code>$avg</code> <code>$max</code> <code>$min</code>\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org46e5911\">\n<h3 id=\"org46e5911\">Unary operators</h3>\n<div class=\"outline-text-3\" id=\"text-org46e5911\">\n<p>\n<code>$type</code> - gives the type of field\n</p>\n<p>\n<code>$or</code> <code>$lt</code> <code>$gt</code> <code>$and</code> <code>$multiply</code>\n</p>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgfd8fb5b\">\n<h2 id=\"orgfd8fb5b\">One query to rule them all</h2>\n<div class=\"outline-text-2\" id=\"text-orgfd8fb5b\">\n<div class=\"org-src-container\">\n<pre class=\"src src-mongo\">db.persons.aggregate<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">[</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">1. $match - filter the doc, similar to find</span>\n    <span style=\"color: #50fa7b;\">{</span>\n        $match: <span style=\"color: #bd93f9;\">{</span> favoriteFruite: <span style=\"color: #f1fa8c;\">\"apple\"</span>, age: <span style=\"color: #0189cc;\">{</span> $gt: 20 <span style=\"color: #0189cc;\">}</span> <span style=\"color: #bd93f9;\">}</span>\n    <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">$unwind - tags: ['active', 'semi-disabled', 'disabled'] - one record will be splitted to three each</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">have tags either 'active', 'semi-disabled', 'disabled'</span>\n    <span style=\"color: #50fa7b;\">{</span>\n        $unwind: <span style=\"color: #f1fa8c;\">\"$tags\"</span>\n    <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">2. $project - select few fields, 1 - include, 0 - exclude, all zero - include all other,</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">Used for creating a new field combining other</span>\n    <span style=\"color: #50fa7b;\">{</span>\n        $project: <span style=\"color: #bd93f9;\">{</span>\n            _id: 0, age: 1, gender: 1, income: 1, country: 1, address: 1, <span style=\"color: #f1fa8c;\">\"address.pincode\"</span>: 0, rank: 11,\n            info: <span style=\"color: #0189cc;\">{</span>  \n                eyes: <span style=\"color: #f1fa8c;\">\"$eyesColor\"</span>,\n                fruit: <span style=\"color: #f1fa8c;\">\"$favoriteFruit\"</span>\n            <span style=\"color: #0189cc;\">}</span>,\n            tagType: <span style=\"color: #0189cc;\">{</span> $type: <span style=\"color: #f1fa8c;\">\"$tags\"</span> <span style=\"color: #0189cc;\">}</span>,\n            tag: <span style=\"color: #f1fa8c;\">\"$tags\"</span>\n        <span style=\"color: #bd93f9;\">}</span>\n    <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">3. $sort by fields, 1 - asc, -1 desc</span>\n    <span style=\"color: #50fa7b;\">{</span>\n        $sort: <span style=\"color: #bd93f9;\">{</span> rank: 1, age: 1, country: -1<span style=\"color: #bd93f9;\">}</span>\n    <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">$limit - compute on atleast 100 records only</span>\n    <span style=\"color: #50fa7b;\">{</span>\n        $limit: 100\n    <span style=\"color: #50fa7b;\">}</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">4. $group by fields</span>\n    <span style=\"color: #50fa7b;\">{</span>\n        $group: <span style=\"color: #bd93f9;\">{</span>\n            _id: <span style=\"color: #0189cc;\">{</span> age: <span style=\"color: #f1fa8c;\">\"$age\"</span>, gender: <span style=\"color: #f1fa8c;\">\"$gender\"</span> <span style=\"color: #0189cc;\">}</span>,\n            count: <span style=\"color: #0189cc;\">{</span> $sum: NumberInt<span style=\"color: #61bfff;\">(</span>1<span style=\"color: #61bfff;\">)</span> <span style=\"color: #0189cc;\">}</span>, avgAge: <span style=\"color: #0189cc;\">{</span> $avg: <span style=\"color: #f1fa8c;\">\"$age\"</span> <span style=\"color: #0189cc;\">}</span>\n            totalIncome: <span style=\"color: #0189cc;\">{</span> $sum: <span style=\"color: #f1fa8c;\">\"$income\"</span><span style=\"color: #0189cc;\">}</span>\n        <span style=\"color: #bd93f9;\">}</span>\n    <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">5. $count - used as last stage, server side count</span>\n    <span style=\"color: #50fa7b;\">{</span>\n        $count: <span style=\"color: #f1fa8c;\">\"peopleCount\"</span>\n    <span style=\"color: #50fa7b;\">}</span>,\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">$out - must be the last stage, writes to other collection</span>\n    <span style=\"color: #50fa7b;\">{</span>\n        $out: <span style=\"color: #f1fa8c;\">\"aggregationResultCollection\"</span>\n    <span style=\"color: #50fa7b;\">}</span>\n<span style=\"color: #ff79c6;\">]</span>, <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">to override allowable 100 MB per stage</span>\n    allowDiskUse: <span style=\"color: #8be9fd;\">true</span>,\n<span style=\"color: #ff79c6;\">}</span><span style=\"color: #61bfff;\">)</span>;\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/mongo-aggregation-framework",
		"heading_ids": [
			"orgb1b6d56",
			"org6de6f5f",
			"orgbde3bc8",
			"org46e5911",
			"orgfd8fb5b"
		]
	},
	{
		"title": "cp-common-pattern",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgc420afd\">Window problems</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgc420afd\">\n<h2 id=\"orgc420afd\">Window problems</h2>\n<div class=\"outline-text-2\" id=\"text-orgc420afd\">\n<ul class=\"org-ul\">\n<li>find minimum window containing unique chars</li>\n<li>find minimum window in string <code>s</code> containing all chars of <code>t</code></li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-cpp\"><span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">l</span> = 0, <span style=\"color: #ffc9e8;\">h</span> = 0;\n<span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">min_len</span> = INT_MAX;\n<span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">from</span> = -1;\n\n<span style=\"color: #ff79c6;\">while</span> <span style=\"color: #61bfff;\">(</span>h &lt; len<span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">expand h such that all chars of t are found</span>\n  <span style=\"color: #ff79c6;\">while</span> <span style=\"color: #ff79c6;\">(</span>h &lt; len &amp;&amp; <span style=\"color: #bd93f9; font-weight: bold;\">!</span>allFound<span style=\"color: #50fa7b;\">()</span><span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">{</span>\n    fres<span style=\"color: #50fa7b;\">[</span>toInt<span style=\"color: #bd93f9;\">(</span>s<span style=\"color: #0189cc;\">[</span>h<span style=\"color: #0189cc;\">]</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">]</span>++;\n    h++;\n  <span style=\"color: #ff79c6;\">}</span>\n  <span style=\"color: #ff79c6;\">if</span> <span style=\"color: #ff79c6;\">(</span>h == len &amp;&amp; <span style=\"color: #bd93f9; font-weight: bold;\">!</span>allFound<span style=\"color: #50fa7b;\">()</span><span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">break</span>;\n\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">shrink when all chars of t are found in window s[l:h)</span>\n  <span style=\"color: #ff79c6;\">while</span> <span style=\"color: #ff79c6;\">(</span>l &lt; h &amp;&amp; allFound<span style=\"color: #50fa7b;\">()</span><span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #ff79c6;\">if</span> <span style=\"color: #50fa7b;\">(</span>h - l &lt; min_len<span style=\"color: #50fa7b;\">)</span> <span style=\"color: #50fa7b;\">{</span>\n      min_len = h - l;\n      from = l;\n    <span style=\"color: #50fa7b;\">}</span>\n    fres<span style=\"color: #50fa7b;\">[</span>toInt<span style=\"color: #bd93f9;\">(</span>s<span style=\"color: #0189cc;\">[</span>l<span style=\"color: #0189cc;\">]</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">]</span>--;\n    l++;\n  <span style=\"color: #ff79c6;\">}</span>\n <span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/cp-common-pattern",
		"heading_ids": [
			"orgc420afd"
		]
	},
	{
		"title": "photography-manual-mode",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org7b7efbb\">Terms and Terminology</a>\n<ul>\n<li><a href=\"#orgd580346\">Aperture</a></li>\n<li><a href=\"#org502275a\">Shutter Speed</a></li>\n<li><a href=\"#org592f862\">ISO Speed</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org7b7efbb\">\n<h2 id=\"org7b7efbb\">Terms and Terminology</h2>\n<div class=\"outline-text-2\" id=\"text-org7b7efbb\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgd580346\">\n<h3 id=\"orgd580346\">Aperture</h3>\n<div class=\"outline-text-3\" id=\"text-orgd580346\">\n<p>\nMeasured as <code>1/f</code> value. Lower f means wide aperture (hole in the back of lens)\n</p>\n<p>\n<code>value of f</code>\n<code>----------------------------------&gt;</code>\n</p>\n<p>\nWhen depth of field is priority set aperture first. F2.8\nFor capturing wide area set low f e.g landscape F16 = 1/16\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org502275a\">\n<h3 id=\"org502275a\">Shutter Speed</h3>\n<div class=\"outline-text-3\" id=\"text-org502275a\">\n<p>\nSubject motion needs fast shutter speed. Also low light needs \ne.g = 1/10\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org592f862\">\n<h3 id=\"org592f862\">ISO Speed</h3>\n<div class=\"outline-text-3\" id=\"text-org592f862\">\n<p>\nFor minimum noise, set minimum ISO 100+ in daytime.\n</p>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/photography-manual-mode",
		"heading_ids": [
			"org7b7efbb",
			"orgd580346",
			"org502275a",
			"org592f862"
		]
	},
	{
		"title": "go-tutorial",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org330c1af\">Reference</a></li>\n<li><a href=\"#org0f23cf9\">Channels</a></li>\n<li><a href=\"#org347bf47\">File Reading</a>\n<ul>\n<li><a href=\"#org45c2ce3\">Read file line by line</a></li>\n<li><a href=\"#org072f4a8\">Read whole file</a></li>\n<li><a href=\"#org936b4b1\">Read by bytes of buffer size</a></li>\n</ul>\n</li>\n<li><a href=\"#org04c0d0b\">Reflection</a></li>\n<li><a href=\"#org91db5ed\">Interface</a></li>\n<li><a href=\"#org5055f8f\">Simple HTTP server</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org330c1af\">\n<h2 id=\"org330c1af\">Reference</h2>\n<div class=\"outline-text-2\" id=\"text-org330c1af\">\n<ul class=\"org-ul\">\n<li><a href=\"https://youtu.be/YS4e4q9oBaU\">Freecodecamp Youtube</a></li>\n<li><a href=\"https://go.dev/tour/welcome/1\">A Tour of Go</a></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org0f23cf9\">\n<h2 id=\"org0f23cf9\">Channels</h2>\n<div class=\"outline-text-2\" id=\"text-org0f23cf9\">\n<p>\nReference : <a href=\"https://youtu.be/YS4e4q9oBaU\">freecodecamp youtube</a>\n</p>\n<p>\nAlways used in context with <code>goroutine</code>. Create with <code>make</code> function as <code>ch := make(chan int)</code>. In unbuffered channel only one message can be present at a time.\nBuffered channel (of size, say 50) can be created as <code>ch := make(chan int, 50)</code>. A goroutine should only act as either producer or consumer which can be\nstricted in the function definition. The consumer will de defined as <code>func consumerFunc(ch &lt;-chan int)</code> and producer as <code>func producerFunc(ch chan&lt;- int)</code>\n</p>\n<p>\nReading a channel in for loop needs producer to close the channel as <code>close(ch)</code>. <b>Note read or write on closed channel will lead to panic</b>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-go\"><span style=\"color: #ff79c6;\">for</span> <span style=\"color: #ffc9e8;\">val</span> := <span style=\"color: #ff79c6;\">range</span> ch <span style=\"color: #61bfff;\">{</span>       <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">make sure producer closes the channel</span>\n  fmt.<span style=\"color: #50fa7b;\">Println</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"val\"</span>, val<span style=\"color: #ff79c6;\">)</span>\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">following for loop also does the same</span>\n<span style=\"color: #ff79c6;\">for</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">if</span> <span style=\"color: #ffc9e8;\">val</span>, <span style=\"color: #ffc9e8;\">ok</span> := &lt;-ch; ok <span style=\"color: #ff79c6;\">{</span>\n    fmt.<span style=\"color: #50fa7b;\">Println</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"val\"</span>, val<span style=\"color: #50fa7b;\">)</span>\n  <span style=\"color: #ff79c6;\">}</span> <span style=\"color: #ff79c6;\">else</span> <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #ff79c6;\">break</span>\n  <span style=\"color: #ff79c6;\">}</span> \n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\n<code>select</code> statement without default case is blocking until msg comes to any channel. Then it again goes back to blocking.\nWhen consumer needs to work with multiple channel, we can make use of select statement as follows. Also in case of multiple channels, signal channel\ncan be used for graceful shutdown of channels.\n</p>\n<p>\ncreate signal channel: <code>var doneCh = make(chan struct{})</code>\nwrite to signal channel: <code>doneCh &lt;- struct{}{}</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-go\">\n<span style=\"color: #ff79c6;\">for</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ff79c6;\">select</span> <span style=\"color: #ff79c6;\">{</span>\n  <span style=\"color: #ff79c6;\">case</span> <span style=\"color: #ffc9e8;\">val</span> := &lt;-chA:\n    fmt.<span style=\"color: #50fa7b;\">Println</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"received from ch A\"</span>, val<span style=\"color: #50fa7b;\">)</span>\n  <span style=\"color: #ff79c6;\">case</span> <span style=\"color: #ffc9e8;\">val</span> := &lt;-chB:\n    fmt.<span style=\"color: #50fa7b;\">Println</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"received from ch B\"</span>, val<span style=\"color: #50fa7b;\">)</span>\n  <span style=\"color: #ff79c6;\">case</span> &lt;-doneCh:\n    <span style=\"color: #ff79c6;\">break</span>\n  <span style=\"color: #ff79c6;\">}</span> \n<span style=\"color: #61bfff;\">}</span> \n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org347bf47\">\n<h2 id=\"org347bf47\">File Reading</h2>\n<div class=\"outline-text-2\" id=\"text-org347bf47\">\n<p>\nReference: <a href=\"https://youtu.be/8uKtaYJlTzs\">Nerdcademy Youtube</a>\n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org45c2ce3\">\n<h3 id=\"org45c2ce3\">Read file line by line</h3>\n<div class=\"outline-text-3\" id=\"text-org45c2ce3\">\n<p>\nUsing <code>os</code> package read the file and get file stats. Create a scanner from bufio package to read line by line\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-go\"><span style=\"color: #ff79c6;\">func</span> <span style=\"color: #50fa7b;\">ReadWholeFile</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ffc9e8;\">filename</span> <span style=\"color: #bd93f9;\">string</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ffc9e8;\">file</span>, <span style=\"color: #ffc9e8;\">err</span> := os.<span style=\"color: #50fa7b;\">Open</span><span style=\"color: #ff79c6;\">(</span>filename<span style=\"color: #ff79c6;\">)</span>    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">handle err</span>\n  <span style=\"color: #ff79c6;\">defer</span> file.<span style=\"color: #50fa7b;\">Close</span><span style=\"color: #ff79c6;\">()</span>                <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">file.Stat() returns file meta data information</span>\n\n  <span style=\"color: #ffc9e8;\">scanner</span> := bufio.<span style=\"color: #50fa7b;\">NewScanner</span><span style=\"color: #ff79c6;\">(</span>file<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">scanner.Split(bufio.ScanWords) // If word by word reading is needed </span>\n\n  <span style=\"color: #ff79c6;\">for</span> scanner.<span style=\"color: #50fa7b;\">Scan</span><span style=\"color: #ff79c6;\">()</span> <span style=\"color: #ff79c6;\">{</span>\n    fmt.<span style=\"color: #50fa7b;\">Println</span><span style=\"color: #50fa7b;\">(</span>scanner.<span style=\"color: #50fa7b;\">Text</span><span style=\"color: #bd93f9;\">()</span><span style=\"color: #50fa7b;\">)</span>     <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">line of text</span>\n  <span style=\"color: #ff79c6;\">}</span> \n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org072f4a8\">\n<h3 id=\"org072f4a8\">Read whole file</h3>\n<div class=\"outline-text-3\" id=\"text-org072f4a8\">\n<p>\nUsing iostil we can read the whole file at once.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-go\"><span style=\"color: #ff79c6;\">func</span> <span style=\"color: #50fa7b;\">ReadWholeFile</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ffc9e8;\">filename</span> <span style=\"color: #bd93f9;\">string</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ffc9e8;\">contents</span>, <span style=\"color: #ffc9e8;\">err</span> := ioutil.<span style=\"color: #50fa7b;\">ReadFile</span><span style=\"color: #ff79c6;\">(</span>filename<span style=\"color: #ff79c6;\">)</span>   <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">reads data in bytes, else returns err</span>\n  fmt.<span style=\"color: #50fa7b;\">Println</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">string</span><span style=\"color: #50fa7b;\">(</span>contents<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span> \n<span style=\"color: #61bfff;\">}</span> \n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org936b4b1\">\n<h3 id=\"org936b4b1\">Read by bytes of buffer size</h3>\n<div class=\"outline-text-3\" id=\"text-org936b4b1\">\n<p>\nOpen the file same with os package as in first example. then call <code>.Read()</code> on file object passing the byte array of give buffer size.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-go\"><span style=\"color: #ffc9e8;\">buff</span> := <span style=\"color: #ffb86c;\">make</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">[]</span><span style=\"color: #bd93f9;\">byte</span>, 80<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ff79c6;\">for</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ffc9e8;\">totalRead</span>, <span style=\"color: #ffc9e8;\">err</span> := file.<span style=\"color: #50fa7b;\">Read</span><span style=\"color: #ff79c6;\">(</span>buff<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">if</span> err != <span style=\"color: #8be9fd;\">nil</span> &amp;&amp; err == io.EOF <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #ff79c6;\">break</span>\n  <span style=\"color: #ff79c6;\">}</span>\n  fmt.<span style=\"color: #50fa7b;\">Println</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">string</span><span style=\"color: #50fa7b;\">(</span>buff<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n<span style=\"color: #61bfff;\">}</span> \n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org04c0d0b\">\n<h2 id=\"org04c0d0b\">Reflection</h2>\n<div class=\"outline-text-2\" id=\"text-org04c0d0b\">\n<p>\nReflection is the ability of a program to examine, introspect and modify its own structure. package  <code>reflect</code>\n</p>\n<ol class=\"org-ol\">\n<li>Reflection goes from interface to reflection object.\n<code>reflect.TypeOf(i interface{}) Type</code> returns the the reflection type that represents the dynamic type of i.</li>\n<li></li>\n<li></li>\n</ol>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org91db5ed\">\n<h2 id=\"org91db5ed\">Interface</h2>\n<div class=\"outline-text-2\" id=\"text-org91db5ed\">\n<p>\nAll interfaces in go contains <code>(value, type descriptor)</code>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org5055f8f\">\n<h2 id=\"org5055f8f\">Simple HTTP server</h2>\n<div class=\"outline-text-2\" id=\"text-org5055f8f\">\n<p>\nThe functions can be moved to different files.\n</p>\n<p>\n<b>Note: We have to write custom functions for handling path params</b>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-go\"><span style=\"color: #ff79c6;\">package</span> main\n\n<span style=\"color: #ff79c6;\">import</span> <span style=\"color: #61bfff;\">(</span>\n  <span style=\"color: #f1fa8c;\">\"encoding/json\"</span>\n  <span style=\"color: #f1fa8c;\">\"log\"</span>\n  <span style=\"color: #f1fa8c;\">\"net/http\"</span>\n<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #ff79c6;\">type</span> <span style=\"color: #bd93f9;\">Response</span> <span style=\"color: #ff79c6;\">struct</span> <span style=\"color: #61bfff;\">{</span>\n  Status  <span style=\"color: #bd93f9;\">string</span> <span style=\"color: #f1fa8c;\">`json:\"status\"`</span>\n  Message <span style=\"color: #bd93f9;\">string</span> <span style=\"color: #f1fa8c;\">`json:\"message\"`</span>\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #ff79c6;\">type</span> <span style=\"color: #bd93f9;\">PostData</span> <span style=\"color: #ff79c6;\">struct</span> <span style=\"color: #61bfff;\">{</span>\n  Greeting <span style=\"color: #bd93f9;\">string</span> <span style=\"color: #f1fa8c;\">`json:\"greeting\"`</span>\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">both the below functions can be moved to ping</span>\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">Post /ping?name=Mathura</span>\n<span style=\"color: #ff79c6;\">func</span> <span style=\"color: #50fa7b;\">setPingRoutes</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ffc9e8;\">mux</span> *<span style=\"color: #bd93f9;\">http.ServeMux</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  mux.<span style=\"color: #50fa7b;\">HandleFunc</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"/ping\"</span>, HandlePing<span style=\"color: #ff79c6;\">)</span>\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #ff79c6;\">func</span> <span style=\"color: #50fa7b;\">HandlePing</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ffc9e8;\">w</span> <span style=\"color: #bd93f9;\">http.ResponseWriter</span>, <span style=\"color: #ffc9e8;\">r</span> *<span style=\"color: #bd93f9;\">http.Request</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ffc9e8;\">name</span> := r.URL.<span style=\"color: #50fa7b;\">Query</span><span style=\"color: #ff79c6;\">()</span>.<span style=\"color: #50fa7b;\">Get</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"name\"</span><span style=\"color: #ff79c6;\">)</span> <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">get query param</span>\n\n  <span style=\"color: #ff79c6;\">if</span> r.Method == http.MethodPost <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #ff79c6;\">var</span> <span style=\"color: #ffc9e8;\">req</span> <span style=\"color: #bd93f9;\">PostData</span>\n    json.<span style=\"color: #50fa7b;\">NewDecoder</span><span style=\"color: #50fa7b;\">(</span>r.Body<span style=\"color: #50fa7b;\">)</span>.<span style=\"color: #50fa7b;\">Decode</span><span style=\"color: #50fa7b;\">(</span>&amp;req<span style=\"color: #50fa7b;\">)</span>\n  <span style=\"color: #ff79c6;\">}</span>\n\n  <span style=\"color: #ffc9e8;\">resp</span> := <span style=\"color: #bd93f9;\">Response</span><span style=\"color: #ff79c6;\">{</span><span style=\"color: #8be9fd;\">Status</span>: <span style=\"color: #f1fa8c;\">\"success\"</span>, <span style=\"color: #8be9fd;\">Message</span>: <span style=\"color: #f1fa8c;\">\"hello \"</span> + name<span style=\"color: #ff79c6;\">}</span>\n  <span style=\"color: #ffc9e8;\">byteData</span>, <span style=\"color: #ffc9e8;\">_</span> := json.<span style=\"color: #50fa7b;\">Marshal</span><span style=\"color: #ff79c6;\">(</span>resp<span style=\"color: #ff79c6;\">)</span>\n\n  w.<span style=\"color: #50fa7b;\">Header</span><span style=\"color: #ff79c6;\">()</span>.<span style=\"color: #50fa7b;\">Set</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"Content-Type\"</span>, <span style=\"color: #f1fa8c;\">\"application/json; charset=UTF-8\"</span><span style=\"color: #ff79c6;\">)</span>\n  w.<span style=\"color: #50fa7b;\">WriteHeader</span><span style=\"color: #ff79c6;\">(</span>http.StatusOK<span style=\"color: #ff79c6;\">)</span>\n  w.<span style=\"color: #50fa7b;\">Write</span><span style=\"color: #ff79c6;\">(</span>byteData<span style=\"color: #ff79c6;\">)</span>\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">can be moved to package handler</span>\n<span style=\"color: #ff79c6;\">func</span> <span style=\"color: #50fa7b;\">NewServer</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ffc9e8;\">addr</span> <span style=\"color: #bd93f9;\">string</span><span style=\"color: #61bfff;\">)</span> *<span style=\"color: #bd93f9;\">http.Server</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ffc9e8;\">mux</span> := http.<span style=\"color: #50fa7b;\">NewServeMux</span><span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #50fa7b;\">setPingRoutes</span><span style=\"color: #ff79c6;\">(</span>mux<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffc9e8;\">srv</span> := &amp;<span style=\"color: #bd93f9;\">http.Server</span><span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #8be9fd;\">Addr</span>:    addr,\n    <span style=\"color: #8be9fd;\">Handler</span>: mux,\n  <span style=\"color: #ff79c6;\">}</span>\n  <span style=\"color: #ff79c6;\">return</span> srv\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">Keep main as minimal as possible</span>\n<span style=\"color: #ff79c6;\">func</span> <span style=\"color: #50fa7b;\">main</span><span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ffc9e8;\">srv</span> := <span style=\"color: #50fa7b;\">NewServer</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"localhost:3000\"</span><span style=\"color: #ff79c6;\">)</span>\n\n  log.<span style=\"color: #50fa7b;\">Printf</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"Listening at port:%d\"</span>, 3000<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffc9e8;\">err</span> := srv.<span style=\"color: #50fa7b;\">ListenAndServe</span><span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">if</span> err != <span style=\"color: #8be9fd;\">nil</span> <span style=\"color: #ff79c6;\">{</span>\n    log.<span style=\"color: #50fa7b;\">Fatalf</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"error creating server :%v\"</span>, err<span style=\"color: #50fa7b;\">)</span>\n  <span style=\"color: #ff79c6;\">}</span>\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/go-tutorial",
		"heading_ids": [
			"org330c1af",
			"org0f23cf9",
			"org347bf47",
			"org45c2ce3",
			"org072f4a8",
			"org936b4b1",
			"org04c0d0b",
			"org91db5ed",
			"org5055f8f"
		]
	},
	{
		"title": "java-tutorial",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgd4d3191\">Java Basics</a></li>\n<li><a href=\"#org9d9030e\">Java OOPS</a>\n<ul>\n<li><a href=\"#orgfcf2ab9\"><code>Final</code> keyword in java</a></li>\n<li><a href=\"#orgcbb7733\"><code>Upcasting</code></a></li>\n<li><a href=\"#org6544d1c\"><code>Method Overriding</code></a></li>\n<li><a href=\"#org1b8ac88\"><code>Method Hiding</code> for static method</a></li>\n<li><a href=\"#orgc9ebd67\"><code>Static</code> keyword in java</a></li>\n<li><a href=\"#org41e2ebc\"><code>Polymorphism</code> = poly + morph</a></li>\n<li><a href=\"#org7dbdc4e\"><code>Static</code> and <code>Dynamic</code> binding</a></li>\n<li><a href=\"#orgf0a7f07\">Abstraction</a></li>\n<li><a href=\"#org17437bc\">Inner Class</a></li>\n<li><a href=\"#org5f48a75\">Access modifiers</a></li>\n</ul>\n</li>\n<li><a href=\"#org0d897dc\">Java Collections</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgd4d3191\">\n<h2 id=\"orgd4d3191\">Java Basics</h2>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org9d9030e\">\n<h2 id=\"org9d9030e\">Java OOPS</h2>\n<div class=\"outline-text-2\" id=\"text-org9d9030e\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgfcf2ab9\">\n<h3 id=\"orgfcf2ab9\"><code>Final</code> keyword in java</h3>\n<div class=\"outline-text-3\" id=\"text-orgfcf2ab9\">\n<p>\nIt is used to refer constants\n</p>\n<p>\n<code>final variable</code> : You can't change value of final variable. Can be uninitialized which can be assigned only inside constructor.\n</p>\n<p>\n<code>final method</code> : You can't override it. It can be inherited. <b>Constructors</b> Can't be made final.\n</p>\n<p>\n<code>final class</code> : You can't extend it.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgcbb7733\">\n<h3 id=\"orgcbb7733\"><code>Upcasting</code></h3>\n<div class=\"outline-text-3\" id=\"text-orgcbb7733\">\n<p>\nReference variable of parent class can refer to the object of child class.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org6544d1c\">\n<h3 id=\"org6544d1c\"><code>Method Overriding</code></h3>\n<div class=\"outline-text-3\" id=\"text-org6544d1c\">\n<p>\nFor runtime polymorphism.\nThe method must have the same name and definition as in parent class. Child class must be inheriting parent class. <code>main</code> function can't be overriden since it is static method.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org1b8ac88\">\n<h3 id=\"org1b8ac88\"><code>Method Hiding</code> for static method</h3>\n<div class=\"outline-text-3\" id=\"text-org1b8ac88\">\n<p>\nIf a subclass defines a static method with the same signature as a static method in the super class, in such a case, the method in the subclass hides the one in the superclass.\nIt happens because static methods are resolved at compile time.\nIf parent type variable holds the child variable, then child method (in case of overriden) is called. Else parent method(in case of method hiding, i.e the variable type), is called.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgc9ebd67\">\n<h3 id=\"orgc9ebd67\"><code>Static</code> keyword in java</h3>\n<div class=\"outline-text-3\" id=\"text-orgc9ebd67\">\n<p>\nAssociated to memory management.\n</p>\n<p>\n<code>static variable</code>: Common property of all objects, Hence it is class property. Gets memory only once in the class area at the time of class loading.\n</p>\n<p>\n<code>static method</code> : Static method belongs to the class rather than the object of a class. Can access/modify static data member.\n</p>\n<p>\n<code>static block</code> : Used to initialize the static data member. It is executed before the main method at the time of class loading.\n</p>\n<p>\n<code>static nested class</code> : It can access static data members of the outer class, including private.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org41e2ebc\">\n<h3 id=\"org41e2ebc\"><code>Polymorphism</code> = poly + morph</h3>\n<div class=\"outline-text-3\" id=\"text-org41e2ebc\">\n<p>\n<code>Static polymorphism</code> : using method overloading. e.g add function for int and float\n<code>Runtime polymorphism</code> : using method overriding.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org7dbdc4e\">\n<h3 id=\"org7dbdc4e\"><code>Static</code> and <code>Dynamic</code> binding</h3>\n<div class=\"outline-text-3\" id=\"text-org7dbdc4e\">\n<p>\nVariable is assigned a type as follows.\n</p>\n<p>\n<code>Static binding</code> (early binding) : The object is determined at compiled time.\n<code>int x = 10</code>  or <code>Dog d = new Dog()</code>\n</p>\n<p>\n<code>Dynamic binding</code> (late binding) : The object is determined at run-time.\n<code>Animal a = new Dog()</code>\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgf0a7f07\">\n<h3 id=\"orgf0a7f07\">Abstraction</h3>\n<div class=\"outline-text-3\" id=\"text-orgf0a7f07\">\n<p>\nAbstraction is a concept/way of showing only essential things to the user and hides the internal details\n<code>abstract</code> class (0-100% abstraction) : same as normal classes except it has keyword abstract. The class must be inherited and abstract methods must be implemented.\n<code>interface</code> (100% abstraction) : can have static variable. Inheriting class must provide implementations. \n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org17437bc\">\n<h3 id=\"org17437bc\">Inner Class</h3>\n<div class=\"outline-text-3\" id=\"text-org17437bc\">\n<p>\nIt can access all the members of the outer class, including private data members and methods.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org5f48a75\">\n<h3 id=\"org5f48a75\">Access modifiers</h3>\n<div class=\"outline-text-3\" id=\"text-org5f48a75\">\n<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">\n<colgroup>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-left\" scope=\"col\"><b>Access modifier</b></th>\n<th class=\"org-left\" scope=\"col\"><b>within class</b></th>\n<th class=\"org-left\" scope=\"col\"><b>within package</b></th>\n<th class=\"org-left\" scope=\"col\"><b>outside package by subclass</b></th>\n<th class=\"org-left\" scope=\"col\"><b>outside packge</b></th>\n<th class=\"org-left\" scope=\"col\"><b>remarks</b></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\"><code>private</code></td>\n<td class=\"org-left\">Y</td>\n<td class=\"org-left\">N</td>\n<td class=\"org-left\">N</td>\n<td class=\"org-left\">N</td>\n<td class=\"org-left\">meant for only within the class</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\"><code>default</code></td>\n<td class=\"org-left\">Y</td>\n<td class=\"org-left\">Y</td>\n<td class=\"org-left\">N</td>\n<td class=\"org-left\">N</td>\n<td class=\"org-left\">meant for the package</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\"><code>protected</code></td>\n<td class=\"org-left\">Y</td>\n<td class=\"org-left\">Y</td>\n<td class=\"org-left\">Y</td>\n<td class=\"org-left\">N</td>\n<td class=\"org-left\">meant for the class, subclass</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\"><code>public</code></td>\n<td class=\"org-left\">Y</td>\n<td class=\"org-left\">Y</td>\n<td class=\"org-left\">Y</td>\n<td class=\"org-left\">Y</td>\n<td class=\"org-left\">meant for everywhere</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org0d897dc\">\n<h2 id=\"org0d897dc\">Java Collections</h2>\n</div>\n</div>\n</body>",
		"path": "/content/java-tutorial",
		"heading_ids": [
			"orgd4d3191",
			"org9d9030e",
			"orgfcf2ab9",
			"orgcbb7733",
			"org6544d1c",
			"org1b8ac88",
			"orgc9ebd67",
			"org41e2ebc",
			"org7dbdc4e",
			"orgf0a7f07",
			"org17437bc",
			"org5f48a75",
			"org0d897dc"
		]
	},
	{
		"title": "go-gin-framework",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgafc4e72\">Simple HTTP Server</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgafc4e72\">\n<h2 id=\"orgafc4e72\">Simple HTTP Server</h2>\n<div class=\"outline-text-2\" id=\"text-orgafc4e72\">\n<p>\nSimple HTTP Server. We can attach handler to <code>router</code> in <code>main.go</code> itself if grouping is not needed.\nThe handler has param <code>c *gin.Context</code> which has many properties to handle request and response.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-go\"><span style=\"color: #ff79c6;\">package</span> main\n\n<span style=\"color: #ff79c6;\">import</span> <span style=\"color: #61bfff;\">(</span>\n  <span style=\"color: #f1fa8c;\">\"net/http\"</span>\n  <span style=\"color: #f1fa8c;\">\"github.com/gin-gonic/gin\"</span>\n<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">register handlers to route</span>\n<span style=\"color: #ff79c6;\">func</span> <span style=\"color: #50fa7b;\">pingRoutes</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ffc9e8;\">rg</span> *<span style=\"color: #bd93f9;\">gin.RouterGroup</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ffc9e8;\">ping</span> := rg.<span style=\"color: #50fa7b;\">Group</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"/ping\"</span><span style=\"color: #ff79c6;\">)</span> <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">optional</span>\n\n  ping.<span style=\"color: #50fa7b;\">GET</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"/ping-msg\"</span>, <span style=\"color: #ff79c6;\">func</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #ffc9e8;\">c</span> *<span style=\"color: #bd93f9;\">gin.Context</span><span style=\"color: #50fa7b;\">)</span> <span style=\"color: #50fa7b;\">{</span>\n    c.<span style=\"color: #50fa7b;\">JSON</span><span style=\"color: #bd93f9;\">(</span>http.StatusOK, <span style=\"color: #bd93f9;\">gin.H</span><span style=\"color: #0189cc;\">{</span>\n      <span style=\"color: #f1fa8c;\">\"message\"</span>: <span style=\"color: #f1fa8c;\">\"pong\"</span>,\n    <span style=\"color: #0189cc;\">}</span><span style=\"color: #bd93f9;\">)</span>\n  <span style=\"color: #50fa7b;\">}</span><span style=\"color: #ff79c6;\">)</span>\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">group apis</span>\n<span style=\"color: #ff79c6;\">func</span> <span style=\"color: #50fa7b;\">group</span><span style=\"color: #61bfff;\">(</span><span style=\"color: #ffc9e8;\">router</span> *<span style=\"color: #bd93f9;\">gin.Engine</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ffc9e8;\">v1</span> := router.<span style=\"color: #50fa7b;\">Group</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"/v1\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #50fa7b;\">pingRoutes</span><span style=\"color: #ff79c6;\">(</span>v1<span style=\"color: #ff79c6;\">)</span>\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #ff79c6;\">func</span> <span style=\"color: #50fa7b;\">main</span><span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #ffc9e8;\">router</span> := gin.<span style=\"color: #50fa7b;\">Default</span><span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #50fa7b;\">group</span><span style=\"color: #ff79c6;\">(</span>router<span style=\"color: #ff79c6;\">)</span>\n  router.<span style=\"color: #50fa7b;\">Run</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\":3000\"</span><span style=\"color: #ff79c6;\">)</span>\n<span style=\"color: #61bfff;\">}</span>\n\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/go-gin-framework",
		"heading_ids": [
			"orgafc4e72"
		]
	},
	{
		"title": "cpp-tutorial",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org7c1d5ed\">Compilation</a></li>\n<li><a href=\"#org2fc3aae\">Functor in c++</a></li>\n<li><a href=\"#orgf7c7fdc\">Bitset in C++</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org7c1d5ed\">\n<h2 id=\"org7c1d5ed\">Compilation</h2>\n<div class=\"outline-text-2\" id=\"text-org7c1d5ed\">\n<p>\nSimple compilation of c++ code using\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">g++ b.cpp -std=c++17 -O2 -o sol -Wall -Wextra -DLOCAL\n</pre>\n</div>\n<p>\nMore complex, though slow, command to compile c++ code. Below command is compiling <code>b.cpp</code> producing a executable <code>sol</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\ng++ b.cpp -Wall -Wextra -pedantic -std=c++17 -O2 -o sol -Wshadow -Wformat=2 -Wfloat-equal -Wconversion -Wlogical-op -Wshift-overflow=2 -Wduplicated-cond -Wcast-qual -Wcast-align -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_FORTIFY_SOURCE=2 -fsanitize=address -fsanitize=undefined -fno-sanitize-recover -fstack-protector -DLOCAL\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org2fc3aae\">\n<h2 id=\"org2fc3aae\">Functor in c++</h2>\n<div class=\"outline-text-2\" id=\"text-org2fc3aae\">\n<p>\nFunctor is highly useful when we want to store custom objects in <code>priority_queue</code> <code>set</code> <code>map</code>\nConsider we have: <code>struct point { int x; int y; };</code>\nWe can create a custom comparator for affecting the ordering in above containers.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-cpp\"><span style=\"color: #ff79c6;\">struct</span> <span style=\"color: #bd93f9;\">comp</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #bd93f9;\">bool</span> <span style=\"color: #ff79c6;\">operator</span><span style=\"color: #ff79c6;\">()</span><span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">const</span> <span style=\"color: #bd93f9;\">point</span> &amp;<span style=\"color: #ffc9e8;\">a</span>, <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #bd93f9;\">point</span> &amp;<span style=\"color: #ffc9e8;\">b</span><span style=\"color: #ff79c6;\">)</span> <span style=\"color: #ff79c6;\">const</span> <span style=\"color: #ff79c6;\">{</span>\n    <span style=\"color: #ff79c6;\">if</span> <span style=\"color: #50fa7b;\">(</span>a.x == b.y<span style=\"color: #50fa7b;\">)</span> <span style=\"color: #ff79c6;\">return</span> a.y &lt; b.y;\n    <span style=\"color: #ff79c6;\">return</span> a.x &lt; b.y;\n  <span style=\"color: #ff79c6;\">}</span> \n<span style=\"color: #61bfff;\">}</span>;\n</pre>\n</div>\n<p>\nThe syntax of functor should be as above (<code>Todo</code> why?) We can use the functor as below.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-cpp\"><span style=\"color: #bd93f9;\">set</span> <span style=\"color: #61bfff;\">&lt;</span>point, comp<span style=\"color: #61bfff;\">&gt;</span> <span style=\"color: #ffc9e8;\">st</span>;\n<span style=\"color: #bd93f9;\">map</span> <span style=\"color: #61bfff;\">&lt;</span>point, <span style=\"color: #bd93f9;\">bool</span>, comp<span style=\"color: #61bfff;\">&gt;</span> <span style=\"color: #ffc9e8;\">mp</span>;                    \n<span style=\"color: #bd93f9;\">prority_queue</span> <span style=\"color: #61bfff;\">&lt;</span>point, <span style=\"color: #bd93f9;\">vector</span> <span style=\"color: #ff79c6;\">&lt;</span>point<span style=\"color: #ff79c6;\">&gt;</span>, comp<span style=\"color: #61bfff;\">&gt;</span> <span style=\"color: #ffc9e8;\">pq</span>;    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">creates max_heap</span>\nsort<span style=\"color: #61bfff;\">(</span>a.begin<span style=\"color: #ff79c6;\">()</span>, a.end<span style=\"color: #ff79c6;\">()</span>, comp<span style=\"color: #ff79c6;\">()</span><span style=\"color: #61bfff;\">)</span>;                  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">takes function</span>\n</pre>\n</div>\n<p>\n<b>Note: The functor which creates <code>ascending</code> order while sorting vector creates <code>max_heap</code> in case of priority<sub>queue</sub></b>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgf7c7fdc\">\n<h2 id=\"orgf7c7fdc\">Bitset in C++</h2>\n<div class=\"outline-text-2\" id=\"text-orgf7c7fdc\">\n<p>\nNeed to include bitset header <code>#include &lt;bitset&gt;</code>\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/cpp-tutorial",
		"heading_ids": [
			"org7c1d5ed",
			"org2fc3aae",
			"orgf7c7fdc"
		]
	},
	{
		"title": "css-tutorial-modified",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org897707b\">Navbar Design</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org897707b\">\n<h2 id=\"org897707b\">Navbar Design</h2>\n<div class=\"outline-text-2\" id=\"text-org897707b\">\n<div class=\"org-src-container\">\n<pre class=\"src src-html\">&lt;<span style=\"color: #50fa7b;\">nav</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'navbar'</span>&gt;\n  &lt;<span style=\"color: #50fa7b;\">div</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'nav-center'</span>&gt;\n\n    &lt;<span style=\"color: #50fa7b;\">div</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'nav-header'</span>&gt;\n      &lt;<span style=\"color: #50fa7b;\">a</span> <span style=\"color: #ffc9e8;\">href</span>=<span style=\"color: #f1fa8c;\">'index.html'</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'nav-logo'</span>&gt; &lt;<span style=\"color: #50fa7b;\">img</span> <span style=\"color: #ffc9e8;\">src</span>=<span style=\"color: #f1fa8c;\">'./asset/logo.svg'</span> <span style=\"color: #ffc9e8;\">alt</span>=<span style=\"color: #f1fa8c;\">'logo'</span>/&gt; &lt;/<span style=\"color: #50fa7b;\">a</span>&gt;\n      &lt;<span style=\"color: #50fa7b;\">button</span> <span style=\"color: #ffc9e8;\">type</span>=<span style=\"color: #f1fa8c;\">'button'</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'btn nav-btn'</span>&gt; &lt;<span style=\"color: #50fa7b;\">i</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'fas fa-align-justify'</span>&gt;<span style=\"font-style: italic;\"> </span>&lt;/<span style=\"color: #50fa7b;\">i</span>&gt; &lt;/<span style=\"color: #50fa7b;\">button</span>&gt;\n    &lt;/<span style=\"color: #50fa7b;\">div</span>&gt;\n\n    &lt;<span style=\"color: #50fa7b;\">div</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'nav-links'</span>&gt;\n      &lt;<span style=\"color: #50fa7b;\">a</span> <span style=\"color: #ffc9e8;\">href</span>=<span style=\"color: #f1fa8c;\">'index.html'</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'nav-link'</span>&gt;home&lt;/<span style=\"color: #50fa7b;\">a</span>&gt;\n      &lt;<span style=\"color: #50fa7b;\">a</span> <span style=\"color: #ffc9e8;\">href</span>=<span style=\"color: #f1fa8c;\">'about.html'</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'nav-link'</span>&gt;about&lt;/<span style=\"color: #50fa7b;\">a</span>&gt;\n      &lt;<span style=\"color: #50fa7b;\">a</span> <span style=\"color: #ffc9e8;\">href</span>=<span style=\"color: #f1fa8c;\">'tags.html'</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'nav-link'</span>&gt;tags&lt;/<span style=\"color: #50fa7b;\">a</span>&gt;\n      &lt;<span style=\"color: #50fa7b;\">a</span> <span style=\"color: #ffc9e8;\">href</span>=<span style=\"color: #f1fa8c;\">'recipe.html'</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'nav-link'</span>&gt;recipe&lt;/<span style=\"color: #50fa7b;\">a</span>&gt;\n\n      &lt;<span style=\"color: #50fa7b;\">div</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'nav-link contact-link'</span>&gt;\n        &lt;<span style=\"color: #50fa7b;\">a</span> <span style=\"color: #ffc9e8;\">href</span>=<span style=\"color: #f1fa8c;\">'contact.html'</span> <span style=\"color: #ffc9e8;\">class</span>=<span style=\"color: #f1fa8c;\">'btn'</span>&gt;contact&lt;/<span style=\"color: #50fa7b;\">a</span>&gt;\n      &lt;/<span style=\"color: #50fa7b;\">div</span>&gt;\n\n    &lt;/<span style=\"color: #50fa7b;\">div</span>&gt;\n\n  &lt;/<span style=\"color: #50fa7b;\">div</span>&gt;\n&lt;/<span style=\"color: #50fa7b;\">nav</span>&gt;\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/css-tutorial-modified",
		"heading_ids": [
			"org897707b"
		]
	},
	{
		"title": "node.js tutorial",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org6b8b86e\">Reference</a></li>\n<li><a href=\"#org5bdb34b\">Introduction</a></li>\n<li><a href=\"#org817bb52\">Globals</a></li>\n<li><a href=\"#orgb6882b0\">Modules</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org6b8b86e\">\n<h2 id=\"org6b8b86e\">Reference</h2>\n<div class=\"outline-text-2\" id=\"text-org6b8b86e\">\n<p>\n<a href=\"https://youtu.be/Oe421EPjeBE\">Freecodecamp Youtube by John Smilga</a>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org5bdb34b\">\n<h2 id=\"org5bdb34b\">Introduction</h2>\n<div class=\"outline-text-2\" id=\"text-org5bdb34b\">\n<p>\nEnvironment to run Javascript outside browser. Built on chrome's V8 JS engine.\nRun with command <code>node app.js</code>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org817bb52\">\n<h2 id=\"org817bb52\">Globals</h2>\n<div class=\"outline-text-2\" id=\"text-org817bb52\">\n<p>\n<code>__dirname</code>, <code>__filename</code>, <code>require</code>, <code>module</code>, <code>process</code>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgb6882b0\">\n<h2 id=\"orgb6882b0\">Modules</h2>\n<div class=\"outline-text-2\" id=\"text-orgb6882b0\">\n<p>\nEvery file is a module by default. Export the data from a file with <code>module.exports = { john, peter }</code>\nImport as <code>const names require('./path-to-module')</code>\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/node.js-tutorial",
		"heading_ids": [
			"org6b8b86e",
			"org5bdb34b",
			"org817bb52",
			"orgb6882b0"
		]
	},
	{
		"title": "course-database-management-system",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org16e3e25\">Reference</a></li>\n<li><a href=\"#orga23af26\">File Organisation</a></li>\n<li><a href=\"#org7dca798\">Indexing</a>\n<ul>\n<li><a href=\"#org6308f73\">Multilevel Indexing</a></li>\n<li><a href=\"#orge8d12c0\">Data Structure for Indexing</a></li>\n<li><a href=\"#org4588d1b\">Hashing Schemes</a></li>\n<li><a href=\"#org80bfd21\">Index Design in SQL</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org16e3e25\">\n<h2 id=\"org16e3e25\">Reference</h2>\n<div class=\"outline-text-2\" id=\"text-org16e3e25\">\n<p>\nNPTEL Lecture by PPD, IIT Kharagpur\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orga23af26\">\n<h2 id=\"orga23af26\">File Organisation</h2>\n<div class=\"outline-text-2\" id=\"text-orga23af26\">\n<p>\nDatabase -&gt; Collection of Files -&gt; Sequence of Records -&gt; Sequence of Fields\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org7dca798\">\n<h2 id=\"org7dca798\">Indexing</h2>\n<div class=\"outline-text-2\" id=\"text-org7dca798\">\n<p>\nIndex File consists of <code>search-key : pointer</code>\nOrdered Indices - Search keys are stored in sorted order\nHash Indices - Search keys are distrbuted across buckets using hash functions\n</p>\n<p>\n<span class=\"underline\">Index Evaluation Metrics</span>\n  Access time, Insertion time, Deletion time, Space overhead\n</p>\n<p>\n<span class=\"underline\">Primary Indexing/Clustered Indexing</span>\n  An index whose search key specifies the sequential order of files.\n  <b>Dense Index</b>: where index record appears on every search-key value\n  <b>Sparse Index</b>: contains index record for only some search-key value. Applicable when records are sequentially ordered on search-key\n</p>\n<p>\n<span class=\"underline\">Seconday Indexing/Non-clustering Index</span>\n  An index whose search key specifies an order different from sequential order of files.\n  They have to be <b>dense</b>.\n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org6308f73\">\n<h3 id=\"org6308f73\">Multilevel Indexing</h3>\n<div class=\"outline-text-3\" id=\"text-org6308f73\">\n<p>\nIf primary index doesn't fit in memory, then access becomes expensive, since fething from disk is costly.\n<b>Solution</b>: Treat primary index as sequential file and construct <b>sparse index</b> on it.\n</p>\n<ul class=\"org-ul\">\n<li>Outer Index - sparse index of primary index. If this is also too large, add another level and so on.</li>\n<li>Inner Index - the primary index file.</li>\n</ul>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orge8d12c0\">\n<h3 id=\"orge8d12c0\">Data Structure for Indexing</h3>\n<div class=\"outline-text-3\" id=\"text-orge8d12c0\">\n<p>\n<span class=\"underline\">Balanced Binary Search Trees</span>\n  Good for in memory operations. Works well for small volume of data. Don't scale for external data structures.\n</p>\n<p>\n<span class=\"underline\">2-3-4 Trees</span> \n  All leaves at same depth. All data is kept in sorted order. Every node is a 2-node, 3-node or 4-node and holds 1, 2 or 3 nodes repectively.\n</p>\n<p>\n<span class=\"underline\">B+-Tree</span>\n  B+-Tree Index Files is a generalisation of 2-3-4 Tree. These are alternative to indexed sequential files.\n</p>\n<ul class=\"org-ul\">\n<li>All paths from root to leaf are of same length</li>\n<li>Each non-leaf node contains between ceil(n/2) and n children (atleast half full),\nbecause sometimes split into half is required. e.g in 2-3-4 trees, if insertion is required at node with 3 children.</li>\n<li>Leaf node has between ceil((n-1)/2) and n-1 <b>values</b> or <b>records pointers</b>.</li>\n<li>Non-leaf forms a sparse Indices.</li>\n<li>The search becomes very effective with disk access of atmost level = LOGn/2(K)</li>\n</ul>\n<p>\n<b>Node is generally the same size as disk block, typically 4KB, And hence n is typically around 100</b>.\nIdeas is n shouldn't be too large for it to be contained in disk block, otherwise partial read will happen.\n</p>\n<p>\n<span class=\"underline\">B-Tree</span> Index Files\nAllows seach-key values to appear only once. This search key in non-leaf appears only in one node. Hence additional pointer field is required.\nThis is a optimisation of B+-Tree. Seach can end happen in non-leaf as well. But has high depth since fan-out is reduced. Hence B+-Tree is more used.\n</p>\n<p>\n<span class=\"underline\">Issues</span>\nIf a record moves all the secondary indices that store record pointers have to be updated.\n<b>Solution</b>: Use primary-index search key instead of record pointer in secondary index.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org4588d1b\">\n<h3 id=\"org4588d1b\">Hashing Schemes</h3>\n<div class=\"outline-text-3\" id=\"text-org4588d1b\">\n<p>\n<code>Bucket</code> - Unit of storage containing one or more records (typically a disk block)\nSo in <b>hash file organisation</b> the bucket is directly obtained by <b>hash function</b>.\nFor a search-key having small range of values we can use this bitmap indexes.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org80bfd21\">\n<h3 id=\"org80bfd21\">Index Design in SQL</h3>\n<div class=\"outline-text-3\" id=\"text-org80bfd21\">\n<div class=\"org-src-container\">\n<pre class=\"src src-sql\">\n<span style=\"color: #ff79c6;\">create</span> index b-index <span style=\"color: #ff79c6;\">on</span> branch<span style=\"color: #61bfff;\">(</span>branch_name<span style=\"color: #61bfff;\">)</span>;\n<span style=\"color: #ff79c6;\">drop</span> index b-index;\n\n</pre>\n</div>\n<ul class=\"org-ul\">\n<li>Index can be created on two columns.</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/course-database-management-system",
		"heading_ids": [
			"org16e3e25",
			"orga23af26",
			"org7dca798",
			"org6308f73",
			"orge8d12c0",
			"org4588d1b",
			"org80bfd21"
		]
	},
	{
		"title": "course-operating-system.cpp",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org7316b18\">Reference</a></li>\n<li><a href=\"#orgbb39787\">Unix System Calls</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org7316b18\">\n<h2 id=\"org7316b18\">Reference</h2>\n<div class=\"outline-text-2\" id=\"text-org7316b18\">\n<p>\n<a href=\"https://youtu.be/z3Nw5o9dS7Q\">NPTEL Lecture by Sampat Ghosh, IIT D</a>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgbb39787\">\n<h2 id=\"orgbb39787\">Unix System Calls</h2>\n<div class=\"outline-text-2\" id=\"text-orgbb39787\">\n<p>\nKernel Functions are called <b>System Calls</b>\n</p>\n<p>\n<code>fork()</code> - Creates a identical child process from the point where fork is called by parent process. Later these program can progress differently.\n</p>\n<p>\n<b>Note</b>: fork() returns pid, which is returned in both parent and child process. Parent gets the pid of child. Child gets 0 as demonstrated below. Negative pid means error.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-cpp\">\n<span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">pid</span> = fork<span style=\"color: #61bfff;\">()</span>;\n<span style=\"color: #ff79c6;\">if</span> <span style=\"color: #61bfff;\">(</span>pid == 0<span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>    <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">in both parent and child, this if condition is checked and child satisfies this case.</span>\n  exec<span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"browser\"</span><span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span> <span style=\"color: #ff79c6;\">else</span> <span style=\"color: #ff79c6;\">if</span> <span style=\"color: #61bfff;\">(</span>pid &gt; 0<span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">exit_code</span> = wait<span style=\"color: #ff79c6;\">(</span>0<span style=\"color: #ff79c6;\">)</span>;  <span style=\"color: #6272a4;\">// </span><span style=\"color: #6272a4;\">parent waits till any child returns</span>\n<span style=\"color: #61bfff;\">}</span> <span style=\"color: #ff79c6;\">else</span> <span style=\"color: #61bfff;\">{</span>\n  printf<span style=\"color: #ff79c6;\">(</span><span style=\"color: #f1fa8c;\">\"Error in fork\"</span><span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span> \n\n</pre>\n</div>\n<p>\n<code>exec(\"filename\")</code> - Load a new executable program by name fileName. If a shell program of caller calls exec function, caller is removed and on top of it new program is launced.\nSo no way to go back to the caller.\n</p>\n<p>\n<b>Solution</b> : e.g shell (parent process) calls <b>fork()</b>, then the child shell calls <b>exec(\"browser\")</b>, so that both parent and child are present.\n</p>\n<p>\n<span class=\"underline\">Other System Call</span>\n</p>\n<p>\n<code>fd = open(\"filename\")</code> - Operating system will check the <b>file descriptor table</b> (through system call) and returns the first available file descriptor. First 3 fds are special\n0 - Standard Input (<b>STDIN</b>)  1 - Standard Output (<b>STDOUT</b>)  2 - Standard Error(<b>STDERR</b>)\n</p>\n<p>\n<code>ret = read(fd, buf, size)</code>,  <code>ret = write(fd, buf, size)</code>,  <code>close(fd)</code>,  <code>exit()</code>\n</p>\n<ul class=\"org-ul\">\n<li>During fork, file descriptor table is also copied, hence two process can write to same file.</li>\n</ul>\n<p>\n<span class=\"underline\">Redirection</span>\n<code>ls &gt; foo</code> - Redirect standard output to foo\n<code>ls &lt; foo</code> - Redirect standard input to foo\n<code>ls 2&gt;&amp;1 foo</code> - Redirect to standard error\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/course-operating-system.cpp",
		"heading_ids": [
			"org7316b18",
			"orgbb39787"
		]
	},
	{
		"title": "course-kafka",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org80efbd3\">Reference</a></li>\n<li><a href=\"#org447ff0a\">Introduction</a></li>\n<li><a href=\"#org9a77310\">Key Terminologies</a></li>\n<li><a href=\"#org1662d07\">Topic</a>\n<ul>\n<li><a href=\"#org36e84c5\">Create a Topic</a></li>\n<li><a href=\"#orgb3eed9d\">Alter Topic Partition</a></li>\n<li><a href=\"#orge38df6c\">Partition Reassignment</a>\n<ul>\n<li><a href=\"#orgfd37342\">Commands</a></li>\n</ul>\n</li>\n<li><a href=\"#orgf3fadde\">List Topics</a></li>\n<li><a href=\"#org623b04f\">Describe a Topic</a></li>\n<li><a href=\"#org2d8dd72\">Console Producer</a></li>\n<li><a href=\"#orgeb4e7d8\">Console Consumer</a></li>\n<li><a href=\"#org0b0da33\">List Consumer Groups</a></li>\n<li><a href=\"#org721b2f8\">Describe Consumer Group</a></li>\n</ul>\n</li>\n<li><a href=\"#org7572c43\">Setup Zookeeper</a>\n<ul>\n<li><a href=\"#org970b86d\">Check status</a></li>\n</ul>\n</li>\n<li><a href=\"#org94df64b\">Setup Kafka Cluster</a></li>\n<li><a href=\"#org73b13f6\">Internals of Topics, Partitions and Replication</a>\n<ul>\n<li><a href=\"#org7e2b5ce\">States of Partition when we create a Topic</a></li>\n</ul>\n</li>\n<li><a href=\"#org785a30b\">Offsets in Kafka</a></li>\n<li><a href=\"#orgaf0692a\">Internals of Consumer Group</a>\n<ul>\n<li><a href=\"#org5ead9f0\">Group Coordinator</a></li>\n<li><a href=\"#orgcab2d9f\">Group Leader</a></li>\n</ul>\n</li>\n<li><a href=\"#orgd879ac9\">Kafka Producer Configs</a></li>\n<li><a href=\"#org3fc1733\">Kafka Consumer Configs</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org80efbd3\">\n<h2 id=\"org80efbd3\">Reference</h2>\n<div class=\"outline-text-2\" id=\"text-org80efbd3\">\n<p>\n<a href=\"https://youtu.be/TGKUYoegrDY\">Youtube Videos by Brijesh Gupta</a>\n<a href=\"https://zookeeper.apache.org/doc/r3.3.3/zookeeperAdmin.html\">Offical Documentation</a>\n<a href=\"https://kafka.apache.org/documentation.html\">Offical Kafka Documentation</a>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org447ff0a\">\n<h2 id=\"org447ff0a\">Introduction</h2>\n<div class=\"outline-text-2\" id=\"text-org447ff0a\">\n<p>\n<code>Kafka</code> is a distributed <b>Message Streaming Platform</b> that usess <code>publish</code> and <code>subscribe</code> mechanism to stream records.\n</p>\n<p>\n<span class=\"underline\">Benefits</span>\n</p>\n<ul class=\"org-ul\">\n<li><code>Scalable</code> - Horozontal Scaling is done by adding new brokers to the cluster without downtime.</li>\n<li><code>Fault Tolerance</code> - ditributed in nature so, in case of broker failure, other brokers can continue.</li>\n<li><code>Durable</code> - Retention time can be set to persist the message on disk.</li>\n<li><code>Performace</code> - Kafka has high throughput for both publishing and subscribing messages.</li>\n<li><code>No data Loss</code> - Due to replicas</li>\n<li><code>Zero downtime</code> - When more clusters are to be added.</li>\n</ul>\n<p>\n<span class=\"underline\">Why use Kafka over SQS and SNS</span>?\nMultiple consumers (consumer group) are supported in Kafka, whereas in SQS one consumer can subscribe to each queue. So SQS is <b>pull based</b> and <b>point to point</b>.\nSNS offers publish/subscribe like kafka but there is no retention.\n</p>\n<ul class=\"org-ul\">\n<li>Kakfa is highly scalable and supports high payload.</li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org9a77310\">\n<h2 id=\"org9a77310\">Key Terminologies</h2>\n<div class=\"outline-text-2\" id=\"text-org9a77310\">\n<p>\n<code>Broker</code> - Software processes which maintain the published messages. They maintain the consumer <b>offsets</b> to ensure proper delivery of messages.\n</p>\n<p>\n<code>Zookeeper</code> - Monitors kafka cluster and co-ordinate with each broker. Helps in electing the <b>Controller</b> within kafka clusters. Group of zookeepers are called <b>Zookeeper Ensemble</b>.\nThere is one zookeeper leader elected. No of zookeepers should be odd. e.g 3, 5 ..\n</p>\n<p>\n<code>Topic</code> - A Stream of messages belonging to a particular category is called a topic. It is analogous to table in database. The unique identifier of a topic is its <b>name</b>.\n</p>\n<p>\n<code>Partition</code> - Topics are splitted into partitions. Messages within partition are ordered and immutable. Each message in a partition has unique id called <b>offset</b>.\nThe partitions can be distributed across different kafka brokers.\n</p>\n<p>\n<code>Replica</code> - Replicas are backup of a partition. They are not read or write data while main partions are alive. They are used to prevent data loss.\nThese are also distributed across brokers.\n</p>\n<ul class=\"org-ul\">\n<li>Partions are distributed to brokers in round-robin fashion.</li>\n<li>A publisher publishes its message to partitions in round-robin fashion. (It's configurable to send to specific parition)</li>\n</ul>\n<p>\n<code>Producer</code> - Producers are the applications which write/publish data to the topics within a cluster using Producing APIs. Producers can produce data on topic level or even\nspecific partition of the topic.\n</p>\n<p>\n<code>Consumer</code> - Consumers also can consume data at topic level or partition level. Consumers are associated to exactly one <b>Consumer Group</b> (Related Consumers)\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org1662d07\">\n<h2 id=\"org1662d07\">Topic</h2>\n<div class=\"outline-text-2\" id=\"text-org1662d07\">\n<p>\nAfter kafka and zookeepes are installed, following commands are useful to get information about topic. \n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org36e84c5\">\n<h3 id=\"org36e84c5\">Create a Topic</h3>\n<div class=\"outline-text-3\" id=\"text-org36e84c5\">\n<p>\n<b>replication-factor</b> param can't me more than kafka broker.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nbin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic myTopic --partitions 1 --replication-factor 1\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgb3eed9d\">\n<h3 id=\"orgb3eed9d\">Alter Topic Partition</h3>\n<div class=\"outline-text-3\" id=\"text-orgb3eed9d\">\n<p>\nPartitions can only be increased.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nbin/kafka-topics.sh --bootstrap-server localhost:9092 --alter --topic myTopic --partitions 2\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orge38df6c\">\n<h3 id=\"orge38df6c\">Partition Reassignment</h3>\n<div class=\"outline-text-3\" id=\"text-orge38df6c\">\n<p>\nUse cases. All below are handled by <b>controller</b> node.\n</p>\n<ol class=\"org-ol\">\n<li>Move partitions across brokers</li>\n<li>Selectively move replicas of a partition to specific set of brokers</li>\n<li>Increasing the replication factor as in above step.</li>\n</ol>\n</div>\n<div class=\"outline-4\" id=\"outline-container-orgfd37342\">\n<h4 id=\"orgfd37342\">Commands</h4>\n<div class=\"outline-text-4\" id=\"text-orgfd37342\">\n<p>\nThe <code>sample-file.json</code> should be as follows. The partitions of <code>myTopic</code> have leaders which can be changed with following commands.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #f1fa8c;\">\"topics\"</span> : <span style=\"color: #ff79c6;\">[</span><span style=\"color: #50fa7b;\">{</span><span style=\"color: #f1fa8c;\">\"topic\"</span>: <span style=\"color: #f1fa8c;\">\"myTopic\"</span><span style=\"color: #50fa7b;\">}</span><span style=\"color: #ff79c6;\">]</span>,\n  <span style=\"color: #f1fa8c;\">\"version\"</span>: 1\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\nFollowing command is to change the change the leaders of partitions (for topic myTopic) to have leaders from brokers.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\n<span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">Generate - </span>\nbin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --topics-to-move-json-file <span style=\"color: #61bfff;\">{</span>sample-file.json<span style=\"color: #61bfff;\">}</span> --broker-list <span style=\"color: #f1fa8c;\">\"2,3\"</span> --generate\n<span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">Execute</span>\nbin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file <span style=\"color: #61bfff;\">{</span>file-generated-above.json<span style=\"color: #61bfff;\">}</span> --execute\n<span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">Verify</span>\nbin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file <span style=\"color: #61bfff;\">{</span>file-generated-above.json<span style=\"color: #61bfff;\">}</span> --verify\n\n</pre>\n</div>\n<p>\n<b>Similarly in the generated file, replication broker can also be changed</b> and execute to take the effect.\n</p>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgf3fadde\">\n<h3 id=\"orgf3fadde\">List Topics</h3>\n<div class=\"outline-text-3\" id=\"text-orgf3fadde\">\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nbin/kafka-topics.sh --bootstrap-server localhost:9092 --list\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org623b04f\">\n<h3 id=\"org623b04f\">Describe a Topic</h3>\n<div class=\"outline-text-3\" id=\"text-org623b04f\">\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nbin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic myTopic\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org2d8dd72\">\n<h3 id=\"org2d8dd72\">Console Producer</h3>\n<div class=\"outline-text-3\" id=\"text-org2d8dd72\">\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nbin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic myTopic\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgeb4e7d8\">\n<h3 id=\"orgeb4e7d8\">Console Consumer</h3>\n<div class=\"outline-text-3\" id=\"text-orgeb4e7d8\">\n<p>\nWe can add the group name at end of following command with param <code>--group myConsumerGroup</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nbin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic myTopic --from-beginning\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org0b0da33\">\n<h3 id=\"org0b0da33\">List Consumer Groups</h3>\n<div class=\"outline-text-3\" id=\"text-org0b0da33\">\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nbin/kafka-consumer-group.sh --bootstrap-server localhost:9092 --list\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org721b2f8\">\n<h3 id=\"org721b2f8\">Describe Consumer Group</h3>\n<div class=\"outline-text-3\" id=\"text-org721b2f8\">\n<p>\nFrom the output of above get a group and analyse using\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nbin/kafka-consumer-group.sh --bootstrap-server localhost:9092 --describe --group <span style=\"color: #61bfff;\">{</span>group-name<span style=\"color: #61bfff;\">}</span>\n\n</pre>\n</div>\n<p>\n<b>Kafka automatically creates a topic named <code>__consumer_offsets</code> for tracking the consumer details</b>\n</p>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org7572c43\">\n<h2 id=\"org7572c43\">Setup Zookeeper</h2>\n<div class=\"outline-text-2\" id=\"text-org7572c43\">\n<p>\n<a href=\"https://zookeeper.apache.org/doc/r3.3.3/zookeeperAdmin.html\">Offical Documentation</a>\nDownload the zookeeper archive from apache and extract it. <code>./bin/zkServer.sh</code> is the required file to run which can take configuration file <code>zoo.cfg</code> (create manually) stored at\n<code>./conf/</code> directory. \n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-yaml\">\n<span style=\"color: #ffc9e8;\">tickTime</span>: 2000                       <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">the no. of miliseconds of each tick</span>\n<span style=\"color: #ffc9e8;\">initLimit</span>: 10                        <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">the no. of ticks initial synchronisation can take  </span>\n<span style=\"color: #ffc9e8;\">syncLimit</span>: 5                         <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">the no. of ticks that can pass between sending a request and getting an acknowledgement</span>\n<span style=\"color: #ffc9e8;\">dataDir</span>: /temp/zookeeper-1           <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">the directory where the snapshot is stored. Change it if multiple zookeepers are setup. Create all these directories</span>\n<span style=\"color: #ffc9e8;\">clientPort</span>: 2181                     <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">the port clients will connect to. Change it for running different zookeepers. e.g 2182 for second zookeeper</span>\n<span style=\"color: #ffc9e8;\">maxClientCnxns</span>: 60\n<span style=\"color: #ffc9e8;\">4lw.commands.whitelist</span>: *\n\n<span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">1, 2, 3 are identifier</span>\n<span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">create a file myid in /temp/zookeeper-1 with content 1, similarly with 2 and 3, with command 'echo 1 &gt;&gt; /temp/zookeeper-1/myid'</span>\n<span style=\"color: #ffc9e8;\">server.1</span>: localhost:2788:3788        <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">first port is used for communications among zookeepers, second port is for electing leader.</span>\n<span style=\"color: #ffc9e8;\">server.2</span>: localhost:2888:3888 \n<span style=\"color: #ffc9e8;\">server.3</span>: localhost:2988:3988\n\n</pre>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org970b86d\">\n<h3 id=\"org970b86d\">Check status</h3>\n<div class=\"outline-text-3\" id=\"text-org970b86d\">\n<p>\nThe status of zookeepers running at client ports can be checked by following command. It also tells us if zookeeper is follower or leader.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\n<span style=\"color: #ffb86c;\">echo</span> stat | nc localhost 2181\n\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org94df64b\">\n<h2 id=\"org94df64b\">Setup Kafka Cluster</h2>\n<div class=\"outline-text-2\" id=\"text-org94df64b\">\n<p>\nLike above create three copies of downloaded kafka archive and extract into three folders. e.g node-1, node-2, node-3\nYou can edit the <code>conf/server.properties</code> file with following keys.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-yaml\">\n<span style=\"color: #ffc9e8;\">broker.id</span>: 1                                                             <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">2 and 3 for setting 3 brokers</span>\n<span style=\"color: #ffc9e8;\">listeners</span>: PLAINTEXT://localhost:9092                                    <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">change port with multiple broker setup</span>\n<span style=\"color: #ffc9e8;\">log.dirs</span>: /tmp/kafka-logs-1                                              <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">2 and 3 for setting 3 brokers</span>\n<span style=\"color: #ffc9e8;\">zookeeper.connect</span>: localhost:2181,localhost:2182,localhost:2183          <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">the client port configured in above zookeeper setup</span>\n\n</pre>\n</div>\n<p>\nStart the kafka broker with following command\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nbin/kafka-server-start.sh config/server.properties\n\n</pre>\n</div>\n<p>\nCheck if the zookeeper is using these brokers created. Second command tells about <b>controller</b> broker\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\n<span style=\"color: #ffb86c;\">echo</span> dump | nc localhost 2181 | grep brokers\n\n<span style=\"color: #ffb86c;\">echo</span> dump | nc localhost 2181                         <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">for checking controller broker</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org73b13f6\">\n<h2 id=\"org73b13f6\">Internals of Topics, Partitions and Replication</h2>\n<div class=\"outline-text-2\" id=\"text-org73b13f6\">\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nbin/kafka-topics.sh --bootstrap-server localhost:9092,localhost:9093,localhost:9094 --create --topic myTopic --partitions 3 --replication-factor 2\n\n</pre>\n</div>\n<p>\nDescribe command returns following result.\n<span class=\"underline\">Parition-0</span>\n  Parition-0         Leader-1        Replicas-1,2           ISR-1,2\n</p>\n<ul class=\"org-ul\">\n<li>Partition-0 is present in broker-1,2</li>\n<li>Leader-1 means Read and Write to this partition will be coordinated by broker-1</li>\n<li>Partion-0 has replicas in broker-1,2</li>\n<li>The ISR (<b>In Sync Replica</b>) are present in broker-1,2. It can also be only in broker-1 if broker-2 is down.</li>\n</ul>\n<p>\n<span class=\"underline\">Parition-1</span>\n  Parition-1         Leader-2        Replicas-2,3           ISR-2,3\n</p>\n<p>\n<span class=\"underline\">Parition-2</span>\n  Parition-2         Leader-3        Replicas-3,1           ISR-3,1    \n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org7e2b5ce\">\n<h3 id=\"org7e2b5ce\">States of Partition when we create a Topic</h3>\n<div class=\"outline-text-3\" id=\"text-org7e2b5ce\">\n<p>\n<b>Controller</b> broker manages the state of partition and replicas anf for performing administrative tasks like reassigning partitions.\n</p>\n<ol class=\"org-ol\">\n<li><b>NonExistentPartition</b> - Partition was never created or was deleted.</li>\n<li><b>NewPartition</b> - In this state partition should have replica assigned to it, but no leader/isr yet</li>\n<li><b>OnlinePartition</b> - Once a leader is elected for the partition it is in this online state</li>\n<li><b>OfflinePartition</b> - If after above state, the leader partition dies, then partition moves to offline state.</li>\n</ol>\n<p>\nSimilarly replicas also have states - <b>NonExistentReplica</b>, <b>NewReplica</b>, <b>OnlineReplica</b>, <b>OfflineReplica</b>\n</p>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org785a30b\">\n<h2 id=\"org785a30b\">Offsets in Kafka</h2>\n<div class=\"outline-text-2\" id=\"text-org785a30b\">\n<p>\n<code>Producer.send()</code> - Sends the messages in round-robin fashion to parition (This is by default)\n<b>Offset</b> is a property of partition (an identifier of record). <b>Offsets are maintained for each consumer group</b>. Consider producer has to send 10 messages {a, b, c, d, e, f, g, h, i, j}\nBelow topic consists of 3 partitions and messages are distributed in round-robin by default. \n</p>\n<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">\n<colgroup>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-right\"/>\n<col class=\"org-right\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-left\" scope=\"col\">partition (row)/offset(col)</th>\n<th class=\"org-left\" scope=\"col\">0</th>\n<th class=\"org-left\" scope=\"col\">1</th>\n<th class=\"org-left\" scope=\"col\">3</th>\n<th class=\"org-left\" scope=\"col\">4</th>\n<th class=\"org-right\" scope=\"col\">5</th>\n<th class=\"org-right\" scope=\"col\">6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">Partition-0</td>\n<td class=\"org-left\">a</td>\n<td class=\"org-left\">d</td>\n<td class=\"org-left\">g</td>\n<td class=\"org-left\">j</td>\n<td class=\"org-right\"> </td>\n<td class=\"org-right\"> </td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\">Partition-1</td>\n<td class=\"org-left\">b</td>\n<td class=\"org-left\">e</td>\n<td class=\"org-left\">h</td>\n<td class=\"org-left\"> </td>\n<td class=\"org-right\"> </td>\n<td class=\"org-right\"> </td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\">Partition-2</td>\n<td class=\"org-left\">c</td>\n<td class=\"org-left\">f</td>\n<td class=\"org-left\">i</td>\n<td class=\"org-left\"> </td>\n<td class=\"org-right\"> </td>\n<td class=\"org-right\"> </td>\n</tr>\n</tbody>\n</table>\n<ol class=\"org-ol\">\n<li><code>Log-end offset</code> - Offset of the last message written to a log/partition</li>\n<li><code>Current offset</code> - Pointer to the last record that kafka has already sent to a consumer group in the most recent poll. (<code>Consumer.poll()</code>)</li>\n<li><code>Commited offset</code> - Marking an offset as consumed is called commited offset. (<code>Consumer.commit()</code>)</li>\n</ol>\n<p>\n<span class=\"underline\">Messages</span> sent by producer\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #f1fa8c;\">\"key\"</span>: <span style=\"color: #f1fa8c;\">\" &lt;for sending to specific partition, same keys will be sent to same partition&gt;\"</span>,\n  <span style=\"color: #f1fa8c;\">\"payload\"</span>: <span style=\"color: #f1fa8c;\">\"Message body\"</span>x\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\nInternally above message is stored in filesystem with more metadata as shown below.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #f1fa8c;\">\"key\"</span>: <span style=\"color: #f1fa8c;\">\" &lt;for sending to specific partition, same keys will be sent to same partition&gt;\"</span>,\n  <span style=\"color: #f1fa8c;\">\"payload\"</span>: <span style=\"color: #f1fa8c;\">\"Message body\"</span>,\n  <span style=\"color: #f1fa8c;\">\"topic\"</span>: <span style=\"color: #f1fa8c;\">\"myTopic\"</span>,\n  <span style=\"color: #f1fa8c;\">\"partition\"</span>: <span style=\"color: #f1fa8c;\">\"1\"</span>,\n  <span style=\"color: #f1fa8c;\">\"offset\"</span>: <span style=\"color: #f1fa8c;\">\"3\"</span>,\n  <span style=\"color: #f1fa8c;\">\"timestamp\"</span>: <span style=\"color: #f1fa8c;\">\"2022-03-01 12:12:00\"</span> \n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\n<span class=\"underline\">Messages</span> read by consumer\n<code>Consumer.poll()</code> - Request for new messages\n<code>Consumer.commit()</code> - Acknowledgement that message is read/consumer. There are three such type, 1-autoCommit(), 2-manualCommit()\n</p>\n<p>\n<b>max.poll.record</b> - x, configuration for reading x records at a time.\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgaf0692a\">\n<h2 id=\"orgaf0692a\">Internals of Consumer Group</h2>\n<div class=\"outline-text-2\" id=\"text-orgaf0692a\">\n<p>\n<b>Consumer group</b> is a logical entity (some microservice) which mainly provides parallel processing/Scalable message consumption to consumer clients.\nThere shouldn't be duplicate of message sent to consumers of same consumer group.\n</p>\n<p>\n<span class=\"underline\">Consumer Group Rebalancing</span> : The process of re-distributing partitions to consumers within the same consumer group is known as Consumer Group Rebalancing.\n</p>\n<p>\n<code>p0 ---&gt; c1 &lt;---p2</code> <code>p0 ---&gt;c1   c2&lt;--p2</code>\n<code>|</code> <code>|</code>\n<code>p1</code> <code>p1</code>\n</p>\n<p>\n1 consumer in a group                    2 consumers in a group (Same partition will not send message to multiple consumers, hence prevents duplicate)\n</p>\n<p>\n<b>Note: Creating more consumers will sit idle, since they can't subscribe to any partition</b>.\n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org5ead9f0\">\n<h3 id=\"org5ead9f0\">Group Coordinator</h3>\n<div class=\"outline-text-3\" id=\"text-org5ead9f0\">\n<p>\nBrokers from cluster are assigned as group coordinator for handling a subset of consumer groups.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgcab2d9f\">\n<h3 id=\"orgcab2d9f\">Group Leader</h3>\n<div class=\"outline-text-3\" id=\"text-orgcab2d9f\">\n<p>\nFirst consumer to join the consumer group is elected as the <b>Group Leader</b>. It has the list of active memebers in that consumer gorup.\nIt executes group Rebalances.\n</p>\n<p>\n<b>When a consumer joins these API calls happen: <code>FindCoordinator</code>  -&gt;  <code>JoinGroup</code>  -&gt;  <code>SyncGroup</code> .</b>\nEach consumer periodically sends <b>Hearbeat</b> request to Group Coordinator to keep its session alive\n</p>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgd879ac9\">\n<h2 id=\"orgd879ac9\">Kafka Producer Configs</h2>\n<div class=\"outline-text-2\" id=\"text-orgd879ac9\">\n<p>\n<code>bootstrap.server</code> - List of host/port pairs used by Producer to establish initial connection with kafka clusters. The list should be of form <b>host1:port1,host2:port2,host3:port3</b>\nThe list needn't contain all host:port pairs. One pair is enough to make connections with rest.\n<code>client.id</code> - Producer is given id string ssed to trace the requests for debugging purpose.\n<code>key.serializer</code> - Serializer class, Is a process of converting an object into stream of bytes. (defaulted to byte array serializer)\n<code>value.serializer</code> - Same as above but used for serializing value(payload) (defaulted to byte array serializer)\n<code>connections.max.idle.ms</code> - Close idle connections after the no. of miliseconds specified by this config. (Default 540000ms=9mins)\n</p>\n<p>\nACKS - When producer sends record, it waits for the acknowledgement from cluster.\n<code>Acks=0</code> - The producer will not wait for any acknowledgment from server. There is no guarantee that cluster has recieved the message.\n<code>Acks=1</code> - (<b>Default</b>) The leader will write record to its local log, but will respond without awaiting full acks from followers. In this case the Leader should be very healthy.\n<code>Acks=-1</code> - This is the <b>strongest available guarantee</b>. This means the leader will wait for full set of in-sync replicas to acknowledge. This is same as acks=all\n</p>\n<p>\n<code>compression.type</code> - Used to compress the message. Kafka supports <b>none</b>, <b>gzip</b>, <b>snap</b>, <b>lz4</b>, <b>zstd</b>\n<code>batch.size</code> - The message are sent to cluster in batches of this size to be sent to same replica.\n<code>buffer.memory</code> - buffer memory are where batches are stored in memory of the producer.\n<code>linger.ms</code> - Rather than immediately sending out a record, producer will wait for upto given delay(<b>linger.ms</b>) to allow other records to be sent so that sends can be batched together.  \n<code>max.request.size</code> - maximum size of request in byte.\n</p>\n<p>\nAll above properties can be overriden in file <code>config/producer.properties</code>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org3fc1733\">\n<h2 id=\"org3fc1733\">Kafka Consumer Configs</h2>\n<div class=\"outline-text-2\" id=\"text-org3fc1733\">\n<p>\n<code>bootstrap.server</code> - Same as producer configs. Check above\n<code>client.id</code> - An id string to pass to the server when making a request.\n<code>key.deserializer</code> - Reverse of serializer. Converting bytes into objects\n<code>group.id</code> - The unique string that identifies the group that this consumer belongs to.\n<code>fetch.minimum.byte</code> - The minimum amount of data the server should return for a fetch request. The server should accumulate this much data, then only it'll return.\n<code>heartbeat.interval.ms</code> - The consumer sends health status to group coordinator. Value should be lower than <b>session.timeout.ms</b> given below, typically shoud be &gt; 1/3rd of session.timeout.ms\n<code>session.timeout.ms</code> - Used to detect client failures. After this time if no heartbeat is recieved by group coordinator will assume it dead and rebalances occur.\n<code>max.partition.fetch.bytes</code> - Maximum amount of data per-partition the server will return.\n<code>fetch.max.bytes</code> - The maximum amount the server should return for a fetch request.\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/course-kafka",
		"heading_ids": [
			"org80efbd3",
			"org447ff0a",
			"org9a77310",
			"org1662d07",
			"org36e84c5",
			"orgb3eed9d",
			"orge38df6c",
			"orgfd37342",
			"orgf3fadde",
			"org623b04f",
			"org2d8dd72",
			"orgeb4e7d8",
			"org0b0da33",
			"org721b2f8",
			"org7572c43",
			"org970b86d",
			"org94df64b",
			"org73b13f6",
			"org7e2b5ce",
			"org785a30b",
			"orgaf0692a",
			"org5ead9f0",
			"orgcab2d9f",
			"orgd879ac9",
			"org3fc1733"
		]
	},
	{
		"title": "course-system-design",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgb979b43\">Movie Booking System</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgb979b43\">\n<h2 id=\"orgb979b43\">Movie Booking System</h2>\n<div class=\"outline-text-2\" id=\"text-orgb979b43\">\n<ol class=\"org-ol\">\n<li>Highly Concurrent</li>\n<li>Responsive UI</li>\n<li>Multiple cities</li>\n<li>Payments</li>\n<li>Movie suggestions</li>\n<li>Comments and ratings</li>\n<li>Movie info</li>\n<li>Send tickets by SMS</li>\n</ol>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/course-system-design",
		"heading_ids": [
			"orgb979b43"
		]
	},
	{
		"title": "just-testing",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org1c4bc46\">What the hell</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org1c4bc46\">\n<h2 id=\"org1c4bc46\">What the hell</h2>\n</div>\n</div>\n</body>",
		"path": "/content/just-testing",
		"heading_ids": [
			"org1c4bc46"
		]
	},
	{
		"title": "config-github",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgf37bad1\">Setup SSH key to github</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgf37bad1\">\n<h2 id=\"orgf37bad1\">Setup SSH key to github</h2>\n<div class=\"outline-text-2\" id=\"text-orgf37bad1\">\n<p>\n<a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">reference</a>\n</p>\n<p>\nGenerate the new SSH key pairs with command\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">ssh-keygen -t ed25519 -C <span style=\"color: #f1fa8c;\">\"mathura.dakshana15@gmail.com\"</span>\n</pre>\n</div>\n<p>\nThe command will create files <code>id_ed25519</code> and <code>id_ed25519.pub</code>\n</p>\n<p>\nStart <code>ssh-agent</code> in the background with command\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffb86c;\">eval</span> <span style=\"color: #f1fa8c;\">\"$(</span><span style=\"color: #bd93f9; font-weight: bold;\">ssh-agent -s</span><span style=\"color: #f1fa8c;\">)\"</span>\n</pre>\n</div>\n<p>\nAdd SSH private key you created to ssh-agent\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">ssh-add ~/.ssh/id_ed25519\n</pre>\n</div>\n<p>\nPaste the content of <code>id_ed25519.pub</code> to github.\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/config-github",
		"heading_ids": [
			"orgf37bad1"
		]
	},
	{
		"title": "exwm-desktop-configuration",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org26bbdf5\">Prerequisite</a></li>\n<li><a href=\"#org787d32e\">EXWM Desktop Configuration</a></li>\n<li><a href=\"#org50a2fc7\">EXWM Desktop Environment</a></li>\n<li><a href=\"#org5a95544\">Using Desktop Enviroment</a></li>\n<li><a href=\"#org78d6eb5\">Panel With Polybar</a></li>\n<li><a href=\"#orgdc4f5c2\">Polybar Configs</a></li>\n<li><a href=\"#org7d2d37f\">Xmodmap</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org26bbdf5\">\n<h2 id=\"org26bbdf5\">Prerequisite</h2>\n<div class=\"outline-text-2\" id=\"text-org26bbdf5\">\n<p>\nMake sure you have installed <code>nm-applet</code>, <code>pasystray</code>, <code>blueman</code>, <code>pavucontrol</code>, <code>feh</code>, <code>Fira Mono</code> font\n<code>scrot</code>, <code>brightnessctl</code>, <code>playerctl</code>, <code>slock</code>, <code>xss-lock</code>, <code>polybar</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\nsudo apt install compton\nsudo apt install feh\nsudo apt install scrot brightnessctl playerctl\nsudo apt install blueman pasystray pavucontrol\nsudo apt install slock xss-lock\nsudo apt install polybar\nsudo apt install fonts-font-awesome fonts-material-design-icons-iconfont\nsudo apt install fish\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org787d32e\">\n<h2 id=\"org787d32e\">EXWM Desktop Configuration</h2>\n<div class=\"outline-text-2\" id=\"text-org787d32e\">\n<p>\nCreate a following desktop entry and create symblinks with <code>sudo ln -f ~/.config/emacs/exwm/exwm.desktop /usr/share/xsessions/exwm.desktop</code>\n</p>\n<p>\n<b>Every time below conf is changed above symblink command should be executed</b>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-conf\">[<span style=\"color: #bd93f9;\">Desktop Entry</span>]\n<span style=\"color: #ffc9e8;\">Name</span>=EXWM\n<span style=\"color: #ffc9e8;\">Comment</span>=Emacs Window Manager\n<span style=\"color: #ffc9e8;\">Exec</span>=sh /home/math2do/.config/emacs/exwm/exwm-start.sh\n<span style=\"color: #ffc9e8;\">TryExec</span>=sh\n<span style=\"color: #ffc9e8;\">Type</span>=Application\n<span style=\"color: #ffc9e8;\">X-LightDM-DesktopName</span>=exwm\n<span style=\"color: #ffc9e8;\">DesktopNames</span>=exwm\n</pre>\n</div>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">!/bin/</span><span style=\"color: #ff79c6;\">sh</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">Run the screen compositor</span>\ncompton &amp;\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">Enable screen locking on suspend</span>\nxss-lock -- slock &amp;\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">Fire it up</span>\n/snap/emacs/2031/usr/bin/emacs -mm --debug-init -l ~/.config/emacs/desktop.el\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org50a2fc7\">\n<h2 id=\"org50a2fc7\">EXWM Desktop Environment</h2>\n<div class=\"outline-text-2\" id=\"text-org50a2fc7\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\">\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/exwm-update-class</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span>exwm-workspace-rename-buffer exwm-class-name<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/run-in-background</span> <span style=\"color: #ff79c6;\">(</span>command<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">let</span> <span style=\"color: #50fa7b;\">(</span><span style=\"color: #bd93f9;\">(</span>command-parts <span style=\"color: #0189cc;\">(</span>split-string command <span style=\"color: #f1fa8c;\">\"[ ]+\"</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>apply #'call-process `<span style=\"color: #bd93f9;\">(</span>,<span style=\"color: #0189cc;\">(</span>car command-parts<span style=\"color: #0189cc;\">)</span> nil 0 nil ,@<span style=\"color: #0189cc;\">(</span>cdr command-parts<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/exwm-init-hook</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Make workspace 1 be the one where we land at startup</span>\n  <span style=\"color: #ff79c6;\">(</span>exwm-workspace-switch-create 1<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Open eshell by default</span>\n  <span style=\"color: #ff79c6;\">(</span>eshell<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Show battery status in the mode line</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(display-battery-mode 1)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Show the time and date in modeline</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> display-time-day-and-date t<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(display-time-mode 1)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Also take a look at display-time-format and format-time-string</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Launch apps that will run in the background</span>\n  <span style=\"color: #ff79c6;\">(</span>efs/run-in-background <span style=\"color: #f1fa8c;\">\"nm-applet\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>efs/run-in-background <span style=\"color: #f1fa8c;\">\"pasystray\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(efs/run-in-background \"pavucontrol\") ;; launch app manually</span>\n  <span style=\"color: #ff79c6;\">(</span>efs/run-in-background <span style=\"color: #f1fa8c;\">\"blueman-applet\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/set-wallpaper</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>start-process-shell-command\n   <span style=\"color: #f1fa8c;\">\"feh\"</span> nil  <span style=\"color: #f1fa8c;\">\"feh --bg-scale /usr/share/backgrounds/Mirror_by_Uday_Nakade.jpg\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/exwm-update-title</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">pcase</span> exwm-class-name\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"firefox\"</span> <span style=\"color: #bd93f9;\">(</span>exwm-workspace-rename-buffer <span style=\"color: #0189cc;\">(</span>format <span style=\"color: #f1fa8c;\">\"Firefox: %s\"</span> exwm-title<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"Google-chrome\"</span> <span style=\"color: #bd93f9;\">(</span>exwm-workspace-rename-buffer <span style=\"color: #0189cc;\">(</span>format <span style=\"color: #f1fa8c;\">\"Google-chrome: %s\"</span> exwm-title<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/configure-window-by-class</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">pcase</span> exwm-class-name\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"firefox\"</span> <span style=\"color: #bd93f9;\">(</span>exwm-workspace-move-window 2<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"Sol\"</span> <span style=\"color: #bd93f9;\">(</span>exwm-workspace-move-window 3<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\"mpv\"</span> <span style=\"color: #bd93f9;\">(</span>exwm-floating-toggle-floating<span style=\"color: #bd93f9;\">)</span> <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">float window</span>\n     <span style=\"color: #bd93f9;\">(</span>exwm-layout-toggle-mode-line<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">hide mode line</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">exwm</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Set the default number of workspaces</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> exwm-workspace-number 5<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">When window \"class\" updates, use it to set the buffer name</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'exwm-update-class-hook #'efs/exwm-update-class<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">When window title updates, use it to set the buffer name</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'exwm-update-title-hook #'efs/exwm-update-title<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Configure windows as they're created</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'exwm-manage-finish-hook #'efs/configure-window-by-class<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">When EXWM finishes initialization, do some extra setup</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'exwm-init-hook #'efs/exwm-init-hook<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Rebind CapsLock to Ctrl</span>\n  <span style=\"color: #ff79c6;\">(</span>start-process-shell-command <span style=\"color: #f1fa8c;\">\"xmodmap\"</span> nil <span style=\"color: #f1fa8c;\">\"xmodmap ~/.config/emacs/exwm/Xmodmap\"</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Automatically move EXWM buffer to current workspace when selected</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> exwm-layout-show-all-buffers t<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Display all EXWM buffers in every workspace buffer list</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> exwm-workspace-show-all-buffers t<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Detach the minibuffer (show it with exwm-workspace-toggle-minibuffer)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(setq exwm-workspace-minibuffer-position 'bottom)  ;; can be top</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Set the screen resolution (update this to be the correct resolution for your screen!)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">require</span> '<span style=\"color: #8be9fd;\">exwm-randr</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>exwm-randr-enable<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(start-process-shell-command \"xrandr\" nil \"xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal\")</span>\n\n  <span style=\"color: #ff79c6;\">(</span>efs/set-wallpaper<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Load the system tray before exwm-init, don't use with polybar</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(require 'exwm-systemtray)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(setq exwm-systemtray-height 32)</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(exwm-systemtray-enable)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Start the Polybar panel</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(efs/start-panel)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">These keys should always pass through to Emacs</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> exwm-input-prefix-keys\n        '<span style=\"color: #50fa7b;\">(</span>?\\C-x\n          ?\\C-u\n          ?\\C-h\n          ?\\M-x\n          ?\\M-`\n          ?\\M-&amp;\n          ?\\M-:\n          ?\\C-\\M-j  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Buffer list</span>\n          ?\\C-\\ <span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Ctrl+Space</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Ctrl+Q will enable the next key to be sent directly</span>\n  <span style=\"color: #ff79c6;\">(</span>define-key exwm-mode-map <span style=\"color: #50fa7b;\">[</span>?\\C-q<span style=\"color: #50fa7b;\">]</span> 'exwm-input-send-next-key<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Set up global key bindings.  These always work, no matter the input state!</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Keep in mind that changing this list after EXWM initializes has no effect.</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> exwm-input-global-keys\n        `<span style=\"color: #50fa7b;\">(</span>\n          <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">[</span>?\\s-r<span style=\"color: #0189cc;\">]</span> . exwm-reset<span style=\"color: #bd93f9;\">)</span>\n\n          <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Move between windows</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">[</span>s-left<span style=\"color: #0189cc;\">]</span> . windmove-left<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">[</span>s-right<span style=\"color: #0189cc;\">]</span> . windmove-right<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">[</span>s-up<span style=\"color: #0189cc;\">]</span> . windmove-up<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">[</span>s-down<span style=\"color: #0189cc;\">]</span> . windmove-down<span style=\"color: #bd93f9;\">)</span>\n\n          <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Launch applications via shell command</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">[</span>?\\s-&amp;<span style=\"color: #0189cc;\">]</span> . <span style=\"color: #0189cc;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #61bfff;\">(</span>command<span style=\"color: #61bfff;\">)</span>\n                       <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">interactive</span> <span style=\"color: #ff79c6;\">(</span>list <span style=\"color: #50fa7b;\">(</span>read-shell-command <span style=\"color: #f1fa8c;\">\"$ \"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n                       <span style=\"color: #61bfff;\">(</span>start-process-shell-command command nil command<span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n\n          <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Switch workspace</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">[</span>?\\s-w<span style=\"color: #0189cc;\">]</span> . exwm-workspace-switch<span style=\"color: #bd93f9;\">)</span>\n          <span style=\"color: #bd93f9;\">(</span><span style=\"color: #0189cc;\">[</span>?\\s-`<span style=\"color: #0189cc;\">]</span> . <span style=\"color: #0189cc;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #61bfff;\">(</span>exwm-workspace-switch-create 0<span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span>\n\n          <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">'</span><span style=\"color: #8be9fd;\">s-N</span><span style=\"color: #6272a4;\">': Switch to certain workspace with Super (Win) plus a number key (0 - 9)</span>\n          ,@<span style=\"color: #bd93f9;\">(</span>mapcar <span style=\"color: #0189cc;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #61bfff;\">(</span>i<span style=\"color: #61bfff;\">)</span>\n                      `<span style=\"color: #61bfff;\">(</span>,<span style=\"color: #ff79c6;\">(</span>kbd <span style=\"color: #50fa7b;\">(</span>format <span style=\"color: #f1fa8c;\">\"s-%d\"</span> i<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span> .\n                        <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">lambda</span> <span style=\"color: #50fa7b;\">()</span>\n                          <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #50fa7b;\">)</span>\n                          <span style=\"color: #50fa7b;\">(</span>exwm-workspace-switch-create ,i<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span><span style=\"color: #0189cc;\">)</span>\n                    <span style=\"color: #0189cc;\">(</span>number-sequence 0 9<span style=\"color: #0189cc;\">)</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span>exwm-input-set-key <span style=\"color: #50fa7b;\">(</span>kbd <span style=\"color: #f1fa8c;\">\"M-SPC\"</span><span style=\"color: #50fa7b;\">)</span> 'counsel-linux-app<span style=\"color: #ff79c6;\">)</span> <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">my win key(which is super key=s) of keychrone not working</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">(exwm-input-set-key (kbd \"s-f\") 'exwm-layout-toggle-fullscreen)</span>\n\n  <span style=\"color: #ff79c6;\">(</span>exwm-enable<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org5a95544\">\n<h2 id=\"org5a95544\">Using Desktop Enviroment</h2>\n<div class=\"outline-text-2\" id=\"text-org5a95544\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\">\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">desktop-environment</span>\n  <span style=\"color: #ffb86c;\">:after</span> exwm\n  <span style=\"color: #ffb86c;\">:config</span> <span style=\"color: #ff79c6;\">(</span>desktop-environment-mode<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:custom</span>\n  <span style=\"color: #ff79c6;\">(</span>desktop-environment-brightness-small-increment <span style=\"color: #f1fa8c;\">\"2%+\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>desktop-environment-brightness-small-decrement <span style=\"color: #f1fa8c;\">\"2%-\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>desktop-environment-brightness-normal-increment <span style=\"color: #f1fa8c;\">\"5%+\"</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>desktop-environment-brightness-normal-decrement <span style=\"color: #f1fa8c;\">\"5%-\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org78d6eb5\">\n<h2 id=\"org78d6eb5\">Panel With Polybar</h2>\n<div class=\"outline-text-2\" id=\"text-org78d6eb5\">\n<div class=\"org-src-container\">\n<pre class=\"src src-conf\">; Docs: https://github.com/polybar/polybar\n<span style=\"color: #ffc9e8;\">;</span>==========================================================\n\n[<span style=\"color: #bd93f9;\">settings</span>]\n<span style=\"color: #ffc9e8;\">screenchange-reload</span> = true\n\n[<span style=\"color: #bd93f9;\">global/wm</span>]\n<span style=\"color: #ffc9e8;\">margin-top</span> = 0\n<span style=\"color: #ffc9e8;\">margin-bottom</span> = 0\n\n[<span style=\"color: #bd93f9;\">colors</span>]\n<span style=\"color: #ffc9e8;\">background</span> = <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">f0232635</span>\n<span style=\"color: #ffc9e8;\">background-alt</span> = <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">576075</span>\n<span style=\"color: #ffc9e8;\">foreground</span> = <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">A6Accd</span>\n<span style=\"color: #ffc9e8;\">foreground-alt</span> = <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">555</span>\n<span style=\"color: #ffc9e8;\">primary</span> = <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">ffb52a</span>\n<span style=\"color: #ffc9e8;\">secondary</span> = <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">e60053</span>\n<span style=\"color: #ffc9e8;\">alert</span> = <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">bd2c40</span>\n<span style=\"color: #ffc9e8;\">underline-1</span> = <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">c792ea</span>\n\n[<span style=\"color: #bd93f9;\">bar/panel</span>]\n<span style=\"color: #ffc9e8;\">width</span> = 100%\n<span style=\"color: #ffc9e8;\">height</span> = 20\n<span style=\"color: #ffc9e8;\">offset-x</span> = 0\n<span style=\"color: #ffc9e8;\">offset-y</span> = 0\n<span style=\"color: #ffc9e8;\">fixed-center</span> = true\n<span style=\"color: #ffc9e8;\">enable-ipc</span> = true\n\n<span style=\"color: #ffc9e8;\">background</span> = ${colors.background}\n<span style=\"color: #ffc9e8;\">foreground</span> = ${colors.foreground}\n<span style=\"color: #ffc9e8;\">line-size</span> = 2\n<span style=\"color: #ffc9e8;\">line-color</span> = <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">f00</span>\n\n<span style=\"color: #ffc9e8;\">border-size</span> = 0\n<span style=\"color: #ffc9e8;\">border-color</span> = <span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">00000000</span>\n\n<span style=\"color: #ffc9e8;\">padding-top</span> = 5\n<span style=\"color: #ffc9e8;\">padding-left</span> = 1\n<span style=\"color: #ffc9e8;\">padding-right</span> = 1\n\n<span style=\"color: #ffc9e8;\">module-margin</span> = 1\n\n<span style=\"color: #ffc9e8;\">font-0</span> = <span style=\"color: #f1fa8c;\">\"Cantarell:size=12:weight=bold;2\"</span>  \n<span style=\"color: #ffc9e8;\">font-1</span> = <span style=\"color: #f1fa8c;\">\"Font Awesome:size=12;2\"</span>\n<span style=\"color: #ffc9e8;\">font-2</span> = <span style=\"color: #f1fa8c;\">\"Material Icons:size=12;5\"</span>\n<span style=\"color: #ffc9e8;\">font-3</span> = <span style=\"color: #f1fa8c;\">\"Fira Mono:size=12;-3\"</span>\n\n<span style=\"color: #ffc9e8;\">modules-left</span> = exwm-workspace\n<span style=\"color: #ffc9e8;\">modules-right</span> = cpu date\n<span style=\"color: #ffc9e8;\">; modules-right</span> = cpu temperature battery date ;; in laptop\n\n<span style=\"color: #ffc9e8;\">tray-position</span> = right\n<span style=\"color: #ffc9e8;\">tray-padding</span> = 2\n<span style=\"color: #ffc9e8;\">tray-maxsize</span> = 28\n\n<span style=\"color: #ffc9e8;\">cursor-click</span> = pointer\n<span style=\"color: #ffc9e8;\">cursor-scroll</span> = ns-resize\n\n[<span style=\"color: #bd93f9;\">module/exwm-workspace</span>]\n<span style=\"color: #ffc9e8;\">type</span> = custom/ipc\n<span style=\"color: #ffc9e8;\">hook-0</span> = emacsclient -e <span style=\"color: #f1fa8c;\">\"(efs/polybar-exwm-workspace)\"</span> | sed -e <span style=\"color: #f1fa8c;\">'s/^\"//'</span> -e <span style=\"color: #f1fa8c;\">'s/\"$//'</span>\n<span style=\"color: #ffc9e8;\">initial</span> = 1\n<span style=\"color: #ffc9e8;\">format-underline</span> = ${colors.underline-1}\n<span style=\"color: #ffc9e8;\">format-padding</span> = 1\n\n[<span style=\"color: #bd93f9;\">module/cpu</span>]\n<span style=\"color: #ffc9e8;\">type</span> = internal/cpu\n<span style=\"color: #ffc9e8;\">interval</span> = 2\n<span style=\"color: #ffc9e8;\">format</span> = &lt;label&gt; &lt;ramp-coreload&gt;\n<span style=\"color: #ffc9e8;\">format-underline</span> = ${colors.underline-1}\n<span style=\"color: #ffc9e8;\">click-left</span> = emacsclient -e <span style=\"color: #f1fa8c;\">\"(proced)\"</span>\n<span style=\"color: #ffc9e8;\">label</span> = %percentage:2%%\n<span style=\"color: #ffc9e8;\">ramp-coreload-spacing</span> = 0\n<span style=\"color: #ffc9e8;\">ramp-coreload-0</span> = ▁\n<span style=\"color: #ffc9e8;\">ramp-coreload-0-foreground</span> = ${colors.foreground-alt}\n<span style=\"color: #ffc9e8;\">ramp-coreload-1</span> = ▂\n<span style=\"color: #ffc9e8;\">ramp-coreload-2</span> = ▃\n<span style=\"color: #ffc9e8;\">ramp-coreload-3</span> = ▄\n<span style=\"color: #ffc9e8;\">ramp-coreload-4</span> = ▅\n<span style=\"color: #ffc9e8;\">ramp-coreload-5</span> = ▆\n<span style=\"color: #ffc9e8;\">ramp-coreload-6</span> = ▇\n\n[<span style=\"color: #bd93f9;\">module/date</span>]\n<span style=\"color: #ffc9e8;\">type</span> = internal/date\n<span style=\"color: #ffc9e8;\">interval</span> = 5\n\n<span style=\"color: #ffc9e8;\">date</span> = <span style=\"color: #f1fa8c;\">\"%a %b %e\"</span>\n<span style=\"color: #ffc9e8;\">date-alt</span> = <span style=\"color: #f1fa8c;\">\"%A %B %d %Y\"</span>\n\n<span style=\"color: #ffc9e8;\">time</span> = %l:%M %p\n<span style=\"color: #ffc9e8;\">time-alt</span> = %H:%M:%S\n\n<span style=\"color: #ffc9e8;\">format-prefix-foreground</span> = ${colors.foreground-alt}\n<span style=\"color: #ffc9e8;\">format-underline</span> = ${colors.underline-1}\n\n<span style=\"color: #ffc9e8;\">label</span> = %date% %time%\n\n[<span style=\"color: #bd93f9;\">module/battery</span>]\n<span style=\"color: #ffc9e8;\">type</span> = internal/battery\n<span style=\"color: #ffc9e8;\">battery</span> = BAT0\n<span style=\"color: #ffc9e8;\">adapter</span> = ADP1\n<span style=\"color: #ffc9e8;\">full-at</span> = 98\n<span style=\"color: #ffc9e8;\">time-format</span> = %-l:%M\n\n<span style=\"color: #ffc9e8;\">label-charging</span> = %percentage%% / %time%\n<span style=\"color: #ffc9e8;\">format-charging</span> = &lt;animation-charging&gt; &lt;label-charging&gt;\n<span style=\"color: #ffc9e8;\">format-charging-underline</span> = ${colors.underline-1}\n\n<span style=\"color: #ffc9e8;\">label-discharging</span> = %percentage%% / %time%\n<span style=\"color: #ffc9e8;\">format-discharging</span> = &lt;ramp-capacity&gt; &lt;label-discharging&gt;\n<span style=\"color: #ffc9e8;\">format-discharging-underline</span> = ${self.format-charging-underline}\n\n<span style=\"color: #ffc9e8;\">format-full</span> = &lt;ramp-capacity&gt; &lt;label-full&gt;\n<span style=\"color: #ffc9e8;\">format-full-underline</span> = ${self.format-charging-underline}\n\n<span style=\"color: #ffc9e8;\">ramp-capacity-0</span> = \n<span style=\"color: #ffc9e8;\">ramp-capacity-1</span> = \n<span style=\"color: #ffc9e8;\">ramp-capacity-2</span> = \n<span style=\"color: #ffc9e8;\">ramp-capacity-3</span> = \n<span style=\"color: #ffc9e8;\">ramp-capacity-4</span> = \n\n<span style=\"color: #ffc9e8;\">animation-charging-0</span> = \n<span style=\"color: #ffc9e8;\">animation-charging-1</span> = \n<span style=\"color: #ffc9e8;\">animation-charging-2</span> = \n<span style=\"color: #ffc9e8;\">animation-charging-3</span> = \n<span style=\"color: #ffc9e8;\">animation-charging-4</span> = \n<span style=\"color: #ffc9e8;\">animation-charging-framerate</span> = 750\n\n[<span style=\"color: #bd93f9;\">module/temperature</span>]\n<span style=\"color: #ffc9e8;\">type</span> = internal/temperature\n<span style=\"color: #ffc9e8;\">thermal-zone</span> = 0\n<span style=\"color: #ffc9e8;\">warn-temperature</span> = 60\n\n<span style=\"color: #ffc9e8;\">format</span> = &lt;label&gt;\n<span style=\"color: #ffc9e8;\">format-underline</span> = ${colors.underline-1}\n<span style=\"color: #ffc9e8;\">format-warn</span> = &lt;label-warn&gt;\n<span style=\"color: #ffc9e8;\">format-warn-underline</span> = ${self.format-underline}\n\n<span style=\"color: #ffc9e8;\">label</span> = %temperature-c%\n<span style=\"color: #ffc9e8;\">label-warn</span> = %temperature-c%!\n<span style=\"color: #ffc9e8;\">label-warn-foreground</span> = ${colors.secondary}\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgdc4f5c2\">\n<h2 id=\"orgdc4f5c2\">Polybar Configs</h2>\n<div class=\"outline-text-2\" id=\"text-orgdc4f5c2\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Make sure the server is started (better to do this in your main Emacs config!)</span>\n<span style=\"color: #61bfff;\">(</span>server-start<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/polybar-exwm-workspace</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">pcase</span> exwm-workspace-current-index\n    <span style=\"color: #50fa7b;\">(</span>0 <span style=\"color: #f1fa8c;\">\"\"</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>1 <span style=\"color: #f1fa8c;\">\"\"</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>2 <span style=\"color: #f1fa8c;\">\"\"</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>3 <span style=\"color: #f1fa8c;\">\"\"</span><span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>4 <span style=\"color: #f1fa8c;\">\"\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defvar</span> <span style=\"color: #ffc9e8;\">efs/polybar-process</span> nil\n  <span style=\"color: #8995ba;\">\"Holds the process of the running Polybar instance, if any\"</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/kill-panel</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">when</span> efs/polybar-process\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">ignore-errors</span>\n      <span style=\"color: #bd93f9;\">(</span>kill-process efs/polybar-process<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> efs/polybar-process nil<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/start-panel</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">interactive</span><span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>efs/kill-panel<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> efs/polybar-process <span style=\"color: #50fa7b;\">(</span>start-process-shell-command <span style=\"color: #f1fa8c;\">\"polybar\"</span> nil <span style=\"color: #f1fa8c;\">\"polybar panel\"</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/send-polybar-hook</span> <span style=\"color: #ff79c6;\">(</span>module-name hook-index<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>start-process-shell-command <span style=\"color: #f1fa8c;\">\"polybar-msg\"</span> nil <span style=\"color: #50fa7b;\">(</span>format <span style=\"color: #f1fa8c;\">\"polybar-msg hook %s %s\"</span> module-name hook-index<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/send-polybar-exwm-workspace</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #ff79c6;\">(</span>efs/send-polybar-hook <span style=\"color: #f1fa8c;\">\"exwm-workspace\"</span> 1<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Update panel indicator when workspace changes</span>\n<span style=\"color: #61bfff;\">(</span>add-hook 'exwm-workspace-switch-hook #'efs/send-polybar-exwm-workspace<span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org7d2d37f\">\n<h2 id=\"org7d2d37f\">Xmodmap</h2>\n<div class=\"outline-text-2\" id=\"text-org7d2d37f\">\n<p>\nMake sure <code>xmodmap</code> is installed! This swaps CapsLock with Ctrl and places CapsLock on the Ctrl on the right side of the keyboard so you can get to it if needed.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-sh\">clear lock\nclear control\nkeycode 66 = Control_L\nadd control = Control_L\nadd Lock = Control_R\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/exwm-desktop-configuration",
		"heading_ids": [
			"org26bbdf5",
			"org787d32e",
			"org50a2fc7",
			"org5a95544",
			"org78d6eb5",
			"orgdc4f5c2",
			"org7d2d37f"
		]
	},
	{
		"title": "frontend-sass",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org532ff8b\">Introduction</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org532ff8b\">\n<h2 id=\"org532ff8b\">Introduction</h2>\n</div>\n</div>\n</body>",
		"path": "/content/frontend-sass",
		"heading_ids": [
			"org532ff8b"
		]
	},
	{
		"title": "frontend-css",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org68dd35e\">Introduction</a></li>\n<li><a href=\"#org6010986\">Common Rules</a></li>\n<li><a href=\"#orgd5e40ad\">Centering</a>\n<ul>\n<li><a href=\"#org27da099\">Centering Element Horizontally</a></li>\n</ul>\n</li>\n<li><a href=\"#org4fc5231\">::after And ::before</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org68dd35e\">\n<h2 id=\"org68dd35e\">Introduction</h2>\n<div class=\"outline-text-2\" id=\"text-org68dd35e\">\n<p>\nThis note on css is highly personalised to my own need. Ideally a design should be finalised in design tool like <code>Figma</code> and then use that design as reference.\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org6010986\">\n<h2 id=\"org6010986\">Common Rules</h2>\n<div class=\"outline-text-2\" id=\"text-org6010986\">\n<p>\nAt the top of the css which is styling the body of the html, put following css. This is like formula, we can simply use it.\nWith below config the font size can be set with <code>rem</code> unit i.e <code>12px</code> in Figma will be written as <code>1.2rem</code>\nSimilarly the margin, padding will be set with <code>em</code> unit and same as above divide the Figma px by 10, so <code>12px=1.2em</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-css\">\n<span style=\"color: #6272a4;\">/* </span><span style=\"color: #6272a4;\">remove , from beginning</span><span style=\"color: #6272a4;\"> */</span>\n<span style=\"color: #50fa7b;\">*</span><span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #bd93f9;\">padding</span>: 0;\n  <span style=\"color: #bd93f9;\">margin</span>: 0;\n  <span style=\"color: #bd93f9;\">font-family</span>: <span style=\"color: #f1fa8c;\">'Poppins'</span>, sans-serif;\n  <span style=\"color: #bd93f9;\">box-sizing</span>: border-box;\n  <span style=\"color: #bd93f9;\">font-size</span>: 62.5%;\n<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\">/* </span><span style=\"color: #6272a4;\">All the contents should be within this fixed container</span><span style=\"color: #6272a4;\"> */</span>\n<span style=\"color: #50fa7b;\">.container</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #bd93f9;\">max-width</span>: 1200px;\n  <span style=\"color: #bd93f9;\">margin</span>: 0 auto;\n<span style=\"color: #61bfff;\">}</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgd5e40ad\">\n<h2 id=\"orgd5e40ad\">Centering</h2>\n<div class=\"outline-text-2\" id=\"text-orgd5e40ad\">\n<p>\nBest way to center an child element is by following css rules. If we ignore <code>align-items</code> then element is aligned center horizontally.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-css\"><span style=\"color: #50fa7b;\">.parent</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #bd93f9;\">display</span>: flex;\n  <span style=\"color: #bd93f9;\">justify-content</span>: center;  <span style=\"color: #6272a4;\">/* </span><span style=\"color: #6272a4;\">This is for centering horizontally</span><span style=\"color: #6272a4;\"> */</span>\n  <span style=\"color: #bd93f9;\">align-items</span>: center;      <span style=\"color: #6272a4;\">/* </span><span style=\"color: #6272a4;\">This is for centering veritically</span><span style=\"color: #6272a4;\"> */</span>\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\nAnother way to center a child is using relative position. \n</p>\n<p>\n<b>Note</b> : <code>.parent</code> must have <code>position=relative</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-css\"><span style=\"color: #50fa7b;\">.child</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #6272a4;\">/* </span><span style=\"color: #6272a4;\">width: 90%;</span><span style=\"color: #6272a4;\"> */</span> \n  <span style=\"color: #6272a4;\">/* </span><span style=\"color: #6272a4;\">max-width: 450px;</span><span style=\"color: #6272a4;\"> */</span>\n  <span style=\"color: #6272a4;\">/* </span><span style=\"color: #6272a4;\">text-align: center;</span><span style=\"color: #6272a4;\"> */</span>\n  <span style=\"color: #bd93f9;\">position</span>: absolute;\n  <span style=\"color: #bd93f9;\">top</span>: 50%;\n  <span style=\"color: #bd93f9;\">left</span>: 50%;\n  <span style=\"color: #bd93f9;\">transform</span>: translate<span style=\"color: #ff79c6;\">(</span>-50%, -50%<span style=\"color: #ff79c6;\">)</span>;\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org27da099\">\n<h3 id=\"org27da099\">Centering Element Horizontally</h3>\n<div class=\"outline-text-3\" id=\"text-org27da099\">\n<p>\nInside a given container a child element can be horizontally centered using <code>margin</code> and <code>text-align</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-css\"><span style=\"color: #50fa7b;\">.parent</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #bd93f9;\">margin</span>: 0 auto;  <span style=\"color: #6272a4;\">/* </span><span style=\"color: #6272a4;\">zero from top and buttom, auto from left and right</span><span style=\"color: #6272a4;\"> */</span>\n<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #50fa7b;\">.child</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #bd93f9;\">text-align</span>: center;\n<span style=\"color: #61bfff;\">}</span> \n</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org4fc5231\">\n<h2 id=\"org4fc5231\">::after And ::before</h2>\n<div class=\"outline-text-2\" id=\"text-org4fc5231\">\n<p>\nThese are used to insert something after or before the element e.g underline a text\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/frontend-css",
		"heading_ids": [
			"org68dd35e",
			"org6010986",
			"orgd5e40ad",
			"org27da099",
			"org4fc5231"
		]
	},
	{
		"title": "frontend-figma",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgc3d0c91\">Introduction</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgc3d0c91\">\n<h2 id=\"orgc3d0c91\">Introduction</h2>\n<div class=\"outline-text-2\" id=\"text-orgc3d0c91\">\n<p>\nFor drawing circle select the cycle tool, hold Shift + drag mouse\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/frontend-figma",
		"heading_ids": [
			"orgc3d0c91"
		]
	},
	{
		"title": "git",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org69dc498\">Rebase</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org69dc498\">\n<h2 id=\"org69dc498\">Rebase</h2>\n<div class=\"outline-text-2\" id=\"text-org69dc498\">\n<p>\nGit rebase is used to make the commit history linear by replaying the commits onto some base. This is done in several stages as per the commits. If a feature branch which was originated from master has now grown too much, we can <code>squash</code> the commits so that replay doesn't happen too many times while rebasing with master.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">start rebasing master</span>\ngit rebase master\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">above command will start the rebase session which can be aborted anytime</span>\ngit rebase --abort\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">if there is conflict with some commit the conflict needs to be resolved and added with git add</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">then continue to change the same commit if you wish</span>\ngit rebase --continue\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">if a commit can be entirely skipped to</span>\ngit rebase --skip\n\n</pre>\n</div>\n<p>\nInteractive rebasing will first allow you do edit one file, where you can add commands about what to do with those commits when their turn comes in the replay. Then save the file and rebase will continue as per the commands you supplied.\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/git",
		"heading_ids": [
			"org69dc498"
		]
	},
	{
		"title": "bash-scripting",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org6600e6e\">Introduction</a></li>\n<li><a href=\"#org17c460b\">Expansions</a></li>\n<li><a href=\"#org09b32ac\">Pipes</a></li>\n<li><a href=\"#org7d34361\">Redirection</a></li>\n<li><a href=\"#org56beb58\">Grep</a></li>\n<li><a href=\"#org5af8c6d\">Scripting</a></li>\n<li><a href=\"#orgf586556\">Echo</a></li>\n<li><a href=\"#orgde2e62e\">Variables</a></li>\n<li><a href=\"#org9d91a2f\">Arithmetic Operations</a></li>\n<li><a href=\"#org890f18f\">Comparison Operations</a></li>\n<li><a href=\"#org63bdbb7\">Logical Operations</a></li>\n<li><a href=\"#orgafcf89b\">String Operations</a></li>\n<li><a href=\"#org7380628\">Date Command</a></li>\n<li><a href=\"#org5f92cd7\">Printf</a></li>\n<li><a href=\"#orgc63f2b2\">Array</a></li>\n<li><a href=\"#orgfd5f6df\">Files</a></li>\n<li><a href=\"#orge760bad\">Conditionals And Branching</a></li>\n<li><a href=\"#org8316b53\">Looping</a></li>\n<li><a href=\"#org0de19ce\">Function</a></li>\n<li><a href=\"#org62e69ba\">Inputs and Flags</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org6600e6e\">\n<h2 id=\"org6600e6e\">Introduction</h2>\n<div class=\"outline-text-2\" id=\"text-org6600e6e\">\n<p>\nReference: <a href=\"https://www.youtube.com/watch?v=emhouufDnB4\">Youtube: Cybersecurity Shandy</a>. This note is a direct translation of youtube video. For more check the bash manual\n</p>\n<ul class=\"org-ul\">\n<li><a href=\"https://flokoe.github.io/bash-hackers-wiki/\">https://flokoe.github.io/bash-hackers-wiki/</a></li>\n<li><a href=\"https://www.gnu.org/software/bash/manual/bash.html\">https://www.gnu.org/software/bash/manual/bash.html</a></li>\n<li><a href=\"https://tldp.org/LDP/abs/html/index.html\">https://tldp.org/LDP/abs/html/index.html</a></li>\n</ul>\n<p>\n<code>Shell</code> means the programme which provides <code>command-line interface</code> for interacting with operating system. <code>Bash</code> happens to be one of the most commonly used shell programme. It is also a default shell in many linux distro. <code>Bash scripting</code> means writting a sequence of commands which are interpreted by bash shell. The code snippets used in this tutorial are specific to bash shell and may not run in other shell programme, like <code>ksh</code>, <code>zsh</code> etc.\n</p>\n<p>\nCheck shell details using:\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">$0 inside script has different meaning, It means the script file, like scrip.sh</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">0</span>\nbash --version\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org17c460b\">\n<h2 id=\"org17c460b\">Expansions</h2>\n<div class=\"outline-text-2\" id=\"text-org17c460b\">\n<p>\nBash provides some handy shortcuts called expansions. This is to ease the process of writting too many code. Excute the code block using <code>org-babel-confirm-evaluate(C-c C-c)</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffb86c;\">echo</span> ~\n<span style=\"color: #ffb86c;\">echo</span> ~-\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">interpolation within a range</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">following creates file name same as below fruits</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">beware that items should be comma delimited and no space should be added</span>\ntouch <span style=\"color: #61bfff;\">{</span>apple,banana,cherry,durian<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">following are like looping over the range</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #61bfff;\">{</span>1..10<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">one leading zero is enough to fill width</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #61bfff;\">{</span>01..10<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #61bfff;\">{</span>a..z<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #61bfff;\">{</span>A..Z<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">or backwards</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #61bfff;\">{</span>z..a..2<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">third part is interval</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #61bfff;\">{</span>1..10..2<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #61bfff;\">{</span>a..z..2<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">file_1, file_10, file_2.... The file ordering is not good</span>\ntouch file_<span style=\"color: #61bfff;\">{</span>1..1000<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">file_001, file_002 ... here files are lexicographically easy to see</span>\ntouch file_<span style=\"color: #61bfff;\">{</span>01..100<span style=\"color: #61bfff;\">}</span>\n\n</pre>\n</div>\n<p>\nCode expansion in above looks like a for loop is run in the range. So the nested for loop can be emulated by simply providing two ranges. Below command outputs like: <code>01_a, 01_b, 01_c .......02_a, 02_b....</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">touch <span style=\"color: #61bfff;\">{</span>01..10<span style=\"color: #61bfff;\">}</span>_<span style=\"color: #61bfff;\">{</span>a..z<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">count no of files created</span>\nls -1 | wc -l\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org09b32ac\">\n<h2 id=\"org09b32ac\">Pipes</h2>\n<div class=\"outline-text-2\" id=\"text-org09b32ac\">\n<p>\nPipes takes the result of one command and pipes into the another for further processing. The command, <code>more</code> is used to view details page by page and <code>less</code> is probably more usefull since it allows scrolling in both direction.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #61bfff;\">{</span>01..1000<span style=\"color: #61bfff;\">}</span> | more\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #61bfff;\">{</span>01..1000<span style=\"color: #61bfff;\">}</span> | less\nls | more\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org7d34361\">\n<h2 id=\"org7d34361\">Redirection</h2>\n<div class=\"outline-text-2\" id=\"text-org7d34361\">\n<p>\nWe can redirect the standard input, output or error.The symbol, <code>&lt;</code> is used to redirec input, whereas symbol <code>&gt;</code> is used to redirect output. Symbol <code>1&gt;</code> and <code>2&gt;</code> are used for redirecting standard output and error respectively. Both can be redirected to a same file too using <code>&amp;&gt;</code>.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">./sol &lt; input\n./sol &lt; input &gt; output\n\ncp -v * ../some-other 1&gt; ../sucess.txt 2&gt; ../error.txt\ncp -v * ../some-other &amp;&gt; logs.txt\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">when you don't care about output, send them to vacuum</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"bye..bye!\"</span> &gt; /dev/null\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org56beb58\">\n<h2 id=\"org56beb58\">Grep</h2>\n<div class=\"outline-text-2\" id=\"text-org56beb58\">\n<p>\n<code>grep</code> is a search utility. It allows us to search a pattern from the file. More of this can be found in linux-command .Grep is used along with other cmd tools like <code>awk</code>, <code>sed</code>, <code>cut</code> which provides the text processing on filtered result.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">always colour the output by setting following in shell startup script</span>\n<span style=\"color: #ffb86c;\">export</span> <span style=\"color: #ffc9e8;\">GREP_OPTIONS</span>=<span style=\"color: #f1fa8c;\">'--colour=auto'</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">Here awk is used to print 12th word from each line</span>\ngrep -i break-in auth.log | awk <span style=\"color: #61bfff;\">{</span><span style=\"color: #f1fa8c;\">'print $12'</span><span style=\"color: #61bfff;\">}</span>\n\nping -c 1 example.com | grep <span style=\"color: #f1fa8c;\">'bytes from'</span> | cut -d = -f 4\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org5af8c6d\">\n<h2 id=\"org5af8c6d\">Scripting</h2>\n<div class=\"outline-text-2\" id=\"text-org5af8c6d\">\n<p>\nFirst line of script contains what is referred to as <code>Hashbang</code> OR <code>Shebang</code> which is nothing but <code>#!</code>, followed by path to the shell executable. So, the first line for bash script is <code>#!/bin/bash</code>. Bash doesn't mind indentation or extra white space. Run the script using command: <code>bash script.sh</code> or simply <code>./script.sh</code> if user has executable permission. The permission can be given using: <code>chmod +x script.sh</code>\n</p>\n<p>\nIf path to script is added to the path variable, then it can be run anyware using <code>script.sh</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">!/bin/</span><span style=\"color: #ff79c6;\">bash</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">'This is from bash script file'</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">These are comments</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">One more comment</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgf586556\">\n<h2 id=\"orgf586556\">Echo</h2>\n<div class=\"outline-text-2\" id=\"text-orgf586556\">\n<p>\nText can be displayed with command <code>echo</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffc9e8;\">greeting</span>=Hello\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">without single quote, some special chars needs to be escaped</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">greeting</span> World <span style=\"color: #f1fa8c;\">\\(</span>planet<span style=\"color: #f1fa8c;\">\\)</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">everything comes out literlly, $var is not resolved</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">'$greeting World (planet)'</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">$var are variables, you can escape as \\$var</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">So with double quote, variables can be easily inserted.</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"$greeting World (planet)\"</span>\n\n<span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">empty lines</span>\n<span style=\"color: #ffb86c;\">echo</span>\n<span style=\"color: #ffb86c;\">echo</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgde2e62e\">\n<h2 id=\"orgde2e62e\">Variables</h2>\n<div class=\"outline-text-2\" id=\"text-orgde2e62e\">\n<p>\nAs with any other programming language bash supports variables. Variables name start with a letter and subsequent alphanumeric characters.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffc9e8;\">a</span>=Hello\n<span style=\"color: #ffc9e8;\">b</span>=<span style=\"color: #f1fa8c;\">\"Good Morning\"</span>\n<span style=\"color: #ffc9e8;\">c</span>=16\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"$a, $b, I have $c apples.\"</span>\n</pre>\n</div>\n<p>\nUse <code>declare</code> to add attributes\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">d is an integer</span>\n<span style=\"color: #ffb86c;\">declare</span> -i <span style=\"color: #ffc9e8;\">d</span>=123\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">read only, basically a const variable</span>\n<span style=\"color: #ffb86c;\">declare</span> -r <span style=\"color: #ffc9e8;\">e</span>=456\n</pre>\n</div>\n<p>\nThere are builtin variables too like <code>$HOME</code>, <code>$PWD</code>, <code>$MACHTYPE</code> (returns machine type), <code>$HOSTNAME</code> (system name), <code>$USER</code> (username), <code>$BASH_VERSION</code>, <code>$SECONDS</code> (no. of seconds bash session have been running since login). You can echo these variables to see their content.\n</p>\n<p>\nResult of one command can be stored into a variable as follows:\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffc9e8;\">d</span>=$<span style=\"color: #61bfff;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">pwd</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">d</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org9d91a2f\">\n<h2 id=\"org9d91a2f\">Arithmetic Operations</h2>\n<div class=\"outline-text-2\" id=\"text-org9d91a2f\">\n<p>\nThe expression must be wrapped inside double round brackets with leading dollar symbol as follows:\n<code>$(( expression ))</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffc9e8;\">a</span>=10\n<span style=\"color: #ffc9e8;\">b</span>=3\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6; font-weight: bold;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">a ** b</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>  <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">exponentiation</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6; font-weight: bold;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">a * b</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6; font-weight: bold;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">a / b</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>   <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">integral division</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">echo a/b | bc -l</span><span style=\"color: #61bfff;\">)</span> <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">floating point division </span>\n\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6; font-weight: bold;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">a % b</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6; font-weight: bold;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">a + b</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6; font-weight: bold;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">a - b</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6; font-weight: bold;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">a--</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6; font-weight: bold;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">a++</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6; font-weight: bold;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">a+=4</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>  <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">other operators could be used too. </span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org890f18f\">\n<h2 id=\"org890f18f\">Comparison Operations</h2>\n<div class=\"outline-text-2\" id=\"text-org890f18f\">\n<p>\nLogical comparisons are very important to make decisions while writting a script. The sytax is as follows. The extra space shown between brackets is to prevent <code>org-mode</code> from treating it like a link. The returned value is has unusual meaning. 1 mean <code>False</code>, 0 means <code>True</code>. The space between brackets and operands and between operands and operator is mandatory as in given examples. Operators are: <code>&lt;, &gt;, &lt;=, &gt;=, ==, !=</code>\n</p>\n<p>\n<code>[ [ expression ] ]</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">spacing is mandatory</span>\n<span style=\"color: #61bfff;\">[</span><span style=\"color: #ff79c6;\">[</span> $<span style=\"color: #ffc9e8;\">a</span> &lt; $<span style=\"color: #ffc9e8;\">b</span> <span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">]</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">print return value</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">?</span>\n\n<span style=\"color: #61bfff;\">[</span><span style=\"color: #ff79c6;\">[</span> <span style=\"color: #f1fa8c;\">\"string-a\"</span> == <span style=\"color: #f1fa8c;\">\"string-b\"</span> <span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">]</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">?</span>\n\n</pre>\n</div>\n<p>\nFor working with integers the same operators are given different names: <code>-lt, -gt, -le, -ge, -eq, -ne</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #61bfff;\">[</span><span style=\"color: #ff79c6;\">[</span> $<span style=\"color: #ffc9e8;\">a</span> -lt $<span style=\"color: #ffc9e8;\">b</span> <span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">]</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">?</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org63bdbb7\">\n<h2 id=\"org63bdbb7\">Logical Operations</h2>\n<div class=\"outline-text-2\" id=\"text-org63bdbb7\">\n<p>\nLogicall operations are used join boolean expressions to get eventual <code>True</code> or <code>False</code>. It has binary operators, <code>&amp;&amp;</code> (and), <code>||</code> (or) and unary operators <code>!</code> (negation), <code>-z</code> (is null), <code>-n</code> (is not null)\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">empty string is considered null</span>\n<span style=\"color: #61bfff;\">[</span><span style=\"color: #ff79c6;\">[</span> -z <span style=\"color: #f1fa8c;\">\"\"</span> <span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">]</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">?</span>  <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">prints 0</span>\n\n<span style=\"color: #61bfff;\">[</span><span style=\"color: #ff79c6;\">[</span> -z <span style=\"color: #f1fa8c;\">\"\"</span> || 1 &lt; 2 <span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">]</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">?</span>  <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">prints 0</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgafcf89b\">\n<h2 id=\"orgafcf89b\">String Operations</h2>\n<div class=\"outline-text-2\" id=\"text-orgafcf89b\">\n<p>\nstring concatenation can be done with <code>c=$a$b</code>, but there can't be space between $a and $b. Various string operations are shown below.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">concatenate</span>\n<span style=\"color: #ffc9e8;\">a</span>=<span style=\"color: #f1fa8c;\">\"Hello\"</span>\n<span style=\"color: #ffc9e8;\">b</span>=<span style=\"color: #f1fa8c;\">\"World\"</span>\n<span style=\"color: #ffc9e8;\">c</span>=$<span style=\"color: #ffc9e8;\">a</span>$<span style=\"color: #ffc9e8;\">b</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">c</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">with spaces</span>\n<span style=\"color: #ffc9e8;\">c</span>=<span style=\"color: #f1fa8c;\">\"$a something $b\"</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">c</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">length of string</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span>#<span style=\"color: #ffc9e8;\">c</span><span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">substring starting from nth index, here n=3</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">c</span>:3<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">substring of some length from index n, here n=3, substring length=5</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">c</span>:3:5<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">last n characters, here n=4</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">c</span>: -4<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">First 3 of last 4 chars</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">c</span>: -4:3<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">replace first occurence of substr 'banana' with 'apple' from string 'fruits'</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">fruits</span>/banana/apple<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">replace all occurence of substr 'banana' with 'apple' from string 'fruits'</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">fruits</span>//banana/apple<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">replace if substr is beginning of string</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">fruits</span>/#banana/apple<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">use matching to replace</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">fruits</span>/ban*/apple<span style=\"color: #61bfff;\">}</span>\n\n</pre>\n</div>\n<p>\nPretty print can be done with ANSI escape using <code>echo -e</code>.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffb86c;\">echo</span> -e <span style=\"color: #f1fa8c;\">'\\033[34;42m Color Text \\033[0m'</span>\n</pre>\n</div>\n<p>\n<span class=\"underline\">Colour Table</span>\n</p>\n<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">\n<colgroup>\n<col class=\"org-left\"/>\n<col class=\"org-right\"/>\n<col class=\"org-right\"/>\n<col class=\"org-right\"/>\n<col class=\"org-right\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-left\" scope=\"col\">Color</th>\n<th class=\"org-right\" scope=\"col\">Foregound</th>\n<th class=\"org-right\" scope=\"col\">background</th>\n<th class=\"org-right\" scope=\"col\">tput setaf</th>\n<th class=\"org-right\" scope=\"col\">tput setab</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">Black</td>\n<td class=\"org-right\">30</td>\n<td class=\"org-right\">40</td>\n<td class=\"org-right\">0</td>\n<td class=\"org-right\">0</td>\n</tr>\n<tr>\n<td class=\"org-left\">Red</td>\n<td class=\"org-right\">31</td>\n<td class=\"org-right\">41</td>\n<td class=\"org-right\">1</td>\n<td class=\"org-right\">1</td>\n</tr>\n<tr>\n<td class=\"org-left\">Green</td>\n<td class=\"org-right\">32</td>\n<td class=\"org-right\">42</td>\n<td class=\"org-right\">2</td>\n<td class=\"org-right\">2</td>\n</tr>\n<tr>\n<td class=\"org-left\">Yellow</td>\n<td class=\"org-right\">33</td>\n<td class=\"org-right\">43</td>\n<td class=\"org-right\">3</td>\n<td class=\"org-right\">3</td>\n</tr>\n<tr>\n<td class=\"org-left\">Blue</td>\n<td class=\"org-right\">34</td>\n<td class=\"org-right\">44</td>\n<td class=\"org-right\">4</td>\n<td class=\"org-right\">4</td>\n</tr>\n<tr>\n<td class=\"org-left\">Magenta</td>\n<td class=\"org-right\">35</td>\n<td class=\"org-right\">45</td>\n<td class=\"org-right\">5</td>\n<td class=\"org-right\">5</td>\n</tr>\n<tr>\n<td class=\"org-left\">Cyan</td>\n<td class=\"org-right\">36</td>\n<td class=\"org-right\">46</td>\n<td class=\"org-right\">6</td>\n<td class=\"org-right\">6</td>\n</tr>\n<tr>\n<td class=\"org-left\">White</td>\n<td class=\"org-right\">37</td>\n<td class=\"org-right\">47</td>\n<td class=\"org-right\">7</td>\n<td class=\"org-right\">7</td>\n</tr>\n</tbody>\n</table>\n<p>\n<span class=\"underline\">Styled text (ANSI)</span>\n</p>\n<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">\n<colgroup>\n<col class=\"org-left\"/>\n<col class=\"org-right\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-left\" scope=\"col\">Style</th>\n<th class=\"org-right\" scope=\"col\">Value</th>\n<th class=\"org-left\" scope=\"col\">Remarks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">No Style</td>\n<td class=\"org-right\">0</td>\n<td class=\"org-left\"> </td>\n</tr>\n<tr>\n<td class=\"org-left\">Bold</td>\n<td class=\"org-right\">1</td>\n<td class=\"org-left\"> </td>\n</tr>\n<tr>\n<td class=\"org-left\">Low Intensity</td>\n<td class=\"org-right\">2</td>\n<td class=\"org-left\"> </td>\n</tr>\n<tr>\n<td class=\"org-left\">Underline</td>\n<td class=\"org-right\">4</td>\n<td class=\"org-left\"> </td>\n</tr>\n<tr>\n<td class=\"org-left\">Blinking</td>\n<td class=\"org-right\">5</td>\n<td class=\"org-left\"> </td>\n</tr>\n<tr>\n<td class=\"org-left\">Reverse</td>\n<td class=\"org-right\">7</td>\n<td class=\"org-left\"> </td>\n</tr>\n<tr>\n<td class=\"org-left\">Invisible</td>\n<td class=\"org-right\">8</td>\n<td class=\"org-left\">Used while entering password</td>\n</tr>\n</tbody>\n</table>\n<p>\nExample color: <code>'\\033[{semicolon-separated-value from table}m'</code> i.e <code>'\\033[34;42m'</code>\n</p>\n<p>\n<span class=\"underline\">Style using tput</span>\nCheck the code in above tables for range [0-7]\n</p>\n<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">\n<colgroup>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-left\" scope=\"col\">Style</th>\n<th class=\"org-left\" scope=\"col\">Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">Foreground</td>\n<td class=\"org-left\">tput setaf [0-7]</td>\n</tr>\n<tr>\n<td class=\"org-left\">Background</td>\n<td class=\"org-left\">tput setab [0-7]</td>\n</tr>\n<tr>\n<td class=\"org-left\">No Style</td>\n<td class=\"org-left\">tput sgv0</td>\n</tr>\n<tr>\n<td class=\"org-left\">Bold</td>\n<td class=\"org-left\">tput bold</td>\n</tr>\n<tr>\n<td class=\"org-left\">Low Intensity</td>\n<td class=\"org-left\">tput dim</td>\n</tr>\n<tr>\n<td class=\"org-left\">Underline</td>\n<td class=\"org-left\">tput smul</td>\n</tr>\n<tr>\n<td class=\"org-left\">Blinking</td>\n<td class=\"org-left\">tput blink</td>\n</tr>\n<tr>\n<td class=\"org-left\">Reverse</td>\n<td class=\"org-left\">tput rev</td>\n</tr>\n</tbody>\n</table>\n<p>\nFollowing is sample style, <code>red blinking text on black background</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffc9e8;\">flashRed</span>=$<span style=\"color: #61bfff;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">tput setab 0; tput setaf 1; tput blink</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n<p>\nTodo: check man page of <code>terminfo</code>\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org7380628\">\n<h2 id=\"org7380628\">Date Command</h2>\n<div class=\"outline-text-2\" id=\"text-org7380628\">\n<p>\n<code>date</code> command gives the current date. The result can be configured in various formats which you can find in the man page too.\nThe format specifiers are case sensitive. So check date man page to meet your requirements.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">date +<span style=\"color: #f1fa8c;\">\"%d-%m-%Y\"</span>  <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">23-08-23</span>\ndate +<span style=\"color: #f1fa8c;\">\"%d-%m-%Y\"</span>  <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">23-08-2023</span>\n\ndate +<span style=\"color: #f1fa8c;\">\"%H-%M-%S\"</span> \n</pre>\n</div>\n<p>\ndate manual page\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org5f92cd7\">\n<h2 id=\"org5f92cd7\">Printf</h2>\n<div class=\"outline-text-2\" id=\"text-org5f92cd7\">\n<p>\nUsed to Properly print strings. It has many specifiers or placeholders.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffb86c;\">printf</span> <span style=\"color: #f1fa8c;\">\"Name:\\t%s\\nAge:\\t%d\\nId:\\t%04d\\n\"</span> <span style=\"color: #f1fa8c;\">\"Mathura\"</span> <span style=\"color: #f1fa8c;\">\"26\"</span> <span style=\"color: #f1fa8c;\">\"7\"</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">assign result to variable</span>\n<span style=\"color: #ffb86c;\">printf</span> -v var <span style=\"color: #f1fa8c;\">\"Name:\\t%s\\nAge:\\t%d\\nId:\\t%04d\\n\"</span> <span style=\"color: #f1fa8c;\">\"Mathura\"</span> <span style=\"color: #f1fa8c;\">\"26\"</span> <span style=\"color: #f1fa8c;\">\"7\"</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">var</span>   <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">ignores newline and tab space</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"$var\"</span> <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">preserves tab spaces</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgc63f2b2\">\n<h2 id=\"orgc63f2b2\">Array</h2>\n<div class=\"outline-text-2\" id=\"text-orgc63f2b2\">\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffc9e8;\">a</span>=<span style=\"color: #61bfff;\">(</span><span style=\"color: #f1fa8c;\">\"apple\"</span>, <span style=\"color: #f1fa8c;\">\"banana\"</span>, <span style=\"color: #f1fa8c;\">\"cherry\"</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">b</span><span style=\"color: #ff79c6;\">[</span>2<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">}</span>  <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">prints cherry</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">append to end</span>\n<span style=\"color: #ffc9e8;\">a</span>+=<span style=\"color: #61bfff;\">(</span><span style=\"color: #f1fa8c;\">\"mango\"</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">prints comma separated array elements</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">a</span><span style=\"color: #ff79c6;\">[</span>@<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\nSome notations from string manipulation can be used with array, since string is also essentially an array.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">print last element</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">a</span><span style=\"color: #ff79c6;\">[</span>@<span style=\"color: #ff79c6;\">]</span>: -1<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\n<code>Associated Array</code> can be created using <code>declare</code> keyword. This is not supported below bash version 3\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffb86c;\">declare</span> -A map\nmap<span style=\"color: #61bfff;\">[</span>color<span style=\"color: #61bfff;\">]</span> = blue\nmap<span style=\"color: #61bfff;\">[</span><span style=\"color: #f1fa8c;\">\"my name\"</span><span style=\"color: #61bfff;\">]</span> = <span style=\"color: #f1fa8c;\">\"Mathura Tudu\"</span>\n\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">map</span><span style=\"color: #ff79c6;\">[</span><span style=\"color: #f1fa8c;\">\"my name\"</span><span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgfd5f6df\">\n<h2 id=\"orgfd5f6df\">Files</h2>\n<div class=\"outline-text-2\" id=\"text-orgfd5f6df\">\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">Writting into a file, overriding old content</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Some text\"</span> &gt; file.txt\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">clean file content</span>\n&gt; file.txt\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">append to file</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Appended text\"</span> &gt;&gt; file.txt\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">redirect input file</span>\nftp -n &lt; file.txt\n</pre>\n</div>\n<p>\nA file can be read line by line using <code>while</code> loop as below:\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffc9e8;\">i</span>=1\n<span style=\"color: #ff79c6;\">while </span><span style=\"color: #ffb86c;\">read</span> f; <span style=\"color: #ff79c6;\">do</span>\n    <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Line $i: $f\"</span>   <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">line contents</span>\n    <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>i++<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ff79c6;\">done</span> &lt; file.txt\n</pre>\n</div>\n<p>\nHere string\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">cat &lt;&lt; EndOfText\n<span style=\"color: #f1fa8c;\">    These are some</span>\n<span style=\"color: #f1fa8c;\">    multiline statements  </span>\n<span style=\"color: #f1fa8c;\">    EndOfText</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">removes leading tab char</span>\ncat &lt;&lt;- EndOfText\n<span style=\"color: #f1fa8c;\">    These are some</span>\n<span style=\"color: #f1fa8c;\">    multiline statements  </span>\n<span style=\"color: #f1fa8c;\">    EndOfText</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orge760bad\">\n<h2 id=\"orge760bad\">Conditionals And Branching</h2>\n<div class=\"outline-text-2\" id=\"text-orge760bad\">\n<p>\nIf conditionals\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffc9e8;\">a</span>=2\n<span style=\"color: #ff79c6;\">if</span> <span style=\"color: #61bfff;\">[</span> $<span style=\"color: #ffc9e8;\">a</span> -gt 4 <span style=\"color: #61bfff;\">]</span>; <span style=\"color: #ff79c6;\">then</span>\n    <span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">a</span> is greater than 4!\n<span style=\"color: #ff79c6;\">else</span>\n    <span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">a</span> is smaller than 4!\n<span style=\"color: #ff79c6;\">fi</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">check for matching with regex</span>\n<span style=\"color: #ffc9e8;\">a</span>=<span style=\"color: #f1fa8c;\">\"some text contents\"</span>\n<span style=\"color: #ff79c6;\">if</span> <span style=\"color: #61bfff;\">[</span><span style=\"color: #ff79c6;\">[</span> a =~ <span style=\"color: #50fa7b;\">[</span>0-9<span style=\"color: #50fa7b;\">]</span> <span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">]</span>; <span style=\"color: #ff79c6;\">then</span>\n    <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"There are numbers\"</span>\n<span style=\"color: #ff79c6;\">else</span>\n    <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"There are no numbers\"</span>\n<span style=\"color: #ff79c6;\">fi</span>\n</pre>\n</div>\n<p>\nCase statements\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">case statement</span>\n<span style=\"color: #ffc9e8;\">a</span>=<span style=\"color: #f1fa8c;\">\"dog\"</span>\n<span style=\"color: #ff79c6;\">case</span> $<span style=\"color: #ffc9e8;\">a</span><span style=\"color: #ff79c6;\"> in</span>\n    cat) <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Feline\"</span>;;\n    dog|puppy) <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Canine\"</span>;;\n    *) <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"None matched\"</span>;;  <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">, is automatically added</span>\n<span style=\"color: #ff79c6;\">esac</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org8316b53\">\n<h2 id=\"org8316b53\">Looping</h2>\n<div class=\"outline-text-2\" id=\"text-org8316b53\">\n<p>\nWe have already read a file line by line in loop. Various looping are given below\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">for loop</span>\n<span style=\"color: #ff79c6;\">for</span> i<span style=\"color: #ff79c6;\"> in</span> 1 2 3\n<span style=\"color: #ff79c6;\">do </span><span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">i</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">expansion</span>\n<span style=\"color: #ff79c6;\">for</span> i<span style=\"color: #ff79c6;\"> in</span> <span style=\"color: #61bfff;\">{</span>1..10<span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ff79c6;\">do </span><span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">i</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">C style for loop</span>\n<span style=\"color: #ff79c6;\">for</span> <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span> <span style=\"color: #ffc9e8;\">i</span>=1; i&lt;=10; i++ <span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ff79c6;\">do </span><span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">i</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">similary ranging an array</span>\n<span style=\"color: #ff79c6;\">for</span> f<span style=\"color: #ff79c6;\"> in</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">fruits</span><span style=\"color: #ff79c6;\">[</span>@<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ff79c6;\">do</span> <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">do something</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n<span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">associative array</span>\n<span style=\"color: #ff79c6;\">for</span> key<span style=\"color: #ff79c6;\"> in</span> $<span style=\"color: #61bfff;\">{</span><span style=\"color: #ffc9e8;\">!</span>map<span style=\"color: #ff79c6;\">[</span>@<span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">}</span>\n<span style=\"color: #ff79c6;\">do </span><span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"$key: ${map[key]}\"</span>  <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">do something</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n<span style=\"color: #6272a4;\">#</span><span style=\"color: #6272a4;\">looping output of some other command</span>\n<span style=\"color: #ff79c6;\">for</span> f<span style=\"color: #ff79c6;\"> in</span> $<span style=\"color: #61bfff;\">(</span><span style=\"color: #bd93f9; font-weight: bold;\">ls</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ff79c6;\">do</span> <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">do something</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">while loop</span>\n<span style=\"color: #ffc9e8;\">i</span>=1\n<span style=\"color: #ff79c6;\">while </span><span style=\"color: #ffb86c;\">read</span> f; <span style=\"color: #ff79c6;\">do</span>\n    <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Line $i: $f\"</span>   <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">line contents</span>\n    <span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">(</span>i++<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #ff79c6;\">done</span> &lt; file.txt\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">until statement</span>\n<span style=\"color: #ffc9e8;\">j</span>=0\n<span style=\"color: #ff79c6;\">until</span> <span style=\"color: #61bfff;\">[</span> $<span style=\"color: #ffc9e8;\">j</span> -ge 10 <span style=\"color: #61bfff;\">]</span>; <span style=\"color: #ff79c6;\">do</span>\n    <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">do something</span>\n<span style=\"color: #ff79c6;\">done</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org0de19ce\">\n<h2 id=\"org0de19ce\">Function</h2>\n<div class=\"outline-text-2\" id=\"text-org0de19ce\">\n<p>\nFunction params are cought into <code>$1</code>, <code>$2</code> … and so on. Or range over <code>$@</code> which contains all the arguments passed to the function.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ff79c6;\">function</span> <span style=\"color: #50fa7b;\">greet</span><span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n    <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Hello World $1, $2\"</span>\n<span style=\"color: #61bfff;\">}</span>\ngreet <span style=\"color: #f1fa8c;\">\"Mathura\"</span> <span style=\"color: #f1fa8c;\">\"Some other guy\"</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org62e69ba\">\n<h2 id=\"org62e69ba\">Inputs and Flags</h2>\n<div class=\"outline-text-2\" id=\"text-org62e69ba\">\n<p>\nTo make your function more interactive, often it is important make function to accept inputs from user. These arguments are similar to how a bash functions process the arguments passed to it.\n</p>\n<p>\n<code>$0</code> : is the script name\n<code>$1</code> : is the first argument, <code>$2</code> captures second argument and so on.\n<code>$@</code> : captures all the arguments from \\(1...\n=\\)#= : contains the number of arguments from $1..\n</p>\n<p>\nCall the programme as <code>bash script.sh arg1 arg2</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">prints the first param</span>\n<span style=\"color: #ffb86c;\">echo</span> $<span style=\"color: #ffc9e8;\">1</span>\n</pre>\n</div>\n<p>\nFlags are the most important input parameters which can be passed in any order. Lets say we need username and password to run the script. Following script if executed as <code>bash script.sh -u math2do -p user_123</code>, will store the param inside some variables for further processing. The flags can be in any order.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">here u and p are expected to be passed</span>\n<span style=\"color: #ff79c6;\">while </span><span style=\"color: #ffb86c;\">getopts</span> u:p: option; <span style=\"color: #ff79c6;\">do</span>\n    <span style=\"color: #ff79c6;\">case</span> $<span style=\"color: #ffc9e8;\">option</span><span style=\"color: #ff79c6;\"> in</span>\n        u) <span style=\"color: #ffc9e8;\">user</span>=$<span style=\"color: #ffc9e8;\">OPTARG</span>;;\n        p) <span style=\"color: #ffc9e8;\">pass</span>=$<span style=\"color: #ffc9e8;\">OPTARG</span>;;\n    <span style=\"color: #ff79c6;\">esac</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">make some optional params, a and b are optional so by convention they are kept at end</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">all params are optional, so not null check must happen for compulsory flags</span>\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">unexpected params are manually  handled, below code shows bash can be informed about such unexpeted param</span>\n<span style=\"color: #ff79c6;\">while </span><span style=\"color: #ffb86c;\">getopts</span> u:p:ab option; <span style=\"color: #ff79c6;\">do</span>\n    <span style=\"color: #ff79c6;\">case</span> $<span style=\"color: #ffc9e8;\">option</span><span style=\"color: #ff79c6;\"> in</span>\n        u) <span style=\"color: #ffc9e8;\">user</span>=$<span style=\"color: #ffc9e8;\">OPTARG</span>;;\n        p) <span style=\"color: #ffc9e8;\">pass</span>=$<span style=\"color: #ffc9e8;\">OPTARG</span>;;\n        a) <span style=\"color: #ffc9e8;\">a</span>=$<span style=\"color: #ffc9e8;\">OPTARG</span>;;\n        b) <span style=\"color: #ffc9e8;\">b</span>=$<span style=\"color: #ffc9e8;\">OPTARG</span>;;\n        ?) <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Unexpected param\"</span>  \n    <span style=\"color: #ff79c6;\">esac</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">adding colon in beginning tells the bash that unknown params have come</span>\n<span style=\"color: #ff79c6;\">while </span><span style=\"color: #ffb86c;\">getopts</span> :u:p:ab option; <span style=\"color: #ff79c6;\">do</span>\n    <span style=\"color: #ff79c6;\">case</span> $<span style=\"color: #ffc9e8;\">option</span><span style=\"color: #ff79c6;\"> in</span>\n        u) <span style=\"color: #ffc9e8;\">user</span>=$<span style=\"color: #ffc9e8;\">OPTARG</span>;;\n        p) <span style=\"color: #ffc9e8;\">pass</span>=$<span style=\"color: #ffc9e8;\">OPTARG</span>;;\n        a) <span style=\"color: #ffc9e8;\">a</span>=$<span style=\"color: #ffc9e8;\">OPTARG</span>;;\n        b) <span style=\"color: #ffc9e8;\">b</span>=$<span style=\"color: #ffc9e8;\">OPTARG</span>;;\n        ?) <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Unexpected param\"</span>\n    <span style=\"color: #ff79c6;\">esac</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n</pre>\n</div>\n<p>\nInteractive inputs\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"What is your name?\"</span>\n<span style=\"color: #ffb86c;\">read</span> name\n\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Welcome $name\"</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">silent reading of password</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"Password:\"</span>\n<span style=\"color: #ffb86c;\">read</span> -s pass\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">same line input</span>\n<span style=\"color: #ffb86c;\">echo</span> -p <span style=\"color: #f1fa8c;\">\"Your favourite animal\"</span> animal\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">give the user menu to choose from numbered list, user needs to choose the number</span>\n<span style=\"color: #ff79c6;\">select</span> animal<span style=\"color: #ff79c6;\"> in</span> <span style=\"color: #f1fa8c;\">\"cat\"</span> <span style=\"color: #f1fa8c;\">\"dog\"</span> <span style=\"color: #f1fa8c;\">\"bird\"</span> <span style=\"color: #f1fa8c;\">\"fish\"</span>\n<span style=\"color: #ff79c6;\">do</span>\n    <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"You selected $animal\"</span>\n    <span style=\"color: #ff79c6;\">break</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">wire selection with case</span>\n<span style=\"color: #ff79c6;\">select</span> option<span style=\"color: #ff79c6;\"> in</span> <span style=\"color: #f1fa8c;\">\"cat\"</span> <span style=\"color: #f1fa8c;\">\"dog\"</span> <span style=\"color: #f1fa8c;\">\"bird\"</span> <span style=\"color: #f1fa8c;\">\"fish\"</span>\n<span style=\"color: #ff79c6;\">do</span>\n    <span style=\"color: #ff79c6;\">case</span> $<span style=\"color: #ffc9e8;\">option</span><span style=\"color: #ff79c6;\"> in</span>\n        cat) <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"You like cats\"</span>;;\n        dog) <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"You like dogs\"</span>;;\n        cat) <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"You like birds\"</span>;;\n        cat) <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"You like fishes\"</span>;;\n        *) <span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"I don't know what you like\"</span>;;  <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">comma is automatically getting inserted.</span>\n    <span style=\"color: #ff79c6;\">esac</span>\n\n    <span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">if you don't put break, you've keep selecting animals from list</span>\n    <span style=\"color: #ff79c6;\">break</span>\n<span style=\"color: #ff79c6;\">done</span>\n\n</pre>\n</div>\n<p>\nIf some inputs needs to be provided by user then validate the input. Check if flag is passed or not as shown:\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\n<span style=\"color: #ffb86c;\">read</span> -p <span style=\"color: #f1fa8c;\">\"Your favourite animal\"</span> animal\n<span style=\"color: #ff79c6;\">while</span> <span style=\"color: #61bfff;\">[</span><span style=\"color: #ff79c6;\">[</span> -z <span style=\"color: #f1fa8c;\">\"$animal\"</span> <span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">]</span>; <span style=\"color: #ff79c6;\">do</span>\n    <span style=\"color: #ffb86c;\">read</span> -p <span style=\"color: #f1fa8c;\">\"I need an answer\"</span> animal\n<span style=\"color: #ff79c6;\">done</span>\n\n</pre>\n</div>\n<p>\nSometime if user doesn't provide input you can assume some default values.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #ffb86c;\">read</span> -p <span style=\"color: #f1fa8c;\">\"Your favourite animal [cat]\"</span> animal\n<span style=\"color: #ff79c6;\">if</span> <span style=\"color: #61bfff;\">[</span><span style=\"color: #ff79c6;\">[</span> -z <span style=\"color: #f1fa8c;\">\"$animal\"</span> <span style=\"color: #ff79c6;\">]</span><span style=\"color: #61bfff;\">]</span>; <span style=\"color: #ff79c6;\">then</span>\n    <span style=\"color: #ffc9e8;\">animal</span>=<span style=\"color: #f1fa8c;\">\"cat\"</span>\n<span style=\"color: #ff79c6;\">fi</span>\n<span style=\"color: #ffb86c;\">echo</span> <span style=\"color: #f1fa8c;\">\"$animal is selected\"</span>\n\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/bash-scripting",
		"heading_ids": [
			"org6600e6e",
			"org17c460b",
			"org09b32ac",
			"org7d34361",
			"org56beb58",
			"org5af8c6d",
			"orgf586556",
			"orgde2e62e",
			"org9d91a2f",
			"org890f18f",
			"org63bdbb7",
			"orgafcf89b",
			"org7380628",
			"org5f92cd7",
			"orgc63f2b2",
			"orgfd5f6df",
			"orge760bad",
			"org8316b53",
			"org0de19ce",
			"org62e69ba"
		]
	},
	{
		"title": "linux-commands",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org6680508\">Introduction</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org6680508\">\n<h2 id=\"org6680508\">Introduction</h2>\n</div>\n</div>\n</body>",
		"path": "/content/linux-commands",
		"heading_ids": [
			"org6680508"
		]
	},
	{
		"title": "next-js",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org10eef61\">Create New Project</a></li>\n<li><a href=\"#org13e2279\">Using Template</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org10eef61\">\n<h2 id=\"org10eef61\">Create New Project</h2>\n<div class=\"outline-text-2\" id=\"text-org10eef61\">\n<p>\nVisit official website for better understanding: <a href=\"https://nextjs.org/docs/getting-started/installation\">NextJS Installation</a>.\n</p>\n<p>\nCreate a Project using following commands\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">Accept all default options from prompt.</span>\nnpx create-next-app@latest blog --typescript --tailwind --eslint\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">Run project using</span>\nnpm run dev\n\n</pre>\n</div>\n<p>\nInit the shadecn/ui using following commands. Refer to section <code>theming</code>, <code>Dark Mode</code> and <code>CLI</code> section from <a href=\"https://ui.shadcn.com/docs\">Docs</a>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">go with default style</span>\nnpx shadcn-ui@latest init\n</pre>\n</div>\n<p>\nFor resolving conflicts between eslint and prettier.  Read documents from here: <a href=\"https://nextjs.org/docs/pages/building-your-application/configuring/eslint\">Eslint</a>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">npm install --save-dev eslint-config-prettier\n</pre>\n</div>\n<p>\nThen add prettier to your existing ESLint config in file <code>.eslintrc.json</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #61bfff;\">{</span>\n    <span style=\"color: #f1fa8c;\">\"extends\"</span>: <span style=\"color: #ff79c6;\">[</span><span style=\"color: #f1fa8c;\">\"next\"</span>, <span style=\"color: #f1fa8c;\">\"prettier\"</span><span style=\"color: #ff79c6;\">]</span>\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\nRun prettier and eslint without conflict.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">install prettier</span>\nnpm install --save-dev --save-exact prettier\n</pre>\n</div>\n<p>\nCreate a file called <code>.prettierrc</code> and add all  formating rules as follows\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #61bfff;\">{</span>\n    <span style=\"color: #f1fa8c;\">\"trailingComma\"</span>: <span style=\"color: #f1fa8c;\">\"es5\"</span>,\n    <span style=\"color: #f1fa8c;\">\"semi\"</span>: <span style=\"color: #8be9fd;\">true</span>,\n    <span style=\"color: #f1fa8c;\">\"tabWidth\"</span>: 2,\n    <span style=\"color: #f1fa8c;\">\"singleQuote\"</span>: <span style=\"color: #8be9fd;\">false</span>,\n    <span style=\"color: #f1fa8c;\">\"jsxSingleQuote\"</span>: <span style=\"color: #8be9fd;\">false</span>,\n    <span style=\"color: #f1fa8c;\">\"editor.formatOnSave\"</span>: <span style=\"color: #8be9fd;\">true</span>\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\nAutomatic tailwind class sorter using:\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">npm install -D prettier prettier-plugin-tailwindcss\n</pre>\n</div>\n<p>\nAdd the following content to file <code>.prettierrc</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #61bfff;\">{</span>\n    <span style=\"color: #f1fa8c;\">\"plugins\"</span>: <span style=\"color: #ff79c6;\">[</span><span style=\"color: #f1fa8c;\">\"prettier-plugin-tailwindcss\"</span><span style=\"color: #ff79c6;\">]</span>\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n<p>\nInstall <code>lucid-react</code> icons using npm\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">npm install lucide-react\n</pre>\n</div>\n<p>\nInstall wrap-balancer. This can probably be removed by using <code>text-balance</code> property of tailwind css.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">npm install react-wrap-balancer\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org13e2279\">\n<h2 id=\"org13e2279\">Using Template</h2>\n<div class=\"outline-text-2\" id=\"text-org13e2279\">\n<p>\nYou can clone this project from github: <a href=\"https://github.com/math2do/template\">template</a> and install dependencies to get started.\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">clone project</span>\ngit clone git@github.com:math2do/template.git <span style=\"color: #61bfff;\">{</span>project-name<span style=\"color: #61bfff;\">}</span>\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">install dependencies</span>\nnpm install \n\n</pre>\n</div>\n<p>\nAfter creating new project from template, do following clean-up:\n</p>\n<ul class=\"org-ul\">\n<li>Change the git origin by removing existing origin</li>\n<li>Change the content of README.md as per this new project.</li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\"><span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">remove existing origin</span>\ngit origin rm origin\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">add new origin</span>\ngit remote add origin <span style=\"color: #61bfff;\">{</span>new-origin<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/next-js",
		"heading_ids": [
			"org10eef61",
			"org13e2279"
		]
	},
	{
		"title": "postgress",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org4e41773\">Explicit Locking</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org4e41773\">\n<h2 id=\"org4e41773\">Explicit Locking</h2>\n<div class=\"outline-text-2\" id=\"text-org4e41773\">\n<div class=\"org-src-container\">\n<pre class=\"src src-sql\"><span style=\"color: #ff79c6;\">BEGIN</span> <span style=\"color: #ff79c6;\">TRANSACTION</span>;\n\n<span style=\"color: #ff79c6;\">SELECT</span> * <span style=\"color: #ff79c6;\">FROM</span> figures <span style=\"color: #ff79c6;\">WHERE</span> <span style=\"color: #ff79c6;\">name</span>=<span style=\"color: #f1fa8c;\">'robot'</span> <span style=\"color: #ff79c6;\">AND</span> game_id=222 <span style=\"color: #ff79c6;\">FOR</span> <span style=\"color: #ff79c6;\">UPDATE</span>;\n<span style=\"color: #6272a4;\">-- </span><span style=\"color: #6272a4;\">Check whether the move is valid, then update position of the piece that was returned by the previous SELECT</span>\n<span style=\"color: #ff79c6;\">UPDATE</span> figures <span style=\"color: #ff79c6;\">SET</span> <span style=\"color: #ff79c6;\">position</span>=<span style=\"color: #f1fa8c;\">'c4'</span> <span style=\"color: #ff79c6;\">WHERE</span> id=1234;   \n\n<span style=\"color: #ff79c6;\">COMMIT</span>;\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/postgress",
		"heading_ids": [
			"org4e41773"
		]
	},
	{
		"title": "clean-folder",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org18568de\">Backup Files</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org18568de\">\n<h2 id=\"org18568de\">Backup Files</h2>\n<div class=\"outline-text-2\" id=\"text-org18568de\">\n<ul class=\"org-ul\">\n<li><p>\nstore backup files as follows\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> backup-directory-alist '<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\".\"</span> . ,<span style=\"color: #bd93f9;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/backups/\"</span> user-emacs-directory<span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div></li>\n<li><p>\nAuto save files like #init.el#\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">auto-save-mode doesn't create the path automatically!</span>\n<span style=\"color: #61bfff;\">(</span>make-directory <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/auto-saves/\"</span> user-emacs-directory<span style=\"color: #ff79c6;\">)</span> t<span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">auto saved files like #Emacs.org#</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> auto-save-list-file-prefix <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/auto-saves/sessions/\"</span> user-emacs-directory<span style=\"color: #ff79c6;\">)</span>\n      auto-save-file-name-transforms `<span style=\"color: #ff79c6;\">(</span><span style=\"color: #50fa7b;\">(</span><span style=\"color: #f1fa8c;\">\".*\"</span> ,<span style=\"color: #bd93f9;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/auto-saves/\"</span> user-emacs-directory<span style=\"color: #bd93f9;\">)</span> t<span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div></li>\n<li><p>\nfiles created by packages projectile, lsp, dap\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> projectile-known-projects-file <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/projectile-bookmarks.eld\"</span> user-emacs-directory<span style=\"color: #ff79c6;\">)</span>\n      lsp-session-file <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/.lsp-session-v1\"</span> user-emacs-directory<span style=\"color: #ff79c6;\">)</span>\n      dap-breakpoints-file <span style=\"color: #ff79c6;\">(</span>expand-file-name <span style=\"color: #f1fa8c;\">\"tmp/.dap-breakpoints\"</span> user-emacs-directory<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div></li>\n</ul>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/clean-folder",
		"heading_ids": [
			"org18568de"
		]
	},
	{
		"title": "emacs-commands",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orga7250ed\">List of frequently used commands</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orga7250ed\">\n<h2 id=\"orga7250ed\">List of frequently used commands</h2>\n<div class=\"outline-text-2\" id=\"text-orga7250ed\">\n<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">\n<colgroup>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-left\" scope=\"col\">Shortcut</th>\n<th class=\"org-left\" scope=\"col\">Action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">C-S-backspace</td>\n<td class=\"org-left\">deleting current line</td>\n</tr>\n<tr>\n<td class=\"org-left\">C-c C-c</td>\n<td class=\"org-left\">excute the code block inside org file</td>\n</tr>\n<tr>\n<td class=\"org-left\">C-c C-c</td>\n<td class=\"org-left\">toggle check box in org</td>\n</tr>\n<tr>\n<td class=\"org-left\">M-RET</td>\n<td class=\"org-left\">keep listing in org mode</td>\n</tr>\n<tr>\n<td class=\"org-left\">S-UP</td>\n<td class=\"org-left\">increase time-stamp in org mode</td>\n</tr>\n<tr>\n<td class=\"org-left\">S-DOWN</td>\n<td class=\"org-left\">decrease time-stamp in org mode</td>\n</tr>\n<tr>\n<td class=\"org-left\">C-x g</td>\n<td class=\"org-left\">magit-status</td>\n</tr>\n<tr>\n<td class=\"org-left\"> </td>\n<td class=\"org-left\"> </td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/emacs-commands",
		"heading_ids": [
			"orga7250ed"
		]
	},
	{
		"title": "dap-mode",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org685a681\">Debug with dap-mode</a>\n<ul>\n<li><a href=\"#org60dec3b\">Launching the debugger</a></li>\n<li><a href=\"#orgfeeb7dd\"><span class=\"todo TODO\">TODO</span> Debugging the project</a></li>\n<li><a href=\"#org2c0beef\">Debugging tests</a></li>\n<li><a href=\"#org4032e65\">Features</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org685a681\">\n<h2 id=\"org685a681\">Debug with dap-mode</h2>\n<div class=\"outline-text-2\" id=\"text-org685a681\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-org60dec3b\">\n<h3 id=\"org60dec3b\">Launching the debugger</h3>\n<div class=\"outline-text-3\" id=\"text-org60dec3b\">\n<ul class=\"org-ul\">\n<li><code>dap-debug</code> : Select a template to execute</li>\n<li><code>dap-debug-last</code> : Run the most recent template</li>\n<li><code>dap-debug-recent</code> : Select a recent template to run</li>\n<li><code>dap-disconnect</code> : Disconnect from debugging session (output buffer retained)</li>\n<li><code>dap-delete-session</code> : Delete the current session (output buffer is deleted)</li>\n<li><code>dap-delete-all-sessions</code> : Clean up all debugging sessions</li>\n<li><code>dap-breakpoint-toggle</code> : add/remove the breakpoint in current line</li>\n</ul>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgfeeb7dd\">\n<h3 id=\"orgfeeb7dd\"><span class=\"todo TODO\">TODO</span> Debugging the project</h3>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org2c0beef\">\n<h3 id=\"org2c0beef\">Debugging tests</h3>\n<div class=\"outline-text-3\" id=\"text-org2c0beef\">\n<ul class=\"org-ul\">\n<li>Put cursor inside the test function</li>\n<li><code>M-x dap-debug</code> then select <code>Go Dlv Test Current Function Configuration</code></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org4032e65\">\n<h3 id=\"org4032e65\">Features</h3>\n<div class=\"outline-text-3\" id=\"text-org4032e65\">\n<ul class=\"org-ul\">\n<li><code>dap-breakpoint-toggle</code> : Toggle a breakpoint on current line</li>\n<li><code>dap-breakpoint-delete-all</code> : Delete all breakpoints in the workspace</li>\n<li><code>dap-breakpoint-condition</code> : Set hit condition, number hits before breakpoint stops e.g golang boolean expressions <code>DisableSmsConfig == false</code></li>\n<li><code>dap-breakpoint-log-message</code> : Set log message for breakpoint (interpolate expressions with {}) e.g <code>Debugger is printing {i}</code></li>\n<li><code>dap-ui-breakpoints</code> : Show breakpoints panel</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/dap-mode",
		"heading_ids": [
			"org685a681",
			"org60dec3b",
			"orgfeeb7dd",
			"org2c0beef",
			"org4032e65"
		]
	},
	{
		"title": "elastic-search",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org2987ca3\">Introduction</a></li>\n<li><a href=\"#orgcc4e998\">Elastic Stack</a></li>\n<li><a href=\"#orgf907c51\">Elasticsearch</a></li>\n<li><a href=\"#orgd9010bf\">Kibana</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org2987ca3\">\n<h2 id=\"org2987ca3\">Introduction</h2>\n<div class=\"outline-text-2\" id=\"text-org2987ca3\">\n<p>\nElastic Search is used in many spheres of Software Development. It is open source\n</p>\n<ul class=\"org-ul\">\n<li>Logging</li>\n<li>Metrics</li>\n<li>Security Analytics</li>\n<li>Business Analytics</li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgcc4e998\">\n<h2 id=\"orgcc4e998\">Elastic Stack</h2>\n<div class=\"outline-text-2\" id=\"text-orgcc4e998\">\n<p>\nThe elastic stack consists of <code>kibana</code>, <code>elasticsearch</code>, <code>beats</code>, and <code>logstash</code>. The data is securely taken from any source, in any format, then search, analyse and visualize in real time. \n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgf907c51\">\n<h2 id=\"orgf907c51\">Elasticsearch</h2>\n<div class=\"outline-text-2\" id=\"text-orgf907c51\">\n<p>\n<b>Store</b> | <b>Search</b> | <b>Analyze</b>\nInstall from - <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/8.10/deb.html\">https://www.elastic.co/guide/en/elasticsearch/reference/8.10/deb.html</a>\nThe generated password for the elastic built-in superuser is : dN0*ZniThW=hB4nL*EXz\n</p>\n<p>\nThis is the heart of <code>Elastic Stack</code>. Data is stored as documents. As an example, following JSON object is stored in Elasticsearch under a unique ID!\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-js\"><span style=\"color: #61bfff;\">{</span>\n    name: <span style=\"color: #f1fa8c;\">\"Clementines(3lb bag)\"</span>,\n    category: <span style=\"color: #f1fa8c;\">\"Fruits\"</span>,\n    brand: <span style=\"color: #f1fa8c;\">\"Cuties\"</span>,\n    Prize: <span style=\"color: #f1fa8c;\">\"$4.29\"</span>\n<span style=\"color: #61bfff;\">}</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgd9010bf\">\n<h2 id=\"orgd9010bf\">Kibana</h2>\n<div class=\"outline-text-2\" id=\"text-orgd9010bf\">\n<p>\nVisualise and manage data.\n</p>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/elastic-search",
		"heading_ids": [
			"org2987ca3",
			"orgcc4e998",
			"orgf907c51",
			"orgd9010bf"
		]
	},
	{
		"title": "GNU Stow",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org08b8dfe\">Basic Usage</a></li>\n<li><a href=\"#org561bf50\">some emacs-lisp</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org08b8dfe\">\n<h2 id=\"org08b8dfe\">Basic Usage</h2>\n<div class=\"outline-text-2\" id=\"text-org08b8dfe\">\n<div class=\"org-src-container\">\n<pre class=\"src src-shell\">\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">execute from ./.dotfiles</span>\nstow .\n\n<span style=\"color: #6272a4;\"># </span><span style=\"color: #6272a4;\">which is same as</span>\nstow -d=~/.dotfiles -t=~/\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org561bf50\">\n<h2 id=\"org561bf50\">some emacs-lisp</h2>\n<div class=\"outline-text-2\" id=\"text-org561bf50\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span>message <span style=\"color: #f1fa8c;\">\"Hello\"</span><span style=\"color: #61bfff;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/gnu-stow",
		"heading_ids": [
			"org08b8dfe",
			"org561bf50"
		]
	},
	{
		"title": "gophers-conference",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orga9d7923\">Introduction</a></li>\n<li><a href=\"#org511f3e6\">How to structure Go Project - Kat Zien</a></li>\n<li><a href=\"#org0a811c7\">Solid Go Design - Dave Cheney</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orga9d7923\">\n<h2 id=\"orga9d7923\">Introduction</h2>\n<div class=\"outline-text-2\" id=\"text-orga9d7923\">\n<p>\nThis note contains the content of <code>Gopher Conference</code>. \n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org511f3e6\">\n<h2 id=\"org511f3e6\">How to structure Go Project - Kat Zien</h2>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org0a811c7\">\n<h2 id=\"org0a811c7\">Solid Go Design - Dave Cheney</h2>\n</div>\n</div>\n<div class=\"status\" id=\"postamble\">\n<p class=\"date\">Date: 2023-09-06 Wed 00:00</p>\n</div>\n</body>",
		"path": "/content/gophers-conference",
		"heading_ids": [
			"orga9d7923",
			"org511f3e6",
			"org0a811c7"
		]
	},
	{
		"title": "Database Isolation Level",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgba52a4b\">Introduction</a></li>\n<li><a href=\"#org5d70bee\">Read Phenomena</a>\n<ul>\n<li><a href=\"#org85d5eca\">Dirty Read</a></li>\n<li><a href=\"#orgf7d7c0f\">Non-Repeatable Read</a></li>\n<li><a href=\"#orgde8931a\">Phantom Read</a></li>\n</ul>\n</li>\n<li><a href=\"#org6e7047d\">Isolation Levels</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgba52a4b\">\n<h2 id=\"orgba52a4b\">Introduction</h2>\n<div class=\"outline-text-2\" id=\"text-orgba52a4b\">\n<p>\nMost popular database system satisfies the property called <code>ACID</code>, which stands for Atomicity, Consistency, Isolation And Durability respectively. We'll focus on Isolation, also known as <code>Transaction Isolation</code>.\n</p>\n<p>\nThe most secure way to execute transactions is to run the trasactions one by one, sequentially. But with this approach we'll lose the capability of concurrency. Some trasactions may take long time, and may be we could have run a concurrent transaction so that we could fetch results fastly. But allowing concurrent trasactions can lead to various inconsistencies described below.\n</p>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org5d70bee\">\n<h2 id=\"org5d70bee\">Read Phenomena</h2>\n<div class=\"outline-text-2\" id=\"text-org5d70bee\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-org85d5eca\">\n<h3 id=\"org85d5eca\">Dirty Read</h3>\n<div class=\"outline-text-3\" id=\"text-org85d5eca\">\n<p>\nWhen a transaction reads a data that is partially modified by another uncommited transaction.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgf7d7c0f\">\n<h3 id=\"orgf7d7c0f\">Non-Repeatable Read</h3>\n<div class=\"outline-text-3\" id=\"text-orgf7d7c0f\">\n<p>\nWhen a transaction reads the the same row twice, and it gets different result because another transaction commited some changes in between.\n</p>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-orgde8931a\">\n<h3 id=\"orgde8931a\">Phantom Read</h3>\n<div class=\"outline-text-3\" id=\"text-orgde8931a\">\n<p>\nWhen a transaction re-executes query, the different set of rows satisfies the query because another concurrent transaction affected some rows.\n</p>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org6e7047d\">\n<h2 id=\"org6e7047d\">Isolation Levels</h2>\n<div class=\"outline-text-2\" id=\"text-org6e7047d\">\n<p>\nLevels of Isolations is the strictness applied to transactions. At highest Isolation level, we expect non of above read phenomena to occur. Following is list from high to low\n</p>\n<ol class=\"org-ol\">\n<li>Serializable</li>\n<li>Repeatable Read</li>\n<li>Read Commited</li>\n<li>Read Uncommited</li>\n</ol>\n<p>\nFollowing table shows the relationship between Isolation Levels and Read Phenonmena.\n</p>\n<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">\n<colgroup>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-left\" scope=\"col\"> </th>\n<th class=\"org-left\" scope=\"col\">Serializable</th>\n<th class=\"org-left\" scope=\"col\">Repeatable Read</th>\n<th class=\"org-left\" scope=\"col\">Read Commited</th>\n<th class=\"org-left\" scope=\"col\">Read Uncommited</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">Dirty Read</td>\n<td class=\"org-left\">No</td>\n<td class=\"org-left\">No</td>\n<td class=\"org-left\">No</td>\n<td class=\"org-left\">Yes</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\">Non-Repeatable Read</td>\n<td class=\"org-left\">No</td>\n<td class=\"org-left\">No</td>\n<td class=\"org-left\">Yes</td>\n<td class=\"org-left\">Yes</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\">Phantom Read</td>\n<td class=\"org-left\">No</td>\n<td class=\"org-left\">No</td>\n<td class=\"org-left\">Yes</td>\n<td class=\"org-left\">Yes</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"status\" id=\"postamble\">\n<p class=\"date\">Date: 2024-05-11 Sat 00:00</p>\n</div>\n</body>",
		"path": "/content/database-isolation-level",
		"heading_ids": [
			"orgba52a4b",
			"org5d70bee",
			"org85d5eca",
			"orgf7d7c0f",
			"orgde8931a",
			"org6e7047d"
		]
	},
	{
		"title": "must-have-emacs-configs",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org1e0e011\">Recent Files</a></li>\n<li><a href=\"#org61da658\">Save History of commands</a></li>\n<li><a href=\"#org693236d\">Revert Buffers when file have changed in disk</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org1e0e011\">\n<h2 id=\"org1e0e011\">Recent Files</h2>\n<div class=\"outline-text-2\" id=\"text-org1e0e011\">\n<ul class=\"org-ul\">\n<li><p>\nSet the following config in <code>init.el</code>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span>recentf-mode 1<span style=\"color: #61bfff;\">)</span>\n</pre>\n</div></li>\n<li>Check the recently visited files with command <code>M-x</code> <code>recentf-open-files</code>\nthen use numbers to jump to that buffer</li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org61da658\">\n<h2 id=\"org61da658\">Save History of commands</h2>\n<div class=\"outline-text-2\" id=\"text-org61da658\">\n<ul class=\"org-ul\">\n<li><p>\nuse following config\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> history-length 25<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span>savehist-mode 1<span style=\"color: #61bfff;\">)</span>\n</pre>\n</div></li>\n<li>Open <code>M-x</code> then cycle through the old commands by <code>M-p</code></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org693236d\">\n<h2 id=\"org693236d\">Revert Buffers when file have changed in disk</h2>\n<div class=\"outline-text-2\" id=\"text-org693236d\">\n<ul class=\"org-ul\">\n<li><p>\nUse following command\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span>global-auto-revert-mode 1<span style=\"color: #61bfff;\">)</span>\n</pre>\n</div></li>\n</ul>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/must-have-emacs-configs",
		"heading_ids": [
			"org1e0e011",
			"org61da658",
			"org693236d"
		]
	},
	{
		"title": "Notes on Org-Presentation",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#orgfcee193\">Org-Presentation</a></li>\n<li><a href=\"#org8a7a4b0\">Centering the Presentation</a></li>\n<li><a href=\"#org8683e91\">Increasing Font in org-presentation</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-orgfcee193\">\n<h2 id=\"orgfcee193\">Org-Presentation</h2>\n<div class=\"outline-text-2\" id=\"text-orgfcee193\">\n<ul class=\"org-ul\">\n<li>Init the <code>org-present</code> minor mode with <code>M-x</code> <code>org-present</code></li>\n<li>Most of the related commands then can be found by <code>M-x</code> <code>org-present...</code></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org8a7a4b0\">\n<h2 id=\"org8a7a4b0\">Centering the Presentation</h2>\n<div class=\"outline-text-2\" id=\"text-org8a7a4b0\">\n<ul class=\"org-ul\">\n<li>Using a package called <code>visual-fill-column</code></li>\n<li>Install using <code>M-x</code> <code>package-install</code> <code>visual-fill-column</code></li>\n<li>Add following config to the <code>init.el</code></li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\">\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Configure fill-width</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">setq</span> visual-fill-column-width 100\n      visual-fill-column-center-text t<span style=\"color: #61bfff;\">)</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">my/org-present-start</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Center the presentation and wrap lines</span>\n  <span style=\"color: #ff79c6;\">(</span>visual-fill-column-mode 1<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ff79c6;\">(</span>visual-line-mode 1<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">my/org-present-end</span> <span style=\"color: #50fa7b;\">()</span>\n    <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Stop Centering the presentation and wrap lines</span>\n    <span style=\"color: #50fa7b;\">(</span>visual-fill-column-mode 1<span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>visual-line-mode 1<span style=\"color: #50fa7b;\">)</span>\n\n    <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Register hooks with org-present</span>\n    <span style=\"color: #50fa7b;\">(</span>add-hook 'org-present-mode-hook 'my/org-present-start<span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span>add-hook 'org-present-mode-quit-hook 'my/org-present-end<span style=\"color: #50fa7b;\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org8683e91\">\n<h2 id=\"org8683e91\">Increasing Font in org-presentation</h2>\n<div class=\"outline-text-2\" id=\"text-org8683e91\">\n<ul class=\"org-ul\">\n<li>Using the variable <code>face-ramapping-alist</code> which changes faces for current</li>\n</ul>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/notes-on-org-presentation",
		"heading_ids": [
			"orgfcee193",
			"org8a7a4b0",
			"org8683e91"
		]
	},
	{
		"title": "projectile",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org2584cb0\">List Projectile Commands with <code>C-c p</code></a></li>\n<li><a href=\"#orgbe1bfb5\">Some Useful selections</a></li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org2584cb0\">\n<h2 id=\"org2584cb0\">List Projectile Commands with <code>C-c p</code></h2>\n</div>\n<div class=\"outline-2\" id=\"outline-container-orgbe1bfb5\">\n<h2 id=\"orgbe1bfb5\">Some Useful selections</h2>\n<div class=\"outline-text-2\" id=\"text-orgbe1bfb5\">\n<ul class=\"org-ul\">\n<li><code>f</code> - find file in a project</li>\n<li><code>u</code> - run project</li>\n<li><code>p</code> - switch to projects</li>\n<li><code>D</code> - Open project as dired</li>\n</ul>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/projectile",
		"heading_ids": [
			"org2584cb0",
			"orgbe1bfb5"
		]
	},
	{
		"title": "emacs-terminal",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org6258f10\">Terminals</a>\n<ul>\n<li><a href=\"#orge281b3b\">term-mode</a></li>\n<li><a href=\"#org7d2429e\">vterm</a></li>\n<li><a href=\"#org05660ac\">eshell</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org6258f10\">\n<h2 id=\"org6258f10\">Terminals</h2>\n<div class=\"outline-text-2\" id=\"text-org6258f10\">\n</div>\n<div class=\"outline-3\" id=\"outline-container-orge281b3b\">\n<h3 id=\"orge281b3b\">term-mode</h3>\n<div class=\"outline-text-3\" id=\"text-orge281b3b\">\n<ul class=\"org-ul\">\n<li>configure term mode in <code>init.el</code></li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">term</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> explicit-shell-file-name <span style=\"color: #f1fa8c;\">\"bash\"</span><span style=\"color: #ff79c6;\">)</span> <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Change this to zsh, etc</span>\n  <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(setq explicit-zsh-args '())         ;; Use 'explicit-&lt;shell&gt;-args for shell-specific args</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Match the default Bash shell prompt.  Update this if you have a custom prompt</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> term-prompt-regexp <span style=\"color: #f1fa8c;\">\"^[</span><span style=\"color: #bd93f9; font-weight: bold;\">^</span><span style=\"color: #f1fa8c;\">#$%&gt;\\n]*[#$%&gt;] *\"</span><span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">colouring your terminal in term-mode</span>\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">eterm-256color</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>term-mode . eterm-256color-mode<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n<ul class=\"org-ul\">\n<li>Launch term-mode using <code>M-x</code> then search for <code>term</code></li>\n<li><code>C-c C-k</code> - Enter char-mode so that all key combination are given to terminal and not to emacs</li>\n<li><code>C-c C-j</code> - Return to line-mode</li>\n</ul>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org7d2429e\">\n<h3 id=\"org7d2429e\">vterm</h3>\n<div class=\"outline-text-3\" id=\"text-org7d2429e\">\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\"><span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">vterm</span>\n  <span style=\"color: #ffb86c;\">:commands</span> vterm\n  <span style=\"color: #ffb86c;\">:config</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> term-prompt-regexp <span style=\"color: #f1fa8c;\">\"^[</span><span style=\"color: #bd93f9; font-weight: bold;\">^</span><span style=\"color: #f1fa8c;\">#$%&gt;\\n]*[#$%&gt;] *\"</span><span style=\"color: #ff79c6;\">)</span>  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Set this to match your custom shell prompt</span>\n  <span style=\"color: #6272a4;\">;;</span><span style=\"color: #6272a4;\">(setq vterm-shell \"zsh\")                       ;; Set this to customize the shell to launch</span>\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> vterm-max-scrollback 10000<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org05660ac\">\n<h3 id=\"org05660ac\">eshell</h3>\n<div class=\"outline-text-3\" id=\"text-org05660ac\">\n<ul class=\"org-ul\">\n<li>run <code>use-theme</code> inside <code>eshell</code> and then apply the theme</li>\n</ul>\n<div class=\"org-src-container\">\n<pre class=\"src src-emacs-lisp\">\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">defun</span> <span style=\"color: #50fa7b;\">efs/configure-eshell</span> <span style=\"color: #ff79c6;\">()</span>\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Save command history when commands are entered</span>\n  <span style=\"color: #ff79c6;\">(</span>add-hook 'eshell-pre-command-hook 'eshell-save-some-history<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #6272a4;\">;; </span><span style=\"color: #6272a4;\">Truncate buffer for performance</span>\n  <span style=\"color: #ff79c6;\">(</span>add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer<span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">setq</span> eshell-history-size         10000\n        eshell-buffer-maximum-lines 10000\n        eshell-hist-ignoredups t\n        eshell-scroll-to-bottom-on-input t<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">eshell-git-prompt</span><span style=\"color: #61bfff;\">)</span>\n\n<span style=\"color: #61bfff;\">(</span><span style=\"color: #ff79c6;\">use-package</span> <span style=\"color: #8be9fd;\">eshell</span>\n  <span style=\"color: #ffb86c;\">:hook</span> <span style=\"color: #ff79c6;\">(</span>eshell-first-time-mode . efs/configure-eshell<span style=\"color: #ff79c6;\">)</span>\n  <span style=\"color: #ffb86c;\">:config</span>\n\n  <span style=\"color: #ff79c6;\">(</span><span style=\"color: #ff79c6;\">with-eval-after-load</span> 'esh-opt\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> eshell-destroy-buffer-when-process-dies t<span style=\"color: #50fa7b;\">)</span>\n    <span style=\"color: #50fa7b;\">(</span><span style=\"color: #ff79c6;\">setq</span> eshell-visual-commands '<span style=\"color: #bd93f9;\">(</span><span style=\"color: #f1fa8c;\">\"htop\"</span> <span style=\"color: #f1fa8c;\">\"zsh\"</span> <span style=\"color: #f1fa8c;\">\"vim\"</span><span style=\"color: #bd93f9;\">)</span><span style=\"color: #50fa7b;\">)</span><span style=\"color: #ff79c6;\">)</span>\n\n  <span style=\"color: #ff79c6;\">(</span>eshell-git-prompt-use-theme 'powerline<span style=\"color: #ff79c6;\">)</span><span style=\"color: #61bfff;\">)</span>\n\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/emacs-terminal",
		"heading_ids": [
			"org6258f10",
			"orge281b3b",
			"org7d2429e",
			"org05660ac"
		]
	},
	{
		"title": "Test File",
		"toc": "<div id=\"table-of-contents\" role=\"doc-toc\">\n\n<div id=\"text-table-of-contents\" role=\"doc-toc\">\n<ul>\n<li><a href=\"#org7be23ca\">Testing APIs using restclient</a>\n<ul>\n<li><a href=\"#org0ace6a7\">Second heading</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>",
		"body": "<body>\n<div class=\"content\" id=\"content\">\n\n\n<div class=\"outline-2\" id=\"outline-container-org7be23ca\">\n<h2 id=\"org7be23ca\">Testing APIs using restclient</h2>\n<div class=\"outline-text-2\" id=\"text-org7be23ca\">\n<p>\nThis is some description about restclient. I will try to export this org note into markdown, so that I can display these notes over my website in <a href=\"http://www.math2do.in\">math2do</a>\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-restclient\"><span style=\"color: #ff79c6;\">GET</span> <span style=\"color: #50fa7b;\">https://api.github.com</span>\n<span style=\"color: #ffc9e8;\">User-Agent</span>: <span style=\"color: #f1fa8c;\">Emacs Restclient</span>\n</pre>\n</div>\n<p>\nThis is a hello world message in <code>emacs</code>\nLet's see how text decoration works\n</p>\n<p>\n<code>text within equal sign</code>\n<code>text within tilde</code>\n<b>Text within star</b>\n<span class=\"underline\">Text within underscore</span>\n<i>Text within forward slash</i>\n</p>\n<p>\nList of items:\n</p>\n<ul class=\"org-ul\">\n<li>First item</li>\n<li>Second Item</li>\n<li>Third item</li>\n<li>Fourth Item</li>\n</ul>\n<p>\nTodo List:\n</p>\n<ul class=\"org-ul\">\n<li class=\"trans\"><code>[-]</code> what is thi</li>\n<li>this is done</li>\n<li class=\"off\"><code>[ ]</code> I don't about this</li>\n</ul>\n<p>\nAdd time stamp to this <span class=\"timestamp-wrapper\"><span class=\"timestamp\">&lt;2024-05-09 Thu&gt;</span></span>\n</p>\n</div>\n<div class=\"outline-3\" id=\"outline-container-org0ace6a7\">\n<h3 id=\"org0ace6a7\">Second heading</h3>\n<div class=\"outline-text-3\" id=\"text-org0ace6a7\">\n<p>\nSome description under second heading with code block in c++\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-cpp\"><span style=\"color: #bd93f9; font-weight: bold;\">#include</span> <span style=\"color: #61bfff;\">&lt;</span><span style=\"color: #f1fa8c;\">stdio.h</span><span style=\"color: #61bfff;\">&gt;</span>\n<span style=\"color: #ff79c6;\">using</span> <span style=\"color: #ff79c6;\">namespace</span> <span style=\"color: #8be9fd;\">std</span>;\n\n<span style=\"color: #bd93f9;\">int</span> <span style=\"color: #50fa7b;\">main</span><span style=\"color: #61bfff;\">()</span> <span style=\"color: #61bfff;\">{</span>\n  <span style=\"color: #bd93f9;\">int</span> <span style=\"color: #ffc9e8;\">n</span>;\n  cin &gt;&gt; n;\n  <span style=\"color: #ff79c6;\">return</span> 0;\n<span style=\"color: #61bfff;\">}</span> \n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</body>",
		"path": "/content/test-file",
		"heading_ids": [
			"org7be23ca",
			"org0ace6a7"
		]
	}
]